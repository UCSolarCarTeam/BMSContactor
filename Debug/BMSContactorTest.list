
BMSContactorTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000567c  08000190  08000190  00001190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800580c  0800580c  0000680c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005878  08005878  0000703c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005878  08005878  00006878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005880  08005880  0000703c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005880  08005880  00006880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005884  08005884  00006884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000003c  20000000  08005888  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  2000003c  080058c4  0000703c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  080058c4  000071dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000126d2  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002836  00000000  00000000  0001973e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001000  00000000  00000000  0001bf78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c76  00000000  00000000  0001cf78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020cb2  00000000  00000000  0001dbee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a49  00000000  00000000  0003e8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbbde  00000000  00000000  000512e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011cec7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004638  00000000  00000000  0011cf0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00121544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000003c 	.word	0x2000003c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080057f4 	.word	0x080057f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000040 	.word	0x20000040
 80001cc:	080057f4 	.word	0x080057f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	@ 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_frsub>:
 800097c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000980:	e002      	b.n	8000988 <__addsf3>
 8000982:	bf00      	nop

08000984 <__aeabi_fsub>:
 8000984:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000988 <__addsf3>:
 8000988:	0042      	lsls	r2, r0, #1
 800098a:	bf1f      	itttt	ne
 800098c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000990:	ea92 0f03 	teqne	r2, r3
 8000994:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000998:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800099c:	d06a      	beq.n	8000a74 <__addsf3+0xec>
 800099e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009a6:	bfc1      	itttt	gt
 80009a8:	18d2      	addgt	r2, r2, r3
 80009aa:	4041      	eorgt	r1, r0
 80009ac:	4048      	eorgt	r0, r1
 80009ae:	4041      	eorgt	r1, r0
 80009b0:	bfb8      	it	lt
 80009b2:	425b      	neglt	r3, r3
 80009b4:	2b19      	cmp	r3, #25
 80009b6:	bf88      	it	hi
 80009b8:	4770      	bxhi	lr
 80009ba:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80009be:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009c2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80009c6:	bf18      	it	ne
 80009c8:	4240      	negne	r0, r0
 80009ca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009ce:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80009d2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4249      	negne	r1, r1
 80009da:	ea92 0f03 	teq	r2, r3
 80009de:	d03f      	beq.n	8000a60 <__addsf3+0xd8>
 80009e0:	f1a2 0201 	sub.w	r2, r2, #1
 80009e4:	fa41 fc03 	asr.w	ip, r1, r3
 80009e8:	eb10 000c 	adds.w	r0, r0, ip
 80009ec:	f1c3 0320 	rsb	r3, r3, #32
 80009f0:	fa01 f103 	lsl.w	r1, r1, r3
 80009f4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80009f8:	d502      	bpl.n	8000a00 <__addsf3+0x78>
 80009fa:	4249      	negs	r1, r1
 80009fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a00:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a04:	d313      	bcc.n	8000a2e <__addsf3+0xa6>
 8000a06:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a0a:	d306      	bcc.n	8000a1a <__addsf3+0x92>
 8000a0c:	0840      	lsrs	r0, r0, #1
 8000a0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a12:	f102 0201 	add.w	r2, r2, #1
 8000a16:	2afe      	cmp	r2, #254	@ 0xfe
 8000a18:	d251      	bcs.n	8000abe <__addsf3+0x136>
 8000a1a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a22:	bf08      	it	eq
 8000a24:	f020 0001 	biceq.w	r0, r0, #1
 8000a28:	ea40 0003 	orr.w	r0, r0, r3
 8000a2c:	4770      	bx	lr
 8000a2e:	0049      	lsls	r1, r1, #1
 8000a30:	eb40 0000 	adc.w	r0, r0, r0
 8000a34:	3a01      	subs	r2, #1
 8000a36:	bf28      	it	cs
 8000a38:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a3c:	d2ed      	bcs.n	8000a1a <__addsf3+0x92>
 8000a3e:	fab0 fc80 	clz	ip, r0
 8000a42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a46:	ebb2 020c 	subs.w	r2, r2, ip
 8000a4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a4e:	bfaa      	itet	ge
 8000a50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a54:	4252      	neglt	r2, r2
 8000a56:	4318      	orrge	r0, r3
 8000a58:	bfbc      	itt	lt
 8000a5a:	40d0      	lsrlt	r0, r2
 8000a5c:	4318      	orrlt	r0, r3
 8000a5e:	4770      	bx	lr
 8000a60:	f092 0f00 	teq	r2, #0
 8000a64:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a68:	bf06      	itte	eq
 8000a6a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a6e:	3201      	addeq	r2, #1
 8000a70:	3b01      	subne	r3, #1
 8000a72:	e7b5      	b.n	80009e0 <__addsf3+0x58>
 8000a74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a7c:	bf18      	it	ne
 8000a7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a82:	d021      	beq.n	8000ac8 <__addsf3+0x140>
 8000a84:	ea92 0f03 	teq	r2, r3
 8000a88:	d004      	beq.n	8000a94 <__addsf3+0x10c>
 8000a8a:	f092 0f00 	teq	r2, #0
 8000a8e:	bf08      	it	eq
 8000a90:	4608      	moveq	r0, r1
 8000a92:	4770      	bx	lr
 8000a94:	ea90 0f01 	teq	r0, r1
 8000a98:	bf1c      	itt	ne
 8000a9a:	2000      	movne	r0, #0
 8000a9c:	4770      	bxne	lr
 8000a9e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000aa2:	d104      	bne.n	8000aae <__addsf3+0x126>
 8000aa4:	0040      	lsls	r0, r0, #1
 8000aa6:	bf28      	it	cs
 8000aa8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000aac:	4770      	bx	lr
 8000aae:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000ab2:	bf3c      	itt	cc
 8000ab4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ab8:	4770      	bxcc	lr
 8000aba:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000abe:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000ac2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ac6:	4770      	bx	lr
 8000ac8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000acc:	bf16      	itet	ne
 8000ace:	4608      	movne	r0, r1
 8000ad0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ad4:	4601      	movne	r1, r0
 8000ad6:	0242      	lsls	r2, r0, #9
 8000ad8:	bf06      	itte	eq
 8000ada:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ade:	ea90 0f01 	teqeq	r0, r1
 8000ae2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_ui2f>:
 8000ae8:	f04f 0300 	mov.w	r3, #0
 8000aec:	e004      	b.n	8000af8 <__aeabi_i2f+0x8>
 8000aee:	bf00      	nop

08000af0 <__aeabi_i2f>:
 8000af0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000af4:	bf48      	it	mi
 8000af6:	4240      	negmi	r0, r0
 8000af8:	ea5f 0c00 	movs.w	ip, r0
 8000afc:	bf08      	it	eq
 8000afe:	4770      	bxeq	lr
 8000b00:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b04:	4601      	mov	r1, r0
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	e01c      	b.n	8000b46 <__aeabi_l2f+0x2a>

08000b0c <__aeabi_ul2f>:
 8000b0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b10:	bf08      	it	eq
 8000b12:	4770      	bxeq	lr
 8000b14:	f04f 0300 	mov.w	r3, #0
 8000b18:	e00a      	b.n	8000b30 <__aeabi_l2f+0x14>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_l2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b28:	d502      	bpl.n	8000b30 <__aeabi_l2f+0x14>
 8000b2a:	4240      	negs	r0, r0
 8000b2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b30:	ea5f 0c01 	movs.w	ip, r1
 8000b34:	bf02      	ittt	eq
 8000b36:	4684      	moveq	ip, r0
 8000b38:	4601      	moveq	r1, r0
 8000b3a:	2000      	moveq	r0, #0
 8000b3c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b40:	bf08      	it	eq
 8000b42:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b46:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b4a:	fabc f28c 	clz	r2, ip
 8000b4e:	3a08      	subs	r2, #8
 8000b50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b54:	db10      	blt.n	8000b78 <__aeabi_l2f+0x5c>
 8000b56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b5a:	4463      	add	r3, ip
 8000b5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b60:	f1c2 0220 	rsb	r2, r2, #32
 8000b64:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b68:	fa20 f202 	lsr.w	r2, r0, r2
 8000b6c:	eb43 0002 	adc.w	r0, r3, r2
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f102 0220 	add.w	r2, r2, #32
 8000b7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b80:	f1c2 0220 	rsb	r2, r2, #32
 8000b84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b88:	fa21 f202 	lsr.w	r2, r1, r2
 8000b8c:	eb43 0002 	adc.w	r0, r3, r2
 8000b90:	bf08      	it	eq
 8000b92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_ldivmod>:
 8000b98:	b97b      	cbnz	r3, 8000bba <__aeabi_ldivmod+0x22>
 8000b9a:	b972      	cbnz	r2, 8000bba <__aeabi_ldivmod+0x22>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bfbe      	ittt	lt
 8000ba0:	2000      	movlt	r0, #0
 8000ba2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000ba6:	e006      	blt.n	8000bb6 <__aeabi_ldivmod+0x1e>
 8000ba8:	bf08      	it	eq
 8000baa:	2800      	cmpeq	r0, #0
 8000bac:	bf1c      	itt	ne
 8000bae:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000bb2:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bb6:	f000 ba29 	b.w	800100c <__aeabi_idiv0>
 8000bba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc2:	2900      	cmp	r1, #0
 8000bc4:	db09      	blt.n	8000bda <__aeabi_ldivmod+0x42>
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	db1a      	blt.n	8000c00 <__aeabi_ldivmod+0x68>
 8000bca:	f000 f8a3 	bl	8000d14 <__udivmoddi4>
 8000bce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd6:	b004      	add	sp, #16
 8000bd8:	4770      	bx	lr
 8000bda:	4240      	negs	r0, r0
 8000bdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	db1b      	blt.n	8000c1c <__aeabi_ldivmod+0x84>
 8000be4:	f000 f896 	bl	8000d14 <__udivmoddi4>
 8000be8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf0:	b004      	add	sp, #16
 8000bf2:	4240      	negs	r0, r0
 8000bf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf8:	4252      	negs	r2, r2
 8000bfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bfe:	4770      	bx	lr
 8000c00:	4252      	negs	r2, r2
 8000c02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c06:	f000 f885 	bl	8000d14 <__udivmoddi4>
 8000c0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c12:	b004      	add	sp, #16
 8000c14:	4240      	negs	r0, r0
 8000c16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c1a:	4770      	bx	lr
 8000c1c:	4252      	negs	r2, r2
 8000c1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c22:	f000 f877 	bl	8000d14 <__udivmoddi4>
 8000c26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c2e:	b004      	add	sp, #16
 8000c30:	4252      	negs	r2, r2
 8000c32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c4c:	f000 b9de 	b.w	800100c <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f85c 	bl	8000d14 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f000 fa2d 	bl	80010d0 <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b82a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c8a:	f000 f825 	bl	8000cd8 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_f2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	f7ff fc05 	bl	80004a8 <__aeabi_f2d>
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd0 <__aeabi_f2ulz+0x38>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	4606      	mov	r6, r0
 8000ca4:	460f      	mov	r7, r1
 8000ca6:	f7ff fc57 	bl	8000558 <__aeabi_dmul>
 8000caa:	f000 fa39 	bl	8001120 <__aeabi_d2uiz>
 8000cae:	4604      	mov	r4, r0
 8000cb0:	f7ff fbd8 	bl	8000464 <__aeabi_ui2d>
 8000cb4:	4b07      	ldr	r3, [pc, #28]	@ (8000cd4 <__aeabi_f2ulz+0x3c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f7ff fc4e 	bl	8000558 <__aeabi_dmul>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	4630      	mov	r0, r6
 8000cc2:	4639      	mov	r1, r7
 8000cc4:	f7ff fa90 	bl	80001e8 <__aeabi_dsub>
 8000cc8:	f000 fa2a 	bl	8001120 <__aeabi_d2uiz>
 8000ccc:	4621      	mov	r1, r4
 8000cce:	bdd0      	pop	{r4, r6, r7, pc}
 8000cd0:	3df00000 	.word	0x3df00000
 8000cd4:	41f00000 	.word	0x41f00000

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fc39 	bl	8000558 <__aeabi_dmul>
 8000ce6:	f000 fa1b 	bl	8001120 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fbba 	bl	8000464 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fc30 	bl	8000558 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fa72 	bl	80001e8 <__aeabi_dsub>
 8000d04:	f000 fa0c 	bl	8001120 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <__udivmoddi4>:
 8000d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d18:	9d08      	ldr	r5, [sp, #32]
 8000d1a:	468e      	mov	lr, r1
 8000d1c:	4604      	mov	r4, r0
 8000d1e:	4688      	mov	r8, r1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d14a      	bne.n	8000dba <__udivmoddi4+0xa6>
 8000d24:	428a      	cmp	r2, r1
 8000d26:	4617      	mov	r7, r2
 8000d28:	d962      	bls.n	8000df0 <__udivmoddi4+0xdc>
 8000d2a:	fab2 f682 	clz	r6, r2
 8000d2e:	b14e      	cbz	r6, 8000d44 <__udivmoddi4+0x30>
 8000d30:	f1c6 0320 	rsb	r3, r6, #32
 8000d34:	fa01 f806 	lsl.w	r8, r1, r6
 8000d38:	fa20 f303 	lsr.w	r3, r0, r3
 8000d3c:	40b7      	lsls	r7, r6
 8000d3e:	ea43 0808 	orr.w	r8, r3, r8
 8000d42:	40b4      	lsls	r4, r6
 8000d44:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d48:	fa1f fc87 	uxth.w	ip, r7
 8000d4c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d50:	0c23      	lsrs	r3, r4, #16
 8000d52:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d5a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0x62>
 8000d62:	18fb      	adds	r3, r7, r3
 8000d64:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d68:	f080 80ea 	bcs.w	8000f40 <__udivmoddi4+0x22c>
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	f240 80e7 	bls.w	8000f40 <__udivmoddi4+0x22c>
 8000d72:	3902      	subs	r1, #2
 8000d74:	443b      	add	r3, r7
 8000d76:	1a9a      	subs	r2, r3, r2
 8000d78:	b2a3      	uxth	r3, r4
 8000d7a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d7e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d86:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d8a:	459c      	cmp	ip, r3
 8000d8c:	d909      	bls.n	8000da2 <__udivmoddi4+0x8e>
 8000d8e:	18fb      	adds	r3, r7, r3
 8000d90:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000d94:	f080 80d6 	bcs.w	8000f44 <__udivmoddi4+0x230>
 8000d98:	459c      	cmp	ip, r3
 8000d9a:	f240 80d3 	bls.w	8000f44 <__udivmoddi4+0x230>
 8000d9e:	443b      	add	r3, r7
 8000da0:	3802      	subs	r0, #2
 8000da2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000da6:	eba3 030c 	sub.w	r3, r3, ip
 8000daa:	2100      	movs	r1, #0
 8000dac:	b11d      	cbz	r5, 8000db6 <__udivmoddi4+0xa2>
 8000dae:	40f3      	lsrs	r3, r6
 8000db0:	2200      	movs	r2, #0
 8000db2:	e9c5 3200 	strd	r3, r2, [r5]
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	d905      	bls.n	8000dca <__udivmoddi4+0xb6>
 8000dbe:	b10d      	cbz	r5, 8000dc4 <__udivmoddi4+0xb0>
 8000dc0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4608      	mov	r0, r1
 8000dc8:	e7f5      	b.n	8000db6 <__udivmoddi4+0xa2>
 8000dca:	fab3 f183 	clz	r1, r3
 8000dce:	2900      	cmp	r1, #0
 8000dd0:	d146      	bne.n	8000e60 <__udivmoddi4+0x14c>
 8000dd2:	4573      	cmp	r3, lr
 8000dd4:	d302      	bcc.n	8000ddc <__udivmoddi4+0xc8>
 8000dd6:	4282      	cmp	r2, r0
 8000dd8:	f200 8105 	bhi.w	8000fe6 <__udivmoddi4+0x2d2>
 8000ddc:	1a84      	subs	r4, r0, r2
 8000dde:	eb6e 0203 	sbc.w	r2, lr, r3
 8000de2:	2001      	movs	r0, #1
 8000de4:	4690      	mov	r8, r2
 8000de6:	2d00      	cmp	r5, #0
 8000de8:	d0e5      	beq.n	8000db6 <__udivmoddi4+0xa2>
 8000dea:	e9c5 4800 	strd	r4, r8, [r5]
 8000dee:	e7e2      	b.n	8000db6 <__udivmoddi4+0xa2>
 8000df0:	2a00      	cmp	r2, #0
 8000df2:	f000 8090 	beq.w	8000f16 <__udivmoddi4+0x202>
 8000df6:	fab2 f682 	clz	r6, r2
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	f040 80a4 	bne.w	8000f48 <__udivmoddi4+0x234>
 8000e00:	1a8a      	subs	r2, r1, r2
 8000e02:	0c03      	lsrs	r3, r0, #16
 8000e04:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e08:	b280      	uxth	r0, r0
 8000e0a:	b2bc      	uxth	r4, r7
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e12:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e1a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x11e>
 8000e22:	18fb      	adds	r3, r7, r3
 8000e24:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e28:	d202      	bcs.n	8000e30 <__udivmoddi4+0x11c>
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	f200 80e0 	bhi.w	8000ff0 <__udivmoddi4+0x2dc>
 8000e30:	46c4      	mov	ip, r8
 8000e32:	1a9b      	subs	r3, r3, r2
 8000e34:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e38:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e3c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e40:	fb02 f404 	mul.w	r4, r2, r4
 8000e44:	429c      	cmp	r4, r3
 8000e46:	d907      	bls.n	8000e58 <__udivmoddi4+0x144>
 8000e48:	18fb      	adds	r3, r7, r3
 8000e4a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x142>
 8000e50:	429c      	cmp	r4, r3
 8000e52:	f200 80ca 	bhi.w	8000fea <__udivmoddi4+0x2d6>
 8000e56:	4602      	mov	r2, r0
 8000e58:	1b1b      	subs	r3, r3, r4
 8000e5a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e5e:	e7a5      	b.n	8000dac <__udivmoddi4+0x98>
 8000e60:	f1c1 0620 	rsb	r6, r1, #32
 8000e64:	408b      	lsls	r3, r1
 8000e66:	fa22 f706 	lsr.w	r7, r2, r6
 8000e6a:	431f      	orrs	r7, r3
 8000e6c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e70:	fa20 f306 	lsr.w	r3, r0, r6
 8000e74:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e78:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e7c:	4323      	orrs	r3, r4
 8000e7e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e82:	fa1f fc87 	uxth.w	ip, r7
 8000e86:	fbbe f0f9 	udiv	r0, lr, r9
 8000e8a:	0c1c      	lsrs	r4, r3, #16
 8000e8c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e90:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e94:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e98:	45a6      	cmp	lr, r4
 8000e9a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9e:	d909      	bls.n	8000eb4 <__udivmoddi4+0x1a0>
 8000ea0:	193c      	adds	r4, r7, r4
 8000ea2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000ea6:	f080 809c 	bcs.w	8000fe2 <__udivmoddi4+0x2ce>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f240 8099 	bls.w	8000fe2 <__udivmoddi4+0x2ce>
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	443c      	add	r4, r7
 8000eb4:	eba4 040e 	sub.w	r4, r4, lr
 8000eb8:	fa1f fe83 	uxth.w	lr, r3
 8000ebc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ec0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ec4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ec8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ecc:	45a4      	cmp	ip, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1ce>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000ed6:	f080 8082 	bcs.w	8000fde <__udivmoddi4+0x2ca>
 8000eda:	45a4      	cmp	ip, r4
 8000edc:	d97f      	bls.n	8000fde <__udivmoddi4+0x2ca>
 8000ede:	3b02      	subs	r3, #2
 8000ee0:	443c      	add	r4, r7
 8000ee2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ee6:	eba4 040c 	sub.w	r4, r4, ip
 8000eea:	fba0 ec02 	umull	lr, ip, r0, r2
 8000eee:	4564      	cmp	r4, ip
 8000ef0:	4673      	mov	r3, lr
 8000ef2:	46e1      	mov	r9, ip
 8000ef4:	d362      	bcc.n	8000fbc <__udivmoddi4+0x2a8>
 8000ef6:	d05f      	beq.n	8000fb8 <__udivmoddi4+0x2a4>
 8000ef8:	b15d      	cbz	r5, 8000f12 <__udivmoddi4+0x1fe>
 8000efa:	ebb8 0203 	subs.w	r2, r8, r3
 8000efe:	eb64 0409 	sbc.w	r4, r4, r9
 8000f02:	fa04 f606 	lsl.w	r6, r4, r6
 8000f06:	fa22 f301 	lsr.w	r3, r2, r1
 8000f0a:	431e      	orrs	r6, r3
 8000f0c:	40cc      	lsrs	r4, r1
 8000f0e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f12:	2100      	movs	r1, #0
 8000f14:	e74f      	b.n	8000db6 <__udivmoddi4+0xa2>
 8000f16:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f1a:	0c01      	lsrs	r1, r0, #16
 8000f1c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f20:	b280      	uxth	r0, r0
 8000f22:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f26:	463b      	mov	r3, r7
 8000f28:	4638      	mov	r0, r7
 8000f2a:	463c      	mov	r4, r7
 8000f2c:	46b8      	mov	r8, r7
 8000f2e:	46be      	mov	lr, r7
 8000f30:	2620      	movs	r6, #32
 8000f32:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f36:	eba2 0208 	sub.w	r2, r2, r8
 8000f3a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f3e:	e766      	b.n	8000e0e <__udivmoddi4+0xfa>
 8000f40:	4601      	mov	r1, r0
 8000f42:	e718      	b.n	8000d76 <__udivmoddi4+0x62>
 8000f44:	4610      	mov	r0, r2
 8000f46:	e72c      	b.n	8000da2 <__udivmoddi4+0x8e>
 8000f48:	f1c6 0220 	rsb	r2, r6, #32
 8000f4c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f50:	40b7      	lsls	r7, r6
 8000f52:	40b1      	lsls	r1, r6
 8000f54:	fa20 f202 	lsr.w	r2, r0, r2
 8000f58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f62:	b2bc      	uxth	r4, r7
 8000f64:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f6e:	fb08 f904 	mul.w	r9, r8, r4
 8000f72:	40b0      	lsls	r0, r6
 8000f74:	4589      	cmp	r9, r1
 8000f76:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f7a:	b280      	uxth	r0, r0
 8000f7c:	d93e      	bls.n	8000ffc <__udivmoddi4+0x2e8>
 8000f7e:	1879      	adds	r1, r7, r1
 8000f80:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000f84:	d201      	bcs.n	8000f8a <__udivmoddi4+0x276>
 8000f86:	4589      	cmp	r9, r1
 8000f88:	d81f      	bhi.n	8000fca <__udivmoddi4+0x2b6>
 8000f8a:	eba1 0109 	sub.w	r1, r1, r9
 8000f8e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f92:	fb09 f804 	mul.w	r8, r9, r4
 8000f96:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f9a:	b292      	uxth	r2, r2
 8000f9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fa0:	4542      	cmp	r2, r8
 8000fa2:	d229      	bcs.n	8000ff8 <__udivmoddi4+0x2e4>
 8000fa4:	18ba      	adds	r2, r7, r2
 8000fa6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000faa:	d2c4      	bcs.n	8000f36 <__udivmoddi4+0x222>
 8000fac:	4542      	cmp	r2, r8
 8000fae:	d2c2      	bcs.n	8000f36 <__udivmoddi4+0x222>
 8000fb0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fb4:	443a      	add	r2, r7
 8000fb6:	e7be      	b.n	8000f36 <__udivmoddi4+0x222>
 8000fb8:	45f0      	cmp	r8, lr
 8000fba:	d29d      	bcs.n	8000ef8 <__udivmoddi4+0x1e4>
 8000fbc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fc0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fc4:	3801      	subs	r0, #1
 8000fc6:	46e1      	mov	r9, ip
 8000fc8:	e796      	b.n	8000ef8 <__udivmoddi4+0x1e4>
 8000fca:	eba7 0909 	sub.w	r9, r7, r9
 8000fce:	4449      	add	r1, r9
 8000fd0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fd4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fd8:	fb09 f804 	mul.w	r8, r9, r4
 8000fdc:	e7db      	b.n	8000f96 <__udivmoddi4+0x282>
 8000fde:	4673      	mov	r3, lr
 8000fe0:	e77f      	b.n	8000ee2 <__udivmoddi4+0x1ce>
 8000fe2:	4650      	mov	r0, sl
 8000fe4:	e766      	b.n	8000eb4 <__udivmoddi4+0x1a0>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e6fd      	b.n	8000de6 <__udivmoddi4+0xd2>
 8000fea:	443b      	add	r3, r7
 8000fec:	3a02      	subs	r2, #2
 8000fee:	e733      	b.n	8000e58 <__udivmoddi4+0x144>
 8000ff0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ff4:	443b      	add	r3, r7
 8000ff6:	e71c      	b.n	8000e32 <__udivmoddi4+0x11e>
 8000ff8:	4649      	mov	r1, r9
 8000ffa:	e79c      	b.n	8000f36 <__udivmoddi4+0x222>
 8000ffc:	eba1 0109 	sub.w	r1, r1, r9
 8001000:	46c4      	mov	ip, r8
 8001002:	fbb1 f9fe 	udiv	r9, r1, lr
 8001006:	fb09 f804 	mul.w	r8, r9, r4
 800100a:	e7c4      	b.n	8000f96 <__udivmoddi4+0x282>

0800100c <__aeabi_idiv0>:
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <__gedf2>:
 8001010:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8001014:	e006      	b.n	8001024 <__cmpdf2+0x4>
 8001016:	bf00      	nop

08001018 <__ledf2>:
 8001018:	f04f 0c01 	mov.w	ip, #1
 800101c:	e002      	b.n	8001024 <__cmpdf2+0x4>
 800101e:	bf00      	nop

08001020 <__cmpdf2>:
 8001020:	f04f 0c01 	mov.w	ip, #1
 8001024:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001028:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800102c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001030:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001034:	bf18      	it	ne
 8001036:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800103a:	d01b      	beq.n	8001074 <__cmpdf2+0x54>
 800103c:	b001      	add	sp, #4
 800103e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8001042:	bf0c      	ite	eq
 8001044:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8001048:	ea91 0f03 	teqne	r1, r3
 800104c:	bf02      	ittt	eq
 800104e:	ea90 0f02 	teqeq	r0, r2
 8001052:	2000      	moveq	r0, #0
 8001054:	4770      	bxeq	lr
 8001056:	f110 0f00 	cmn.w	r0, #0
 800105a:	ea91 0f03 	teq	r1, r3
 800105e:	bf58      	it	pl
 8001060:	4299      	cmppl	r1, r3
 8001062:	bf08      	it	eq
 8001064:	4290      	cmpeq	r0, r2
 8001066:	bf2c      	ite	cs
 8001068:	17d8      	asrcs	r0, r3, #31
 800106a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800106e:	f040 0001 	orr.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8001078:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800107c:	d102      	bne.n	8001084 <__cmpdf2+0x64>
 800107e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8001082:	d107      	bne.n	8001094 <__cmpdf2+0x74>
 8001084:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001088:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800108c:	d1d6      	bne.n	800103c <__cmpdf2+0x1c>
 800108e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8001092:	d0d3      	beq.n	800103c <__cmpdf2+0x1c>
 8001094:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop

0800109c <__aeabi_cdrcmple>:
 800109c:	4684      	mov	ip, r0
 800109e:	4610      	mov	r0, r2
 80010a0:	4662      	mov	r2, ip
 80010a2:	468c      	mov	ip, r1
 80010a4:	4619      	mov	r1, r3
 80010a6:	4663      	mov	r3, ip
 80010a8:	e000      	b.n	80010ac <__aeabi_cdcmpeq>
 80010aa:	bf00      	nop

080010ac <__aeabi_cdcmpeq>:
 80010ac:	b501      	push	{r0, lr}
 80010ae:	f7ff ffb7 	bl	8001020 <__cmpdf2>
 80010b2:	2800      	cmp	r0, #0
 80010b4:	bf48      	it	mi
 80010b6:	f110 0f00 	cmnmi.w	r0, #0
 80010ba:	bd01      	pop	{r0, pc}

080010bc <__aeabi_dcmpeq>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff fff4 	bl	80010ac <__aeabi_cdcmpeq>
 80010c4:	bf0c      	ite	eq
 80010c6:	2001      	moveq	r0, #1
 80010c8:	2000      	movne	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_dcmplt>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffea 	bl	80010ac <__aeabi_cdcmpeq>
 80010d8:	bf34      	ite	cc
 80010da:	2001      	movcc	r0, #1
 80010dc:	2000      	movcs	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_dcmple>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff ffe0 	bl	80010ac <__aeabi_cdcmpeq>
 80010ec:	bf94      	ite	ls
 80010ee:	2001      	movls	r0, #1
 80010f0:	2000      	movhi	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_dcmpge>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff ffce 	bl	800109c <__aeabi_cdrcmple>
 8001100:	bf94      	ite	ls
 8001102:	2001      	movls	r0, #1
 8001104:	2000      	movhi	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__aeabi_dcmpgt>:
 800110c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001110:	f7ff ffc4 	bl	800109c <__aeabi_cdrcmple>
 8001114:	bf34      	ite	cc
 8001116:	2001      	movcc	r0, #1
 8001118:	2000      	movcs	r0, #0
 800111a:	f85d fb08 	ldr.w	pc, [sp], #8
 800111e:	bf00      	nop

08001120 <__aeabi_d2uiz>:
 8001120:	004a      	lsls	r2, r1, #1
 8001122:	d211      	bcs.n	8001148 <__aeabi_d2uiz+0x28>
 8001124:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8001128:	d211      	bcs.n	800114e <__aeabi_d2uiz+0x2e>
 800112a:	d50d      	bpl.n	8001148 <__aeabi_d2uiz+0x28>
 800112c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8001130:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001134:	d40e      	bmi.n	8001154 <__aeabi_d2uiz+0x34>
 8001136:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800113a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800113e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001142:	fa23 f002 	lsr.w	r0, r3, r2
 8001146:	4770      	bx	lr
 8001148:	f04f 0000 	mov.w	r0, #0
 800114c:	4770      	bx	lr
 800114e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001152:	d102      	bne.n	800115a <__aeabi_d2uiz+0x3a>
 8001154:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001158:	4770      	bx	lr
 800115a:	f04f 0000 	mov.w	r0, #0
 800115e:	4770      	bx	lr

08001160 <func>:
 *  The CAN message from the Master BMS will be passed into this function and this will delegate how to open/close
 *		message: CAN message
 */

uint64_t func(float x)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	ed87 0a01 	vstr	s0, [r7, #4]
	return (2*x*x + 1);
 800116a:	edd7 7a01 	vldr	s15, [r7, #4]
 800116e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001172:	edd7 7a01 	vldr	s15, [r7, #4]
 8001176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800117a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800117e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001182:	ee17 0a90 	vmov	r0, s15
 8001186:	f7ff fd87 	bl	8000c98 <__aeabi_f2ulz>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
}
 800118e:	4610      	mov	r0, r2
 8001190:	4619      	mov	r1, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <removeNoise>:

int64_t removeNoise()
{
 8001198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800119c:	b09e      	sub	sp, #120	@ 0x78
 800119e:	af00      	add	r7, sp, #0
	int64_t initial_adcCount_y1 = rawValues[0];
 80011a0:	4b6b      	ldr	r3, [pc, #428]	@ (8001350 <removeNoise+0x1b8>)
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	2200      	movs	r2, #0
 80011a8:	4618      	mov	r0, r3
 80011aa:	4611      	mov	r1, r2
 80011ac:	e9c7 011c 	strd	r0, r1, [r7, #112]	@ 0x70

	// our ADC reads the analog value and converts it into a number by multiplying it by 4096 (number of total number values). Now, we want to get the actual current so we divide by 4095 (the total number of combinations (since we start at 0)) and then we multiply by 3.3V since we are measuring 3.3. ADC resolution.
	int64_t voltage_1  = ((initial_adcCount_y1 * 3.3) / 4095);
 80011b0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80011b4:	f7ff f9a2 	bl	80004fc <__aeabi_l2d>
 80011b8:	a35f      	add	r3, pc, #380	@ (adr r3, 8001338 <removeNoise+0x1a0>)
 80011ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011be:	f7ff f9cb 	bl	8000558 <__aeabi_dmul>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	4610      	mov	r0, r2
 80011c8:	4619      	mov	r1, r3
 80011ca:	a35d      	add	r3, pc, #372	@ (adr r3, 8001340 <removeNoise+0x1a8>)
 80011cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d0:	f7ff faec 	bl	80007ac <__aeabi_ddiv>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4610      	mov	r0, r2
 80011da:	4619      	mov	r1, r3
 80011dc:	f7ff fd44 	bl	8000c68 <__aeabi_d2lz>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

	// minus the 2 offset
	int64_t voltaget_with_offset_1 = voltage_1 - 2;
 80011e8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80011ec:	f1b2 0a02 	subs.w	sl, r2, #2
 80011f0:	f143 3bff 	adc.w	fp, r3, #4294967295	@ 0xffffffff
 80011f4:	e9c7 ab18 	strd	sl, fp, [r7, #96]	@ 0x60

	// we have to convert adc voltage to shunt resistor (done through (Vadc)* 0.0025)
	int64_t shunt_resistor_voltage_1 = (voltaget_with_offset_1 * 0.0025);
 80011f8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80011fc:	f7ff f97e 	bl	80004fc <__aeabi_l2d>
 8001200:	a351      	add	r3, pc, #324	@ (adr r3, 8001348 <removeNoise+0x1b0>)
 8001202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001206:	f7ff f9a7 	bl	8000558 <__aeabi_dmul>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	4610      	mov	r0, r2
 8001210:	4619      	mov	r1, r3
 8001212:	f7ff fd29 	bl	8000c68 <__aeabi_d2lz>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

	// get the current
	int64_t current_1 = shunt_resistor_voltage_1 / (precharger.resistance);
 800121e:	4b4d      	ldr	r3, [pc, #308]	@ (8001354 <removeNoise+0x1bc>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	2200      	movs	r2, #0
 8001224:	61bb      	str	r3, [r7, #24]
 8001226:	61fa      	str	r2, [r7, #28]
 8001228:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800122c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001230:	f7ff fcb2 	bl	8000b98 <__aeabi_ldivmod>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50


	HAL_Delay(1); // the clock frequency is 80 MHz. So it waits 1 ticks (1 millisecond)
 800123c:	2001      	movs	r0, #1
 800123e:	f001 f8c7 	bl	80023d0 <HAL_Delay>

	// we're going to sample 2 points very close to each other to bypass noise and make it nominal

	int64_t initial_adcCount_y2 = rawValues[0];
 8001242:	4b43      	ldr	r3, [pc, #268]	@ (8001350 <removeNoise+0x1b8>)
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	b29b      	uxth	r3, r3
 8001248:	2200      	movs	r2, #0
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	60fa      	str	r2, [r7, #12]
 800124e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001252:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48




	// the 3.3 and 4096 are for the ADC resolution
	int64_t voltage_2  = ((initial_adcCount_y2 * 3.3) / 4095);
 8001256:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800125a:	f7ff f94f 	bl	80004fc <__aeabi_l2d>
 800125e:	a336      	add	r3, pc, #216	@ (adr r3, 8001338 <removeNoise+0x1a0>)
 8001260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001264:	f7ff f978 	bl	8000558 <__aeabi_dmul>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4610      	mov	r0, r2
 800126e:	4619      	mov	r1, r3
 8001270:	a333      	add	r3, pc, #204	@ (adr r3, 8001340 <removeNoise+0x1a8>)
 8001272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001276:	f7ff fa99 	bl	80007ac <__aeabi_ddiv>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	4610      	mov	r0, r2
 8001280:	4619      	mov	r1, r3
 8001282:	f7ff fcf1 	bl	8000c68 <__aeabi_d2lz>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

	// minus the 2 offset
	int64_t voltaget_with_offset_2 = voltage_2 - 2;
 800128e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001292:	1e91      	subs	r1, r2, #2
 8001294:	6039      	str	r1, [r7, #0]
 8001296:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012a0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

	// we have to convert adc voltage to shunt resistor (done through (Vadc)* 0.0025)
	int64_t shunt_resistor_voltage_2 = (voltaget_with_offset_2 * 0.0025);
 80012a4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80012a8:	f7ff f928 	bl	80004fc <__aeabi_l2d>
 80012ac:	a326      	add	r3, pc, #152	@ (adr r3, 8001348 <removeNoise+0x1b0>)
 80012ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b2:	f7ff f951 	bl	8000558 <__aeabi_dmul>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4610      	mov	r0, r2
 80012bc:	4619      	mov	r1, r3
 80012be:	f7ff fcd3 	bl	8000c68 <__aeabi_d2lz>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

	// get the current
	int64_t current_2 = shunt_resistor_voltage_2 / (precharger.resistance);
 80012ca:	4b22      	ldr	r3, [pc, #136]	@ (8001354 <removeNoise+0x1bc>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	2200      	movs	r2, #0
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	617a      	str	r2, [r7, #20]
 80012d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012d8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80012dc:	f7ff fc5c 	bl	8000b98 <__aeabi_ldivmod>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28


	// now we take the average of the two
	int64_t avg_current = (current_2 + current_1)/2;
 80012e8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80012ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80012f0:	eb10 0802 	adds.w	r8, r0, r2
 80012f4:	eb41 0903 	adc.w	r9, r1, r3
 80012f8:	f04f 0200 	mov.w	r2, #0
 80012fc:	f04f 0300 	mov.w	r3, #0
 8001300:	ea4f 72d9 	mov.w	r2, r9, lsr #31
 8001304:	2300      	movs	r3, #0
 8001306:	eb12 0408 	adds.w	r4, r2, r8
 800130a:	eb43 0509 	adc.w	r5, r3, r9
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	f04f 0300 	mov.w	r3, #0
 8001316:	0862      	lsrs	r2, r4, #1
 8001318:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 800131c:	106b      	asrs	r3, r5, #1
 800131e:	e9c7 2308 	strd	r2, r3, [r7, #32]

	return avg_current;
 8001322:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
}
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	3778      	adds	r7, #120	@ 0x78
 800132c:	46bd      	mov	sp, r7
 800132e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001332:	bf00      	nop
 8001334:	f3af 8000 	nop.w
 8001338:	66666666 	.word	0x66666666
 800133c:	400a6666 	.word	0x400a6666
 8001340:	00000000 	.word	0x00000000
 8001344:	40affe00 	.word	0x40affe00
 8001348:	47ae147b 	.word	0x47ae147b
 800134c:	3f647ae1 	.word	0x3f647ae1
 8001350:	200001a4 	.word	0x200001a4
 8001354:	200001a8 	.word	0x200001a8

08001358 <Gatekeeper>:
//
//
//}

void Gatekeeper(CAN_Message *message)
{
 8001358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800135c:	b0a0      	sub	sp, #128	@ 0x80
 800135e:	af00      	add	r7, sp, #0
 8001360:	62f8      	str	r0, [r7, #44]	@ 0x2c
	// initialize the variables
	SwitchState WantedState;
	uint8_t TxData[8];

	// get the bit that associates with our contactor (i.e the common contactor will be bit 0)
	uint8_t bitOfInterest = contactor.WhichContactor;
 8001362:	4bca      	ldr	r3, [pc, #808]	@ (800168c <Gatekeeper+0x334>)
 8001364:	8a9b      	ldrh	r3, [r3, #20]
 8001366:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	// create a mask for that specifc bit
	uint8_t mask = 1 << bitOfInterest;
 800136a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800136e:	2201      	movs	r2, #1
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e

	// takes our payload and ANDs it with the mask so we only get the value of our bit of interest, then we shift that bit all the way to the right. If that value is equal to our wanted state (0 for open, 1 for closed), we good
	uint8_t what_MBMS_wants_us_to_be = (message->data[0] & mask) >> bitOfInterest;
 8001378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800137a:	791a      	ldrb	r2, [r3, #4]
 800137c:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8001380:	4013      	ands	r3, r2
 8001382:	b2db      	uxtb	r3, r3
 8001384:	461a      	mov	r2, r3
 8001386:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800138a:	fa42 f303 	asr.w	r3, r2, r3
 800138e:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
	// the MBMS is going to give a message with the wanted states of all the contactors and we got to check if our contactor is in that wanted state, if it's not we try changing it to that state
	if (what_MBMS_wants_us_to_be == contactor.Switch_State){
 8001392:	4bbe      	ldr	r3, [pc, #760]	@ (800168c <Gatekeeper+0x334>)
 8001394:	7bdb      	ldrb	r3, [r3, #15]
 8001396:	f897 207d 	ldrb.w	r2, [r7, #125]	@ 0x7d
 800139a:	429a      	cmp	r2, r3
 800139c:	f000 8171 	beq.w	8001682 <Gatekeeper+0x32a>
	    // that means our current state is what the MBMS wants and we don't need to change it
		return;
	}
	// if we need to change our contactor state
	else{
		WantedState = (SwitchState)what_MBMS_wants_us_to_be;
 80013a0:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80013a4:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
	}

	// switch case between opening or closing
	switch (WantedState){
 80013a8:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 80013ac:	2b04      	cmp	r3, #4
 80013ae:	f200 8169 	bhi.w	8001684 <Gatekeeper+0x32c>
 80013b2:	a201      	add	r2, pc, #4	@ (adr r2, 80013b8 <Gatekeeper+0x60>)
 80013b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b8:	080013cd 	.word	0x080013cd
 80013bc:	0800141d 	.word	0x0800141d
 80013c0:	08001685 	.word	0x08001685
 80013c4:	08001685 	.word	0x08001685
 80013c8:	08001685 	.word	0x08001685
		case OPEN:
			// our switch is not open yet!
			// call the function to open the switch. if it opens it will return true. If it's open, it will return 1, else 0.
// let's first test if we can go from closed state to open state. So to do this, we expect the state the change from current to no current. To do that let's first test if we have a current, no light turns on. If a light turns on, uh-oh. If not, then lets test if the light turns on if we don't have a current flowing through
			changeSwitch(&contactor, contactor.Switch_State, OPEN, contactor.Delay);
 80013cc:	4baf      	ldr	r3, [pc, #700]	@ (800168c <Gatekeeper+0x334>)
 80013ce:	7bd9      	ldrb	r1, [r3, #15]
 80013d0:	4bae      	ldr	r3, [pc, #696]	@ (800168c <Gatekeeper+0x334>)
 80013d2:	8a5b      	ldrh	r3, [r3, #18]
 80013d4:	2200      	movs	r2, #0
 80013d6:	48ad      	ldr	r0, [pc, #692]	@ (800168c <Gatekeeper+0x334>)
 80013d8:	f000 f990 	bl	80016fc <changeSwitch>
			// making the message we are going to send
			// Convert state to uint8_t for CAN message
//			state_byte |= (ContactorOpenState ? 1 : 0);// If true, state_byte = 1; if false, state_byte = 0

			// now we gotta convert them to bytes
			uint32_t state_byte = makingCANMessage();
 80013dc:	f000 fd7c 	bl	8001ed8 <makingCANMessage>
 80013e0:	4603      	mov	r3, r0
 80013e2:	63fb      	str	r3, [r7, #60]	@ 0x3c

			// the payload we're sending
			TxData[0] = (state_byte >> 24) & 0xFF;
 80013e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013e6:	0e1b      	lsrs	r3, r3, #24
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
			TxData[1] = (state_byte >> 16) & 0xFF;
 80013ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013f0:	0c1b      	lsrs	r3, r3, #16
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
			TxData[2] = (state_byte >> 8) & 0xFF;
 80013f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013fa:	0a1b      	lsrs	r3, r3, #8
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
			TxData[3] = state_byte & 0xFF;
 8001402:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001404:	b2db      	uxtb	r3, r3
 8001406:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			// send the message
			 SendingCANMessage(TxData, 4);
 800140a:	f107 0310 	add.w	r3, r7, #16
 800140e:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8001412:	2204      	movs	r2, #4
 8001414:	4618      	mov	r0, r3
 8001416:	f000 f93f 	bl	8001698 <SendingCANMessage>

			// end case
			break;
 800141a:	e133      	b.n	8001684 <Gatekeeper+0x32c>

		case CLOSED:
			// initialize our sending variables
			bool PrechargerState = false;
 800141c:	2300      	movs	r3, #0
 800141e:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
			bool ContactorClosedState = false;
 8001422:	2300      	movs	r3, #0
 8001424:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a

			if (contactor.WhichContactor == (SwitchState)COMMON) {	// the common doesn't have precharging so we're bypassing it
 8001428:	4b98      	ldr	r3, [pc, #608]	@ (800168c <Gatekeeper+0x334>)
 800142a:	8a9b      	ldrh	r3, [r3, #20]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d12a      	bne.n	8001486 <Gatekeeper+0x12e>

						ContactorClosedState = changeSwitch(&contactor, contactor.Switch_State, CLOSED, contactor.Delay);
 8001430:	4b96      	ldr	r3, [pc, #600]	@ (800168c <Gatekeeper+0x334>)
 8001432:	7bd9      	ldrb	r1, [r3, #15]
 8001434:	4b95      	ldr	r3, [pc, #596]	@ (800168c <Gatekeeper+0x334>)
 8001436:	8a5b      	ldrh	r3, [r3, #18]
 8001438:	2201      	movs	r2, #1
 800143a:	4894      	ldr	r0, [pc, #592]	@ (800168c <Gatekeeper+0x334>)
 800143c:	f000 f95e 	bl	80016fc <changeSwitch>
 8001440:	4603      	mov	r3, r0
 8001442:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
						uint32_t state_byte_closed = makingCANMessage();
 8001446:	f000 fd47 	bl	8001ed8 <makingCANMessage>
 800144a:	4603      	mov	r3, r0
 800144c:	643b      	str	r3, [r7, #64]	@ 0x40

						 // the payload we're sending
						TxData[0] = (state_byte_closed >> 24) & 0xFF;
 800144e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001450:	0e1b      	lsrs	r3, r3, #24
 8001452:	b2db      	uxtb	r3, r3
 8001454:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
						TxData[1] = (state_byte_closed >> 16) & 0xFF;
 8001458:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800145a:	0c1b      	lsrs	r3, r3, #16
 800145c:	b2db      	uxtb	r3, r3
 800145e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
						TxData[2] = (state_byte_closed >> 8) & 0xFF;
 8001462:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001464:	0a1b      	lsrs	r3, r3, #8
 8001466:	b2db      	uxtb	r3, r3
 8001468:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
						TxData[3] = state_byte_closed & 0xFF;
 800146c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800146e:	b2db      	uxtb	r3, r3
 8001470:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						// send the message
						SendingCANMessage(TxData, 4);
 8001474:	f107 0310 	add.w	r3, r7, #16
 8001478:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800147c:	2204      	movs	r2, #4
 800147e:	4618      	mov	r0, r3
 8001480:	f000 f90a 	bl	8001698 <SendingCANMessage>
						break; // break out of this state
 8001484:	e0fe      	b.n	8001684 <Gatekeeper+0x32c>

			// NOT COMMON:

			// check if the common is closed
			// create a mask for that specifc bit
			uint8_t mask = 1 << COMMON;
 8001486:	2301      	movs	r3, #1
 8001488:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79

			// takes our payload and ANDs it with the mask so we only get the value of our bit of interest, then we shift that bit all the way to the right. If that value is equal to our wanted state (0 for open, 1 for closed), we good
			uint8_t checkCommonStatus = (message->data[0] & mask) >> COMMON;
 800148c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800148e:	791a      	ldrb	r2, [r3, #4]
 8001490:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8001494:	4013      	ands	r3, r2
 8001496:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

			if (checkCommonStatus != CLOSED){
 800149a:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d022      	beq.n	80014e8 <Gatekeeper+0x190>
				contactor.switchError = true;
 80014a2:	4b7a      	ldr	r3, [pc, #488]	@ (800168c <Gatekeeper+0x334>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	741a      	strb	r2, [r3, #16]
				uint32_t state_byte_closed = makingCANMessage();
 80014a8:	f000 fd16 	bl	8001ed8 <makingCANMessage>
 80014ac:	4603      	mov	r3, r0
 80014ae:	647b      	str	r3, [r7, #68]	@ 0x44

				 // the payload we're sending
				TxData[0] = (state_byte_closed >> 24) & 0xFF;
 80014b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014b2:	0e1b      	lsrs	r3, r3, #24
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
				TxData[1] = (state_byte_closed >> 16) & 0xFF;
 80014ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014bc:	0c1b      	lsrs	r3, r3, #16
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
				TxData[2] = (state_byte_closed >> 8) & 0xFF;
 80014c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014c6:	0a1b      	lsrs	r3, r3, #8
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
				TxData[3] = state_byte_closed & 0xFF;
 80014ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				// send the message
				SendingCANMessage(TxData, 4);
 80014d6:	f107 0310 	add.w	r3, r7, #16
 80014da:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80014de:	2204      	movs	r2, #4
 80014e0:	4618      	mov	r0, r3
 80014e2:	f000 f8d9 	bl	8001698 <SendingCANMessage>
				break; // break out of this state
 80014e6:	e0cd      	b.n	8001684 <Gatekeeper+0x32c>

			// to safely close the switch, we would need to first close the precharger to voltage spike.
//			PrechargerState = changeSwitch(&precharger, precharger.Switch_State, CLOSED, precharger.Delay); **************************************************************************************************************************************************************UNCOMMENT
			// this will return if it's closed or not

			if (PrechargerState){	// precharger is closed
 80014e8:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f000 80a2 	beq.w	8001636 <Gatekeeper+0x2de>
				/*  we need to precharge before trying to close																		*/
				/*  we first take the ADC value from the pin that reads the PRCH_CURRENT_ADC										*/
				/*  from that we need to convert this ADC count into voltage then divide it by (2*Rf) to get the current!			*/
				/*  get the current: 																								*/
				int64_t avg_initial_current_1 = removeNoise();
 80014f2:	f7ff fe51 	bl	8001198 <removeNoise>
 80014f6:	e9c7 011c 	strd	r0, r1, [r7, #112]	@ 0x70
				HAL_Delay(TICKS_BETWEEN_SAMPLING_POINTS); // the clock frequency is 80 MHz. So it waits 'TIME_BETWEEN_SAMPLING_POINTS' number of ticks or milliseconds
 80014fa:	2064      	movs	r0, #100	@ 0x64
 80014fc:	f000 ff68 	bl	80023d0 <HAL_Delay>

				// now we get our second sampling point
				int64_t avg_initial_current_2 = removeNoise();
 8001500:	f7ff fe4a 	bl	8001198 <removeNoise>
 8001504:	e9c7 011a 	strd	r0, r1, [r7, #104]	@ 0x68


				// now we gotta take the differential of the current
				// so we're gonna have time on the x-axis and the y-axis is the current
				float h = 0.000000125 * TICKS_BETWEEN_SAMPLING_POINTS; // we want h to be equal to 1 tick. 1 tick is 0.000125 milliseconds. So 0.000000125 seconds * how every many ticks we do
 8001508:	4b61      	ldr	r3, [pc, #388]	@ (8001690 <Gatekeeper+0x338>)
 800150a:	667b      	str	r3, [r7, #100]	@ 0x64
				float initial_deriv;

				initial_deriv = (func(avg_initial_current_2) - func(avg_initial_current_1))/h;
 800150c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001510:	f7ff fb04 	bl	8000b1c <__aeabi_l2f>
 8001514:	4603      	mov	r3, r0
 8001516:	ee00 3a10 	vmov	s0, r3
 800151a:	f7ff fe21 	bl	8001160 <func>
 800151e:	4604      	mov	r4, r0
 8001520:	460d      	mov	r5, r1
 8001522:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001526:	f7ff faf9 	bl	8000b1c <__aeabi_l2f>
 800152a:	4603      	mov	r3, r0
 800152c:	ee00 3a10 	vmov	s0, r3
 8001530:	f7ff fe16 	bl	8001160 <func>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	1aa1      	subs	r1, r4, r2
 800153a:	60b9      	str	r1, [r7, #8]
 800153c:	eb65 0303 	sbc.w	r3, r5, r3
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001546:	f7ff fae1 	bl	8000b0c <__aeabi_ul2f>
 800154a:	ee06 0a90 	vmov	s13, r0
 800154e:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001552:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001556:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60

				// ok so we got the inital values yay
				// now we gotta wait a sec
//				HAL_Delay(8000*1000); // the clock frequency is 80 MHz. So it does 1 tick every 0.000125 milliseconds. So 8000 ticks is 1 milliseconds. We want to wait 1 seconds so we do (8000 * 1000) to get 1 second (1000 milliseconds = 1 second)
				HAL_Delay(1000); // the clock frequency is 80 MHz. So it does 1 tick every 0.000125 milliseconds. So 8000 ticks is 1 milliseconds. We want to wait 1 seconds so we do (8000 * 1000) to get 1 second (1000 milliseconds = 1 second)
 800155a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800155e:	f000 ff37 	bl	80023d0 <HAL_Delay>

				int64_t avg_latest_current_1 = removeNoise();
 8001562:	f7ff fe19 	bl	8001198 <removeNoise>
 8001566:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58

				HAL_Delay(TICKS_BETWEEN_SAMPLING_POINTS); // the clock frequency is 80 MHz. So it waits 100 ticks
 800156a:	2064      	movs	r0, #100	@ 0x64
 800156c:	f000 ff30 	bl	80023d0 <HAL_Delay>

				int64_t avg_latest_current_2 = removeNoise();
 8001570:	f7ff fe12 	bl	8001198 <removeNoise>
 8001574:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50

				float latest_deriv;
				latest_deriv = (func(avg_latest_current_2) - func(avg_latest_current_1))/h;
 8001578:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800157c:	f7ff face 	bl	8000b1c <__aeabi_l2f>
 8001580:	4603      	mov	r3, r0
 8001582:	ee00 3a10 	vmov	s0, r3
 8001586:	f7ff fdeb 	bl	8001160 <func>
 800158a:	4604      	mov	r4, r0
 800158c:	460d      	mov	r5, r1
 800158e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001592:	f7ff fac3 	bl	8000b1c <__aeabi_l2f>
 8001596:	4603      	mov	r3, r0
 8001598:	ee00 3a10 	vmov	s0, r3
 800159c:	f7ff fde0 	bl	8001160 <func>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	1aa1      	subs	r1, r4, r2
 80015a6:	6039      	str	r1, [r7, #0]
 80015a8:	eb65 0303 	sbc.w	r3, r5, r3
 80015ac:	607b      	str	r3, [r7, #4]
 80015ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015b2:	f7ff faab 	bl	8000b0c <__aeabi_ul2f>
 80015b6:	ee06 0a90 	vmov	s13, r0
 80015ba:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 80015be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015c2:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

				// check if the derivative of the latest - the initial is above a certain threshold value
				if ((latest_deriv - initial_deriv) <= precharger.derivative_threshold){ // if we pass the threshold value
 80015c6:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80015ca:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80015ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015d2:	4b30      	ldr	r3, [pc, #192]	@ (8001694 <Gatekeeper+0x33c>)
 80015d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d6:	ee07 3a90 	vmov	s15, r3
 80015da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e6:	d81b      	bhi.n	8001620 <Gatekeeper+0x2c8>
					// now we gotta check if we pass the threshold for the value (is it close to 0?)
					if ((avg_latest_current_2 - avg_initial_current_1 <= precharger.threshold)){
 80015e8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80015ec:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80015f0:	ebb0 0802 	subs.w	r8, r0, r2
 80015f4:	eb61 0903 	sbc.w	r9, r1, r3
 80015f8:	4b26      	ldr	r3, [pc, #152]	@ (8001694 <Gatekeeper+0x33c>)
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	2200      	movs	r2, #0
 80015fe:	469a      	mov	sl, r3
 8001600:	4693      	mov	fp, r2
 8001602:	45c2      	cmp	sl, r8
 8001604:	eb7b 0309 	sbcs.w	r3, fp, r9
 8001608:	db0a      	blt.n	8001620 <Gatekeeper+0x2c8>
						// yay, it's precharged, let's try closing the contactor:
						ContactorClosedState = changeSwitch(&contactor, contactor.Switch_State, CLOSED, contactor.Delay);
 800160a:	4b20      	ldr	r3, [pc, #128]	@ (800168c <Gatekeeper+0x334>)
 800160c:	7bd9      	ldrb	r1, [r3, #15]
 800160e:	4b1f      	ldr	r3, [pc, #124]	@ (800168c <Gatekeeper+0x334>)
 8001610:	8a5b      	ldrh	r3, [r3, #18]
 8001612:	2201      	movs	r2, #1
 8001614:	481d      	ldr	r0, [pc, #116]	@ (800168c <Gatekeeper+0x334>)
 8001616:	f000 f871 	bl	80016fc <changeSwitch>
 800161a:	4603      	mov	r3, r0
 800161c:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
					}
				}

				PrechargerState = changeSwitch(&precharger, precharger.Switch_State, OPEN, precharger.Delay); // open the precharger no matter what
 8001620:	4b1c      	ldr	r3, [pc, #112]	@ (8001694 <Gatekeeper+0x33c>)
 8001622:	7bd9      	ldrb	r1, [r3, #15]
 8001624:	4b1b      	ldr	r3, [pc, #108]	@ (8001694 <Gatekeeper+0x33c>)
 8001626:	8a5b      	ldrh	r3, [r3, #18]
 8001628:	2200      	movs	r2, #0
 800162a:	481a      	ldr	r0, [pc, #104]	@ (8001694 <Gatekeeper+0x33c>)
 800162c:	f000 f866 	bl	80016fc <changeSwitch>
 8001630:	4603      	mov	r3, r0
 8001632:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
			}

			// open the Precharge Sense On pin
			HAL_GPIO_WritePin(PRECHARGE_Sense_On_Output_GPIO_Port, PRECHARGE_Sense_On_Output_Pin, GPIO_PIN_RESET);
 8001636:	2200      	movs	r2, #0
 8001638:	2180      	movs	r1, #128	@ 0x80
 800163a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800163e:	f001 ffcf 	bl	80035e0 <HAL_GPIO_WritePin>
			// precharger closed but contactor not: 100 001
			// precharger and contactor didn't close: 100 100

			// making the message we are going to send
			// Convert state to uint8_t for CAN message
			uint32_t state_byte_closed = makingCANMessage();
 8001642:	f000 fc49 	bl	8001ed8 <makingCANMessage>
 8001646:	4603      	mov	r3, r0
 8001648:	64bb      	str	r3, [r7, #72]	@ 0x48

			 // the payload we're sending
			TxData[0] = (state_byte_closed >> 24) & 0xFF;
 800164a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800164c:	0e1b      	lsrs	r3, r3, #24
 800164e:	b2db      	uxtb	r3, r3
 8001650:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
			TxData[1] = (state_byte_closed >> 16) & 0xFF;
 8001654:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001656:	0c1b      	lsrs	r3, r3, #16
 8001658:	b2db      	uxtb	r3, r3
 800165a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
			TxData[2] = (state_byte_closed >> 8) & 0xFF;
 800165e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001660:	0a1b      	lsrs	r3, r3, #8
 8001662:	b2db      	uxtb	r3, r3
 8001664:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
			TxData[3] = state_byte_closed & 0xFF;
 8001668:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800166a:	b2db      	uxtb	r3, r3
 800166c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			// send the message
			SendingCANMessage(TxData, 4);
 8001670:	f107 0310 	add.w	r3, r7, #16
 8001674:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8001678:	2204      	movs	r2, #4
 800167a:	4618      	mov	r0, r3
 800167c:	f000 f80c 	bl	8001698 <SendingCANMessage>

			// end case
			break;
 8001680:	e000      	b.n	8001684 <Gatekeeper+0x32c>
		return;
 8001682:	bf00      	nop
		case CONTACTOR_ERROR: // we should never want an error state
			break;
		case BPS_ERROR:
			break;
	}
}
 8001684:	3780      	adds	r7, #128	@ 0x80
 8001686:	46bd      	mov	sp, r7
 8001688:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800168c:	20000000 	.word	0x20000000
 8001690:	3751b717 	.word	0x3751b717
 8001694:	200001a8 	.word	0x200001a8

08001698 <SendingCANMessage>:
//extern SwitchInfo_t precharger;
extern SwitchInfo_t contactor;

//void SendingCANMessage(uint8_t TxData[8], uint8_t DLC_num){
// DEBUGGING BELOW:::: UNCOMMENT THE ABOVE LINE WHERE THE RETURN IS VOID, WE'RE JUST DEBUGGING RN, U CAN DELETE THE 'CAN_TxHeaderTypeDef SendingCANMessage(uint8_t TxData[8], uint8_t DLC_num){'
CAN_TxHeaderTypeDef SendingCANMessage(uint8_t TxData[8], uint8_t DLC_num){
 8001698:	b5b0      	push	{r4, r5, r7, lr}
 800169a:	b08c      	sub	sp, #48	@ 0x30
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	4613      	mov	r3, r2
 80016a4:	71fb      	strb	r3, [r7, #7]
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;

	// making the message we are going to send
	 TxHeader.DLC = DLC_num;
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	62bb      	str	r3, [r7, #40]	@ 0x28
	 TxHeader.ExtId = contactor.extendedID;
 80016aa:	4b12      	ldr	r3, [pc, #72]	@ (80016f4 <SendingCANMessage+0x5c>)
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	61fb      	str	r3, [r7, #28]
	 TxHeader.IDE = CAN_ID_EXT;
 80016b0:	2304      	movs	r3, #4
 80016b2:	623b      	str	r3, [r7, #32]
	 TxHeader.RTR = CAN_RTR_DATA;
 80016b4:	2300      	movs	r3, #0
 80016b6:	627b      	str	r3, [r7, #36]	@ 0x24
	 TxHeader.TransmitGlobalTime = DISABLE;
 80016b8:	2300      	movs	r3, #0
 80016ba:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

//	 // send the message! Otherwise, handle the error
	 if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80016be:	f107 0314 	add.w	r3, r7, #20
 80016c2:	f107 0118 	add.w	r1, r7, #24
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	480b      	ldr	r0, [pc, #44]	@ (80016f8 <SendingCANMessage+0x60>)
 80016ca:	f001 f8ae 	bl	800282a <HAL_CAN_AddTxMessage>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <SendingCANMessage+0x40>
		 Error_Handler();
 80016d4:	f000 fbfa 	bl	8001ecc <Error_Handler>
	 }
	 // DEBUGGING BELOW:::: UNCOMMENT THE ABOVE FUNCTION FOR SENDING THE MESSAGE, WE'RE JUST DEBUGGING RN, U CAN DELETE THE 'return TxHeader;'
	 return TxHeader;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	461d      	mov	r5, r3
 80016dc:	f107 0418 	add.w	r4, r7, #24
 80016e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016e8:	e885 0003 	stmia.w	r5, {r0, r1}

}
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	3730      	adds	r7, #48	@ 0x30
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bdb0      	pop	{r4, r5, r7, pc}
 80016f4:	20000000 	.word	0x20000000
 80016f8:	20000058 	.word	0x20000058

080016fc <changeSwitch>:
 * 		status: did we achieve our wanted state (true) or not (false)
 *
 * 		NOTE: Still need to work on checking if current is actually flowing through the switch or not
 */

bool changeSwitch(SwitchInfo_t* switch_to_change, SwitchState current_state, SwitchState wanted_state, uint32_t delayTime){
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08e      	sub	sp, #56	@ 0x38
 8001700:	af00      	add	r7, sp, #0
 8001702:	6278      	str	r0, [r7, #36]	@ 0x24
 8001704:	61fb      	str	r3, [r7, #28]
 8001706:	460b      	mov	r3, r1
 8001708:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800170c:	4613      	mov	r3, r2
 800170e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	if(wanted_state == CLOSED){
 8001712:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001716:	2b01      	cmp	r3, #1
 8001718:	d12e      	bne.n	8001778 <changeSwitch+0x7c>
		for(int attempts = 0; attempts < MAX_NUM_OF_RETRIES; attempts++){
 800171a:	2300      	movs	r3, #0
 800171c:	637b      	str	r3, [r7, #52]	@ 0x34
 800171e:	e01f      	b.n	8001760 <changeSwitch+0x64>
			// try to change the switch to the wanted state
			SwitchState switch_status = setSwitch(switch_to_change, CLOSED);
 8001720:	2101      	movs	r1, #1
 8001722:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001724:	f000 f876 	bl	8001814 <setSwitch>
 8001728:	4603      	mov	r3, r0
 800172a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			if(switch_status == CLOSED){
 800172e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001732:	2b01      	cmp	r3, #1
 8001734:	d101      	bne.n	800173a <changeSwitch+0x3e>
//				setDebugLED(switch_to_change); // check if the switch is closed or not
				return true;
 8001736:	2301      	movs	r3, #1
 8001738:	e066      	b.n	8001808 <changeSwitch+0x10c>

			} else if(switch_status == CONTACTOR_ERROR){ // try to change the switch to the wanted state
 800173a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800173e:	2b03      	cmp	r3, #3
 8001740:	d108      	bne.n	8001754 <changeSwitch+0x58>
				switch_to_change->switchError = true;
 8001742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001744:	2201      	movs	r2, #1
 8001746:	741a      	strb	r2, [r3, #16]
				setSwitch(switch_to_change, CONTACTOR_ERROR); // if we get an error, open the switch
 8001748:	2103      	movs	r1, #3
 800174a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800174c:	f000 f862 	bl	8001814 <setSwitch>
				return false;
 8001750:	2300      	movs	r3, #0
 8001752:	e059      	b.n	8001808 <changeSwitch+0x10c>
			}
			HAL_Delay(delayTime); // wait for a bit before checking if we achieved our goal
 8001754:	69f8      	ldr	r0, [r7, #28]
 8001756:	f000 fe3b 	bl	80023d0 <HAL_Delay>
		for(int attempts = 0; attempts < MAX_NUM_OF_RETRIES; attempts++){
 800175a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800175c:	3301      	adds	r3, #1
 800175e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001762:	2b04      	cmp	r3, #4
 8001764:	dddc      	ble.n	8001720 <changeSwitch+0x24>

		}
		// this case is reached in case we couldn't close the contactor
		switch_to_change->switchError = true;
 8001766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001768:	2201      	movs	r2, #1
 800176a:	741a      	strb	r2, [r3, #16]
		setSwitch(switch_to_change, CONTACTOR_ERROR); // if we get an error, open the switch
 800176c:	2103      	movs	r1, #3
 800176e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001770:	f000 f850 	bl	8001814 <setSwitch>
		return false;
 8001774:	2300      	movs	r3, #0
 8001776:	e047      	b.n	8001808 <changeSwitch+0x10c>

	} else if (wanted_state == OPEN){
 8001778:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800177c:	2b00      	cmp	r3, #0
 800177e:	d142      	bne.n	8001806 <changeSwitch+0x10a>
		switch(switch_to_change->isContactor){
 8001780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001782:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001786:	2b01      	cmp	r3, #1
 8001788:	d134      	bne.n	80017f4 <changeSwitch+0xf8>
				case true: // Contactor, and we want to open. try inf times, check if gpio input us open
					SwitchState switch_status = setSwitch(switch_to_change, OPEN); // try to open the switch
 800178a:	2100      	movs	r1, #0
 800178c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800178e:	f000 f841 	bl	8001814 <setSwitch>
 8001792:	4603      	mov	r3, r0
 8001794:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
					while(switch_status != OPEN){ // while the switch is not open, keep trying to open it
 8001798:	e023      	b.n	80017e2 <changeSwitch+0xe6>

						// SEND BPS_ERROR MESSAGE IF NOT OPEN

						uint32_t state_byte_closed = makingCANMessage();	// making the message we are going to send
 800179a:	f000 fb9d 	bl	8001ed8 <makingCANMessage>
 800179e:	4603      	mov	r3, r0
 80017a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

						TxData[0] = (state_byte_closed >> 24) & 0xFF;		// the payload we're sending
 80017a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017a4:	0e1b      	lsrs	r3, r3, #24
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	4b19      	ldr	r3, [pc, #100]	@ (8001810 <changeSwitch+0x114>)
 80017aa:	701a      	strb	r2, [r3, #0]
						TxData[1] = (state_byte_closed >> 16) & 0xFF;
 80017ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017ae:	0c1b      	lsrs	r3, r3, #16
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	4b17      	ldr	r3, [pc, #92]	@ (8001810 <changeSwitch+0x114>)
 80017b4:	705a      	strb	r2, [r3, #1]
						TxData[2] = (state_byte_closed >> 8) & 0xFF;
 80017b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017b8:	0a1b      	lsrs	r3, r3, #8
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	4b14      	ldr	r3, [pc, #80]	@ (8001810 <changeSwitch+0x114>)
 80017be:	709a      	strb	r2, [r3, #2]
						TxData[3] = state_byte_closed & 0xFF;
 80017c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	4b12      	ldr	r3, [pc, #72]	@ (8001810 <changeSwitch+0x114>)
 80017c6:	70da      	strb	r2, [r3, #3]

						SendingCANMessage(TxData, 4); 						// send the message
 80017c8:	463b      	mov	r3, r7
 80017ca:	2204      	movs	r2, #4
 80017cc:	4910      	ldr	r1, [pc, #64]	@ (8001810 <changeSwitch+0x114>)
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff ff62 	bl	8001698 <SendingCANMessage>

						switch_status = setSwitch(switch_to_change, OPEN); // try to open the switch
 80017d4:	2100      	movs	r1, #0
 80017d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80017d8:	f000 f81c 	bl	8001814 <setSwitch>
 80017dc:	4603      	mov	r3, r0
 80017de:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
					while(switch_status != OPEN){ // while the switch is not open, keep trying to open it
 80017e2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1d7      	bne.n	800179a <changeSwitch+0x9e>

//						HAL_Delay(delayTime); // wait for a bit before checking if we achieved our goal
					}
					switch_to_change->BPSError = false;
 80017ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ec:	2200      	movs	r2, #0
 80017ee:	745a      	strb	r2, [r3, #17]
					return true;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e009      	b.n	8001808 <changeSwitch+0x10c>

				case false:
					// Precharger, and we want to open. try inf times, check if adc input > 0 (open)
					switch_status = setSwitch(switch_to_change, OPEN); // try to open the switch
 80017f4:	2100      	movs	r1, #0
 80017f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80017f8:	f000 f80c 	bl	8001814 <setSwitch>
 80017fc:	4603      	mov	r3, r0
 80017fe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
					return true;
 8001802:	2301      	movs	r3, #1
 8001804:	e000      	b.n	8001808 <changeSwitch+0x10c>
		}
	}

	// this should never be reached. This return is here just in case
	return false;
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	3738      	adds	r7, #56	@ 0x38
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000190 	.word	0x20000190

08001814 <setSwitch>:
 * 		WantedState = the state we want the switch to be in (open, closed, closing, error)
 *
 * 	Will return	GPIO_PIN_SET or GPIO_PIN_RESET
 */
SwitchState setSwitch(SwitchInfo_t* switch_to_change, SwitchState wanted_state)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	70fb      	strb	r3, [r7, #3]
	switch (wanted_state){
 8001820:	78fb      	ldrb	r3, [r7, #3]
 8001822:	2b03      	cmp	r3, #3
 8001824:	d06e      	beq.n	8001904 <setSwitch+0xf0>
 8001826:	2b03      	cmp	r3, #3
 8001828:	dc79      	bgt.n	800191e <setSwitch+0x10a>
 800182a:	2b00      	cmp	r3, #0
 800182c:	d002      	beq.n	8001834 <setSwitch+0x20>
 800182e:	2b01      	cmp	r3, #1
 8001830:	d02f      	beq.n	8001892 <setSwitch+0x7e>
				return OPEN;
				break;

			default:
				// ???
				break;
 8001832:	e074      	b.n	800191e <setSwitch+0x10a>
				HAL_GPIO_WritePin(switch_to_change->GPIO_Port, switch_to_change->GPIO_Pin, GPIO_PIN_RESET);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6818      	ldr	r0, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	889b      	ldrh	r3, [r3, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	4619      	mov	r1, r3
 8001840:	f001 fece 	bl	80035e0 <HAL_GPIO_WritePin>
				HAL_Delay(switch_to_change->Delay); // wait for a bit before checking if we achieved our goal
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	8a5b      	ldrh	r3, [r3, #18]
 8001848:	4618      	mov	r0, r3
 800184a:	f000 fdc1 	bl	80023d0 <HAL_Delay>
				if(switch_to_change->isContactor == true){ // OPEN-ing Contactor
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001854:	2b00      	cmp	r3, #0
 8001856:	d017      	beq.n	8001888 <setSwitch+0x74>
					if(HAL_GPIO_ReadPin(switch_to_change->GPIO_Port_Sense, switch_to_change->GPIO_Pin_Sense) == 0){
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	899b      	ldrh	r3, [r3, #12]
 8001860:	4619      	mov	r1, r3
 8001862:	4610      	mov	r0, r2
 8001864:	f001 fea4 	bl	80035b0 <HAL_GPIO_ReadPin>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d104      	bne.n	8001878 <setSwitch+0x64>
						switch_to_change->Switch_State = OPEN; // set the switch state to OPEN
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	73da      	strb	r2, [r3, #15]
						return OPEN;
 8001874:	2300      	movs	r3, #0
 8001876:	e054      	b.n	8001922 <setSwitch+0x10e>
						switch_to_change->BPSError = true;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	745a      	strb	r2, [r3, #17]
						switch_to_change->Switch_State = CLOSED; // still closed
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2201      	movs	r2, #1
 8001882:	73da      	strb	r2, [r3, #15]
						return CLOSED;
 8001884:	2301      	movs	r3, #1
 8001886:	e04c      	b.n	8001922 <setSwitch+0x10e>
					switch_to_change->Switch_State = OPEN; // set the switch state to OPEN
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	73da      	strb	r2, [r3, #15]
					return OPEN; // if the switch is open, return open
 800188e:	2300      	movs	r3, #0
 8001890:	e047      	b.n	8001922 <setSwitch+0x10e>
				HAL_GPIO_WritePin(switch_to_change->GPIO_Port, switch_to_change->GPIO_Pin, GPIO_PIN_SET);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6818      	ldr	r0, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	889b      	ldrh	r3, [r3, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	4619      	mov	r1, r3
 800189e:	f001 fe9f 	bl	80035e0 <HAL_GPIO_WritePin>
				if(switch_to_change->isContactor == true){ // CLOSE-ing Contactor, check if GPIO is SET (closed)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d019      	beq.n	80018e0 <setSwitch+0xcc>
					HAL_Delay(switch_to_change->Delay); // wait for a bit before checking if we achieved our goal
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	8a5b      	ldrh	r3, [r3, #18]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f000 fd8d 	bl	80023d0 <HAL_Delay>
					if(HAL_GPIO_ReadPin(switch_to_change->GPIO_Port_Sense, switch_to_change->GPIO_Pin_Sense) == 1){
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689a      	ldr	r2, [r3, #8]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	899b      	ldrh	r3, [r3, #12]
 80018be:	4619      	mov	r1, r3
 80018c0:	4610      	mov	r0, r2
 80018c2:	f001 fe75 	bl	80035b0 <HAL_GPIO_ReadPin>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d104      	bne.n	80018d6 <setSwitch+0xc2>
						switch_to_change->Switch_State = CLOSED; // set the switch state to OPEN
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	73da      	strb	r2, [r3, #15]
						return CLOSED; // if the switch is closed, return closed
 80018d2:	2301      	movs	r3, #1
 80018d4:	e025      	b.n	8001922 <setSwitch+0x10e>
						switch_to_change->Switch_State = CLOSING; // set the switch state to OPEN
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2202      	movs	r2, #2
 80018da:	73da      	strb	r2, [r3, #15]
						return CLOSING; // if the switch is not yet closed, return closing
 80018dc:	2302      	movs	r3, #2
 80018de:	e020      	b.n	8001922 <setSwitch+0x10e>
					if(HAL_GPIO_ReadPin(DIAG_N_Input_GPIO_Port, DIAG_N_Input_Pin) != 0){ // we can read current now
 80018e0:	2140      	movs	r1, #64	@ 0x40
 80018e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018e6:	f001 fe63 	bl	80035b0 <HAL_GPIO_ReadPin>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d004      	beq.n	80018fa <setSwitch+0xe6>
						switch_to_change->Switch_State = CLOSED; // set the switch state to OPEN
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	73da      	strb	r2, [r3, #15]
						return CLOSED; // if the switch is closed, return closed
 80018f6:	2301      	movs	r3, #1
 80018f8:	e013      	b.n	8001922 <setSwitch+0x10e>
						switch_to_change->Switch_State = CLOSING; // set the switch state to OPEN
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2202      	movs	r2, #2
 80018fe:	73da      	strb	r2, [r3, #15]
						return CLOSING; // if the switch is not yet closed, return closing
 8001900:	2302      	movs	r3, #2
 8001902:	e00e      	b.n	8001922 <setSwitch+0x10e>
				HAL_GPIO_WritePin(switch_to_change->GPIO_Port, switch_to_change->GPIO_Pin, GPIO_PIN_RESET);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6818      	ldr	r0, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	889b      	ldrh	r3, [r3, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	4619      	mov	r1, r3
 8001910:	f001 fe66 	bl	80035e0 <HAL_GPIO_WritePin>
				switch_to_change->Switch_State = OPEN; // set the switch state to OPEN
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	73da      	strb	r2, [r3, #15]
				return OPEN;
 800191a:	2300      	movs	r3, #0
 800191c:	e001      	b.n	8001922 <setSwitch+0x10e>
				break;
 800191e:	bf00      	nop

	}

	return CONTACTOR_ERROR; // return open if we fail all the switch statements above. This case should never happen so it's an error!
 8001920:	2303      	movs	r3, #3

}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <checkState>:
		.lineCurrentAmpsPerADCVoltage = 50  // WILL CHANGE BASED ON CONACTOR ** can be 100!!! or 30!!!
	};
SwitchInfo_t precharger;


void checkState(){
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
	// check our contactor
	contactor.Switch_State = HAL_GPIO_ReadPin(contactor.GPIO_Port_Sense, contactor.GPIO_Pin_Sense);
 8001930:	4b19      	ldr	r3, [pc, #100]	@ (8001998 <checkState+0x6c>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4a18      	ldr	r2, [pc, #96]	@ (8001998 <checkState+0x6c>)
 8001936:	8992      	ldrh	r2, [r2, #12]
 8001938:	4611      	mov	r1, r2
 800193a:	4618      	mov	r0, r3
 800193c:	f001 fe38 	bl	80035b0 <HAL_GPIO_ReadPin>
 8001940:	4603      	mov	r3, r0
 8001942:	461a      	mov	r2, r3
 8001944:	4b14      	ldr	r3, [pc, #80]	@ (8001998 <checkState+0x6c>)
 8001946:	73da      	strb	r2, [r3, #15]
	if (contactor.Switch_State == CLOSED){
 8001948:	4b13      	ldr	r3, [pc, #76]	@ (8001998 <checkState+0x6c>)
 800194a:	7bdb      	ldrb	r3, [r3, #15]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d103      	bne.n	8001958 <checkState+0x2c>
		contactor.GPIO_State = GPIO_PIN_SET; // set the pin
 8001950:	4b11      	ldr	r3, [pc, #68]	@ (8001998 <checkState+0x6c>)
 8001952:	2201      	movs	r2, #1
 8001954:	739a      	strb	r2, [r3, #14]
 8001956:	e002      	b.n	800195e <checkState+0x32>
	}else{
		contactor.GPIO_State = GPIO_PIN_RESET; // ensure it's reset
 8001958:	4b0f      	ldr	r3, [pc, #60]	@ (8001998 <checkState+0x6c>)
 800195a:	2200      	movs	r2, #0
 800195c:	739a      	strb	r2, [r3, #14]
	}
	// if we're not common, check the same thing for our contactor
	if (contactor.WhichContactor != COMMON){
 800195e:	4b0e      	ldr	r3, [pc, #56]	@ (8001998 <checkState+0x6c>)
 8001960:	8a9b      	ldrh	r3, [r3, #20]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d016      	beq.n	8001994 <checkState+0x68>
		precharger.Switch_State = HAL_GPIO_ReadPin(precharger.GPIO_Port_Sense, precharger.GPIO_Pin_Sense);
 8001966:	4b0d      	ldr	r3, [pc, #52]	@ (800199c <checkState+0x70>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	4a0c      	ldr	r2, [pc, #48]	@ (800199c <checkState+0x70>)
 800196c:	8992      	ldrh	r2, [r2, #12]
 800196e:	4611      	mov	r1, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f001 fe1d 	bl	80035b0 <HAL_GPIO_ReadPin>
 8001976:	4603      	mov	r3, r0
 8001978:	461a      	mov	r2, r3
 800197a:	4b08      	ldr	r3, [pc, #32]	@ (800199c <checkState+0x70>)
 800197c:	73da      	strb	r2, [r3, #15]

		if (precharger.Switch_State == CLOSED){
 800197e:	4b07      	ldr	r3, [pc, #28]	@ (800199c <checkState+0x70>)
 8001980:	7bdb      	ldrb	r3, [r3, #15]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d103      	bne.n	800198e <checkState+0x62>
			precharger.GPIO_State = GPIO_PIN_SET; // set the pin
 8001986:	4b05      	ldr	r3, [pc, #20]	@ (800199c <checkState+0x70>)
 8001988:	2201      	movs	r2, #1
 800198a:	739a      	strb	r2, [r3, #14]
			precharger.GPIO_State = GPIO_PIN_RESET; // ensure it's reset
		}
	}


}
 800198c:	e002      	b.n	8001994 <checkState+0x68>
			precharger.GPIO_State = GPIO_PIN_RESET; // ensure it's reset
 800198e:	4b03      	ldr	r3, [pc, #12]	@ (800199c <checkState+0x70>)
 8001990:	2200      	movs	r2, #0
 8001992:	739a      	strb	r2, [r3, #14]
}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000000 	.word	0x20000000
 800199c:	200001a8 	.word	0x200001a8

080019a0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b088      	sub	sp, #32
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	61f8      	str	r0, [r7, #28]
  // Callback: timer has reset
  if (htim->Instance == TIM16)
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a28      	ldr	r2, [pc, #160]	@ (8001a50 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d143      	bne.n	8001a3a <HAL_TIM_PeriodElapsedCallback+0x9a>
	  // how do we get resistance to convert voltage to current? V = IR
	  //LED Pin = turn on if contactor closed vice versa

	  // this is sent every 10 milliseconds
	  // add heartbeat!
	  	heartbeat++;
 80019b2:	4b28      	ldr	r3, [pc, #160]	@ (8001a54 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	3301      	adds	r3, #1
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	4b26      	ldr	r3, [pc, #152]	@ (8001a54 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80019bc:	801a      	strh	r2, [r3, #0]
	  	if (heartbeat >= 65535){ // 2^16, changed it from 65536 to 65535
 80019be:	4b25      	ldr	r3, [pc, #148]	@ (8001a54 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80019c0:	881b      	ldrh	r3, [r3, #0]
 80019c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d102      	bne.n	80019d0 <HAL_TIM_PeriodElapsedCallback+0x30>
	  		heartbeat = 0;
 80019ca:	4b22      	ldr	r3, [pc, #136]	@ (8001a54 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	801a      	strh	r2, [r3, #0]
	  	}

	  	// Store the 16-bit heartbeat into two bytes
	  	heartData[0] = (heartbeat >> 8) & 0xFF;  // High byte (bits 8-15)
 80019d0:	4b20      	ldr	r3, [pc, #128]	@ (8001a54 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80019d2:	881b      	ldrh	r3, [r3, #0]
 80019d4:	0a1b      	lsrs	r3, r3, #8
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	4b1f      	ldr	r3, [pc, #124]	@ (8001a58 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80019dc:	701a      	strb	r2, [r3, #0]
	  	heartData[1] = heartbeat & 0xFF;         // Low byte (bits 0-7)
 80019de:	4b1d      	ldr	r3, [pc, #116]	@ (8001a54 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001a58 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80019e6:	705a      	strb	r2, [r3, #1]

	  	// send heartbeat
	  	SendingCANMessage(heartData, 2);
 80019e8:	463b      	mov	r3, r7
 80019ea:	2202      	movs	r2, #2
 80019ec:	491a      	ldr	r1, [pc, #104]	@ (8001a58 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fe52 	bl	8001698 <SendingCANMessage>

		// implement timer interrurpt (enable timer on ioc with new timer)
		// if no message is sent after 65 milliseconds (limit timer 16 can track), it will send a CAN message
		// send a CAN message!
		// we want to send the current state of the contactor and precharger
		state_status = makingCANMessage();
 80019f4:	f000 fa70 	bl	8001ed8 <makingCANMessage>
 80019f8:	4603      	mov	r3, r0
 80019fa:	461a      	mov	r2, r3
 80019fc:	4b17      	ldr	r3, [pc, #92]	@ (8001a5c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80019fe:	601a      	str	r2, [r3, #0]
		// the payload we're sending
		TxData[0] = (state_status >> 24) & 0xFF;
 8001a00:	4b16      	ldr	r3, [pc, #88]	@ (8001a5c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	0e1b      	lsrs	r3, r3, #24
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	4b15      	ldr	r3, [pc, #84]	@ (8001a60 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001a0a:	701a      	strb	r2, [r3, #0]
		TxData[1] = (state_status >> 16) & 0xFF;
 8001a0c:	4b13      	ldr	r3, [pc, #76]	@ (8001a5c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	0c1b      	lsrs	r3, r3, #16
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	4b12      	ldr	r3, [pc, #72]	@ (8001a60 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001a16:	705a      	strb	r2, [r3, #1]
		TxData[2] = (state_status >> 8) & 0xFF;
 8001a18:	4b10      	ldr	r3, [pc, #64]	@ (8001a5c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	0a1b      	lsrs	r3, r3, #8
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	4b0f      	ldr	r3, [pc, #60]	@ (8001a60 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001a22:	709a      	strb	r2, [r3, #2]
		TxData[3] = state_status & 0xFF;
 8001a24:	4b0d      	ldr	r3, [pc, #52]	@ (8001a5c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a60 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001a2c:	70da      	strb	r2, [r3, #3]

		// send the message
		SendingCANMessage(TxData, 4);
 8001a2e:	463b      	mov	r3, r7
 8001a30:	2204      	movs	r2, #4
 8001a32:	490b      	ldr	r1, [pc, #44]	@ (8001a60 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fe2f 	bl	8001698 <SendingCANMessage>
  }
  if (htim->Instance == TIM1) {
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a09      	ldr	r2, [pc, #36]	@ (8001a64 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d101      	bne.n	8001a48 <HAL_TIM_PeriodElapsedCallback+0xa8>
    HAL_IncTick();
 8001a44:	f000 fca4 	bl	8002390 <HAL_IncTick>
  }

}
 8001a48:	bf00      	nop
 8001a4a:	3720      	adds	r7, #32
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40014400 	.word	0x40014400
 8001a54:	200001a0 	.word	0x200001a0
 8001a58:	20000198 	.word	0x20000198
 8001a5c:	2000018c 	.word	0x2000018c
 8001a60:	20000190 	.word	0x20000190
 8001a64:	40012c00 	.word	0x40012c00

08001a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a68:	b5b0      	push	{r4, r5, r7, lr}
 8001a6a:	b09c      	sub	sp, #112	@ 0x70
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a6e:	f000 fc3a 	bl	80022e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a72:	f000 f89b 	bl	8001bac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a76:	f000 f99b 	bl	8001db0 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001a7a:	f000 f8e9 	bl	8001c50 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 8001a7e:	f000 f967 	bl	8001d50 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8001a82:	f000 f93f 	bl	8001d04 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8001a86:	4841      	ldr	r0, [pc, #260]	@ (8001b8c <main+0x124>)
 8001a88:	f000 fe8b 	bl	80027a2 <HAL_CAN_Start>


  uint8_t msg[] = "Received\r\n";
 8001a8c:	4a40      	ldr	r2, [pc, #256]	@ (8001b90 <main+0x128>)
 8001a8e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001a92:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a94:	c303      	stmia	r3!, {r0, r1}
 8001a96:	801a      	strh	r2, [r3, #0]
 8001a98:	3302      	adds	r3, #2
 8001a9a:	0c12      	lsrs	r2, r2, #16
 8001a9c:	701a      	strb	r2, [r3, #0]
  uint8_t msg2[] = "Message Not Received\r\n";
 8001a9e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b94 <main+0x12c>)
 8001aa0:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 8001aa4:	461d      	mov	r5, r3
 8001aa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aaa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001aae:	6020      	str	r0, [r4, #0]
 8001ab0:	3404      	adds	r4, #4
 8001ab2:	8021      	strh	r1, [r4, #0]
 8001ab4:	3402      	adds	r4, #2
 8001ab6:	0c0b      	lsrs	r3, r1, #16
 8001ab8:	7023      	strb	r3, [r4, #0]

  uint32_t testID = 0x101;
 8001aba:	f240 1301 	movw	r3, #257	@ 0x101
 8001abe:	66fb      	str	r3, [r7, #108]	@ 0x6c


  CAN_TxHeaderTypeDef canTxHeader;
	canTxHeader.IDE 	= CAN_ID_EXT;
 8001ac0:	2304      	movs	r3, #4
 8001ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
	canTxHeader.RTR 	= CAN_RTR_DATA;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	canTxHeader.ExtId  	= testID;
 8001ac8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001aca:	637b      	str	r3, [r7, #52]	@ 0x34
	canTxHeader.DLC 	= 8;
 8001acc:	2308      	movs	r3, #8
 8001ace:	643b      	str	r3, [r7, #64]	@ 0x40
  uint8_t counter = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
  uint32_t mailbox;
  if(contactor.WhichContactor != COMMON){
 8001ad6:	4b30      	ldr	r3, [pc, #192]	@ (8001b98 <main+0x130>)
 8001ad8:	8a9b      	ldrh	r3, [r3, #20]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d00e      	beq.n	8001afc <main+0x94>
  	SwitchInfo_t precharger =
 8001ade:	463b      	mov	r3, r7
 8001ae0:	2230      	movs	r2, #48	@ 0x30
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f003 fe4a 	bl	800577e <memset>
 8001aea:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001aee:	603b      	str	r3, [r7, #0]
 8001af0:	2310      	movs	r3, #16
 8001af2:	80bb      	strh	r3, [r7, #4]
 8001af4:	2301      	movs	r3, #1
 8001af6:	623b      	str	r3, [r7, #32]
 8001af8:	2301      	movs	r3, #1
 8001afa:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		// WHEN YOU'RE INTIALIZING CHECK THE STATE!!!!!!!!!
		checkState();
 8001afc:	f7ff ff16 	bl	800192c <checkState>
		//	if (messageFlag == 1){
				received_message.id = rx_header.IDE == CAN_ID_STD ? rx_header.StdId : rx_header.ExtId;
 8001b00:	4b26      	ldr	r3, [pc, #152]	@ (8001b9c <main+0x134>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d102      	bne.n	8001b0e <main+0xa6>
 8001b08:	4b24      	ldr	r3, [pc, #144]	@ (8001b9c <main+0x134>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	e001      	b.n	8001b12 <main+0xaa>
 8001b0e:	4b23      	ldr	r3, [pc, #140]	@ (8001b9c <main+0x134>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	4a23      	ldr	r2, [pc, #140]	@ (8001ba0 <main+0x138>)
 8001b14:	6013      	str	r3, [r2, #0]
				received_message.dlc = rx_header.DLC;
 8001b16:	4b21      	ldr	r3, [pc, #132]	@ (8001b9c <main+0x134>)
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	4b20      	ldr	r3, [pc, #128]	@ (8001ba0 <main+0x138>)
 8001b1e:	731a      	strb	r2, [r3, #12]
				received_message.is_extended = (rx_header.IDE == CAN_ID_EXT);
 8001b20:	4b1e      	ldr	r3, [pc, #120]	@ (8001b9c <main+0x134>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	2b04      	cmp	r3, #4
 8001b26:	bf0c      	ite	eq
 8001b28:	2301      	moveq	r3, #1
 8001b2a:	2300      	movne	r3, #0
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	461a      	mov	r2, r3
 8001b30:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba0 <main+0x138>)
 8001b32:	735a      	strb	r2, [r3, #13]
				received_message.is_rtr = (rx_header.RTR == CAN_RTR_REMOTE);
 8001b34:	4b19      	ldr	r3, [pc, #100]	@ (8001b9c <main+0x134>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	bf0c      	ite	eq
 8001b3c:	2301      	moveq	r3, #1
 8001b3e:	2300      	movne	r3, #0
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	461a      	mov	r2, r3
 8001b44:	4b16      	ldr	r3, [pc, #88]	@ (8001ba0 <main+0x138>)
 8001b46:	739a      	strb	r2, [r3, #14]
		//		memcpy(
				received_message.data[0] = 0b00000000;
 8001b48:	4b15      	ldr	r3, [pc, #84]	@ (8001ba0 <main+0x138>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	711a      	strb	r2, [r3, #4]
				received_message.data[1] = 0b00000000;
 8001b4e:	4b14      	ldr	r3, [pc, #80]	@ (8001ba0 <main+0x138>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	715a      	strb	r2, [r3, #5]
				received_message.data[2] = 0b00000000;
 8001b54:	4b12      	ldr	r3, [pc, #72]	@ (8001ba0 <main+0x138>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	719a      	strb	r2, [r3, #6]
				received_message.data[3] = 0b00000000;
 8001b5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ba0 <main+0x138>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	71da      	strb	r2, [r3, #7]

				HAL_UART_Transmit(&huart2, msg, strlen(msg), HAL_MAX_DELAY);
 8001b60:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe fb33 	bl	80001d0 <strlen>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8001b72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b76:	480b      	ldr	r0, [pc, #44]	@ (8001ba4 <main+0x13c>)
 8001b78:	f003 f930 	bl	8004ddc <HAL_UART_Transmit>
				Gatekeeper(&received_message);
 8001b7c:	4808      	ldr	r0, [pc, #32]	@ (8001ba0 <main+0x138>)
 8001b7e:	f7ff fbeb 	bl	8001358 <Gatekeeper>
				messageFlag = 0;
 8001b82:	4b09      	ldr	r3, [pc, #36]	@ (8001ba8 <main+0x140>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	701a      	strb	r2, [r3, #0]
		checkState();
 8001b88:	e7b8      	b.n	8001afc <main+0x94>
 8001b8a:	bf00      	nop
 8001b8c:	20000058 	.word	0x20000058
 8001b90:	0800580c 	.word	0x0800580c
 8001b94:	08005818 	.word	0x08005818
 8001b98:	20000000 	.word	0x20000000
 8001b9c:	20000154 	.word	0x20000154
 8001ba0:	2000017c 	.word	0x2000017c
 8001ba4:	200000cc 	.word	0x200000cc
 8001ba8:	20000178 	.word	0x20000178

08001bac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b096      	sub	sp, #88	@ 0x58
 8001bb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bb2:	f107 0314 	add.w	r3, r7, #20
 8001bb6:	2244      	movs	r2, #68	@ 0x44
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f003 fddf 	bl	800577e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bc0:	463b      	mov	r3, r7
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	609a      	str	r2, [r3, #8]
 8001bca:	60da      	str	r2, [r3, #12]
 8001bcc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001bce:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001bd2:	f001 fd2b 	bl	800362c <HAL_PWREx_ControlVoltageScaling>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001bdc:	f000 f976 	bl	8001ecc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001be0:	2302      	movs	r3, #2
 8001be2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001be4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001be8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bea:	2310      	movs	r3, #16
 8001bec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001bfa:	230a      	movs	r3, #10
 8001bfc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001bfe:	2307      	movs	r3, #7
 8001c00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c02:	2302      	movs	r3, #2
 8001c04:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c06:	2302      	movs	r3, #2
 8001c08:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c0a:	f107 0314 	add.w	r3, r7, #20
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f001 fd62 	bl	80036d8 <HAL_RCC_OscConfig>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001c1a:	f000 f957 	bl	8001ecc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c1e:	230f      	movs	r3, #15
 8001c20:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c22:	2303      	movs	r3, #3
 8001c24:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c26:	2300      	movs	r3, #0
 8001c28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c32:	463b      	mov	r3, r7
 8001c34:	2104      	movs	r1, #4
 8001c36:	4618      	mov	r0, r3
 8001c38:	f002 f962 	bl	8003f00 <HAL_RCC_ClockConfig>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001c42:	f000 f943 	bl	8001ecc <Error_Handler>
  }
}
 8001c46:	bf00      	nop
 8001c48:	3758      	adds	r7, #88	@ 0x58
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
	...

08001c50 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08a      	sub	sp, #40	@ 0x28
 8001c54:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001c56:	4b29      	ldr	r3, [pc, #164]	@ (8001cfc <MX_CAN1_Init+0xac>)
 8001c58:	4a29      	ldr	r2, [pc, #164]	@ (8001d00 <MX_CAN1_Init+0xb0>)
 8001c5a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001c5c:	4b27      	ldr	r3, [pc, #156]	@ (8001cfc <MX_CAN1_Init+0xac>)
 8001c5e:	2210      	movs	r2, #16
 8001c60:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001c62:	4b26      	ldr	r3, [pc, #152]	@ (8001cfc <MX_CAN1_Init+0xac>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001c68:	4b24      	ldr	r3, [pc, #144]	@ (8001cfc <MX_CAN1_Init+0xac>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 8001c6e:	4b23      	ldr	r3, [pc, #140]	@ (8001cfc <MX_CAN1_Init+0xac>)
 8001c70:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001c74:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001c76:	4b21      	ldr	r3, [pc, #132]	@ (8001cfc <MX_CAN1_Init+0xac>)
 8001c78:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8001c7c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001c7e:	4b1f      	ldr	r3, [pc, #124]	@ (8001cfc <MX_CAN1_Init+0xac>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001c84:	4b1d      	ldr	r3, [pc, #116]	@ (8001cfc <MX_CAN1_Init+0xac>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001c8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cfc <MX_CAN1_Init+0xac>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001c90:	4b1a      	ldr	r3, [pc, #104]	@ (8001cfc <MX_CAN1_Init+0xac>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001c96:	4b19      	ldr	r3, [pc, #100]	@ (8001cfc <MX_CAN1_Init+0xac>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001c9c:	4b17      	ldr	r3, [pc, #92]	@ (8001cfc <MX_CAN1_Init+0xac>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001ca2:	4816      	ldr	r0, [pc, #88]	@ (8001cfc <MX_CAN1_Init+0xac>)
 8001ca4:	f000 fbb8 	bl	8002418 <HAL_CAN_Init>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001cae:	f000 f90d 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef filterConfig_1;
  filterConfig_1.FilterBank = 0;                         // First filter bank
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
  filterConfig_1.FilterMode = CAN_FILTERMODE_IDMASK;     // Mask mode
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61bb      	str	r3, [r7, #24]
  filterConfig_1.FilterScale = CAN_FILTERSCALE_32BIT;    // 32-bit scale
 8001cba:	2301      	movs	r3, #1
 8001cbc:	61fb      	str	r3, [r7, #28]
//  filterConfig_1.FilterIdHigh = 0x0000;				// filter id is the part we want to mask and sets the IDE bit to true so we can acccept extended IDs
  filterConfig_1.FilterIdHigh = (0x101 >> 13) & 0xffff;				// filter id is the part we want to mask and sets the IDE bit to true so we can acccept extended IDs
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	603b      	str	r3, [r7, #0]

  filterConfig_1.FilterIdLow = ((0x101 & 0x1fff) << 3) | (1 << 2);
 8001cc2:	f640 030c 	movw	r3, #2060	@ 0x80c
 8001cc6:	607b      	str	r3, [r7, #4]
  filterConfig_1.FilterMaskIdHigh = 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60bb      	str	r3, [r7, #8]
  filterConfig_1.FilterMaskIdLow = 0;		
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60fb      	str	r3, [r7, #12]
  filterConfig_1.FilterFIFOAssignment = CAN_FILTER_FIFO0; // Put accepted msgs in FIFO 0
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	613b      	str	r3, [r7, #16]
  filterConfig_1.FilterActivation = ENABLE;              // Enable the filter
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	623b      	str	r3, [r7, #32]
  if (HAL_CAN_ConfigFilter(&hcan1, &filterConfig_1) != HAL_OK) {
 8001cd8:	463b      	mov	r3, r7
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4807      	ldr	r0, [pc, #28]	@ (8001cfc <MX_CAN1_Init+0xac>)
 8001cde:	f000 fc96 	bl	800260e <HAL_CAN_ConfigFilter>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_CAN1_Init+0x9c>
	Error_Handler();
 8001ce8:	f000 f8f0 	bl	8001ecc <Error_Handler>
  }

  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001cec:	2102      	movs	r1, #2
 8001cee:	4803      	ldr	r0, [pc, #12]	@ (8001cfc <MX_CAN1_Init+0xac>)
 8001cf0:	f000 ff8d 	bl	8002c0e <HAL_CAN_ActivateNotification>
  /* USER CODE END CAN1_Init 2 */

}
 8001cf4:	bf00      	nop
 8001cf6:	3728      	adds	r7, #40	@ 0x28
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20000058 	.word	0x20000058
 8001d00:	40006400 	.word	0x40006400

08001d04 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001d08:	4b0f      	ldr	r3, [pc, #60]	@ (8001d48 <MX_TIM16_Init+0x44>)
 8001d0a:	4a10      	ldr	r2, [pc, #64]	@ (8001d4c <MX_TIM16_Init+0x48>)
 8001d0c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 39999;
 8001d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d48 <MX_TIM16_Init+0x44>)
 8001d10:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8001d14:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d16:	4b0c      	ldr	r3, [pc, #48]	@ (8001d48 <MX_TIM16_Init+0x44>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 19;
 8001d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d48 <MX_TIM16_Init+0x44>)
 8001d1e:	2213      	movs	r2, #19
 8001d20:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d22:	4b09      	ldr	r3, [pc, #36]	@ (8001d48 <MX_TIM16_Init+0x44>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001d28:	4b07      	ldr	r3, [pc, #28]	@ (8001d48 <MX_TIM16_Init+0x44>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d2e:	4b06      	ldr	r3, [pc, #24]	@ (8001d48 <MX_TIM16_Init+0x44>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001d34:	4804      	ldr	r0, [pc, #16]	@ (8001d48 <MX_TIM16_Init+0x44>)
 8001d36:	f002 fdef 	bl	8004918 <HAL_TIM_Base_Init>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001d40:	f000 f8c4 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001d44:	bf00      	nop
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20000080 	.word	0x20000080
 8001d4c:	40014400 	.word	0x40014400

08001d50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d54:	4b14      	ldr	r3, [pc, #80]	@ (8001da8 <MX_USART2_UART_Init+0x58>)
 8001d56:	4a15      	ldr	r2, [pc, #84]	@ (8001dac <MX_USART2_UART_Init+0x5c>)
 8001d58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d5a:	4b13      	ldr	r3, [pc, #76]	@ (8001da8 <MX_USART2_UART_Init+0x58>)
 8001d5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d62:	4b11      	ldr	r3, [pc, #68]	@ (8001da8 <MX_USART2_UART_Init+0x58>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d68:	4b0f      	ldr	r3, [pc, #60]	@ (8001da8 <MX_USART2_UART_Init+0x58>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001da8 <MX_USART2_UART_Init+0x58>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d74:	4b0c      	ldr	r3, [pc, #48]	@ (8001da8 <MX_USART2_UART_Init+0x58>)
 8001d76:	220c      	movs	r2, #12
 8001d78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001da8 <MX_USART2_UART_Init+0x58>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d80:	4b09      	ldr	r3, [pc, #36]	@ (8001da8 <MX_USART2_UART_Init+0x58>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d86:	4b08      	ldr	r3, [pc, #32]	@ (8001da8 <MX_USART2_UART_Init+0x58>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d8c:	4b06      	ldr	r3, [pc, #24]	@ (8001da8 <MX_USART2_UART_Init+0x58>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d92:	4805      	ldr	r0, [pc, #20]	@ (8001da8 <MX_USART2_UART_Init+0x58>)
 8001d94:	f002 ffd4 	bl	8004d40 <HAL_UART_Init>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d9e:	f000 f895 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	200000cc 	.word	0x200000cc
 8001dac:	40004400 	.word	0x40004400

08001db0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db6:	1d3b      	adds	r3, r7, #4
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc4:	4b18      	ldr	r3, [pc, #96]	@ (8001e28 <MX_GPIO_Init+0x78>)
 8001dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc8:	4a17      	ldr	r2, [pc, #92]	@ (8001e28 <MX_GPIO_Init+0x78>)
 8001dca:	f043 0301 	orr.w	r3, r3, #1
 8001dce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dd0:	4b15      	ldr	r3, [pc, #84]	@ (8001e28 <MX_GPIO_Init+0x78>)
 8001dd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	603b      	str	r3, [r7, #0]
 8001dda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Contactor_Aux_Input_Pin|PRECHARGE_ON_Output_Pin|Contactor_ON_Output_Pin|PRECHARGE_Sense_On_Output_Pin
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f44f 71d9 	mov.w	r1, #434	@ 0x1b2
 8001de2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001de6:	f001 fbfb 	bl	80035e0 <HAL_GPIO_WritePin>
                          |CAN1_Mode_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Contactor_Aux_Input_Pin PRECHARGE_ON_Output_Pin Contactor_ON_Output_Pin PRECHARGE_Sense_On_Output_Pin
                           CAN1_Mode_Pin */
  GPIO_InitStruct.Pin = Contactor_Aux_Input_Pin|PRECHARGE_ON_Output_Pin|Contactor_ON_Output_Pin|PRECHARGE_Sense_On_Output_Pin
 8001dea:	f44f 73d9 	mov.w	r3, #434	@ 0x1b2
 8001dee:	607b      	str	r3, [r7, #4]
                          |CAN1_Mode_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df0:	2301      	movs	r3, #1
 8001df2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfc:	1d3b      	adds	r3, r7, #4
 8001dfe:	4619      	mov	r1, r3
 8001e00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e04:	f001 fa6a 	bl	80032dc <HAL_GPIO_Init>

  /*Configure GPIO pin : DIAG_N_Input_Pin */
  GPIO_InitStruct.Pin = DIAG_N_Input_Pin;
 8001e08:	2340      	movs	r3, #64	@ 0x40
 8001e0a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DIAG_N_Input_GPIO_Port, &GPIO_InitStruct);
 8001e14:	1d3b      	adds	r3, r7, #4
 8001e16:	4619      	mov	r1, r3
 8001e18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e1c:	f001 fa5e 	bl	80032dc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001e20:	bf00      	nop
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40021000 	.word	0x40021000

08001e2c <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, 0, &rx_header, rx_data);
 8001e34:	4b20      	ldr	r3, [pc, #128]	@ (8001eb8 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8001e36:	4a21      	ldr	r2, [pc, #132]	@ (8001ebc <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8001e38:	2100      	movs	r1, #0
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 fdc5 	bl	80029ca <HAL_CAN_GetRxMessage>
	if (rx_header.ExtId == 0x101){
 8001e40:	4b1e      	ldr	r3, [pc, #120]	@ (8001ebc <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f240 1201 	movw	r2, #257	@ 0x101
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d131      	bne.n	8001eb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
	// we need to have it so it does the parsing part here and then set a flag
		// make the message with the data we're going to give to the gatekeeper task:
		received_message.id = rx_header.IDE == CAN_ID_STD ? rx_header.StdId : rx_header.ExtId;
 8001e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ebc <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d102      	bne.n	8001e5a <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
 8001e54:	4b19      	ldr	r3, [pc, #100]	@ (8001ebc <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	e001      	b.n	8001e5e <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
 8001e5a:	4b18      	ldr	r3, [pc, #96]	@ (8001ebc <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	4a18      	ldr	r2, [pc, #96]	@ (8001ec0 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8001e60:	6013      	str	r3, [r2, #0]
		received_message.dlc = rx_header.DLC;
 8001e62:	4b16      	ldr	r3, [pc, #88]	@ (8001ebc <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	4b15      	ldr	r3, [pc, #84]	@ (8001ec0 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8001e6a:	731a      	strb	r2, [r3, #12]
		received_message.is_extended = (rx_header.IDE == CAN_ID_EXT);
 8001e6c:	4b13      	ldr	r3, [pc, #76]	@ (8001ebc <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	2b04      	cmp	r3, #4
 8001e72:	bf0c      	ite	eq
 8001e74:	2301      	moveq	r3, #1
 8001e76:	2300      	movne	r3, #0
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	4b10      	ldr	r3, [pc, #64]	@ (8001ec0 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8001e7e:	735a      	strb	r2, [r3, #13]
		received_message.is_rtr = (rx_header.RTR == CAN_RTR_REMOTE);
 8001e80:	4b0e      	ldr	r3, [pc, #56]	@ (8001ebc <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	bf0c      	ite	eq
 8001e88:	2301      	moveq	r3, #1
 8001e8a:	2300      	movne	r3, #0
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	461a      	mov	r2, r3
 8001e90:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec0 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8001e92:	739a      	strb	r2, [r3, #14]
		memcpy(received_message.data, rx_data, rx_header.DLC);
 8001e94:	4b09      	ldr	r3, [pc, #36]	@ (8001ebc <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4907      	ldr	r1, [pc, #28]	@ (8001eb8 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8001e9c:	4809      	ldr	r0, [pc, #36]	@ (8001ec4 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8001e9e:	f003 fc9b 	bl	80057d8 <memcpy>
		// message data will look like 00000 - 11111, anything outside of that range is rubbish
		if (*received_message.data > -1 && *received_message.data < 32){
 8001ea2:	4b07      	ldr	r3, [pc, #28]	@ (8001ec0 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8001ea4:	791b      	ldrb	r3, [r3, #4]
 8001ea6:	2b1f      	cmp	r3, #31
 8001ea8:	d802      	bhi.n	8001eb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
			//set flag
			messageFlag = 1;
 8001eaa:	4b07      	ldr	r3, [pc, #28]	@ (8001ec8 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	701a      	strb	r2, [r3, #0]

		} // else, we received rubbish data, ignore it
	}
}
 8001eb0:	bf00      	nop
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	20000170 	.word	0x20000170
 8001ebc:	20000154 	.word	0x20000154
 8001ec0:	2000017c 	.word	0x2000017c
 8001ec4:	20000180 	.word	0x20000180
 8001ec8:	20000178 	.word	0x20000178

08001ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed0:	b672      	cpsid	i
}
 8001ed2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ed4:	bf00      	nop
 8001ed6:	e7fd      	b.n	8001ed4 <Error_Handler+0x8>

08001ed8 <makingCANMessage>:
extern volatile uint16_t rawValues[2];
//extern uint16_t raw_current;
//extern uint16_t raw_voltage;

uint32_t makingCANMessage()
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
	uint8_t contactorState;
	uint8_t prechargerError;
	uint8_t contactorError;
	uint8_t bpsError;

	prechargerState = precharger.Switch_State; 	// either 0 = OPEN, 1 = CLOSED, 2 = CLOSING, or 3 = CONTACTOR ERROR
 8001ede:	4b46      	ldr	r3, [pc, #280]	@ (8001ff8 <makingCANMessage+0x120>)
 8001ee0:	7bdb      	ldrb	r3, [r3, #15]
 8001ee2:	72fb      	strb	r3, [r7, #11]
	contactorState = contactor.Switch_State;  	// ditto
 8001ee4:	4b45      	ldr	r3, [pc, #276]	@ (8001ffc <makingCANMessage+0x124>)
 8001ee6:	7bdb      	ldrb	r3, [r3, #15]
 8001ee8:	72bb      	strb	r3, [r7, #10]
//	contactorState = 1;  	// DEBUGGING LINEEEEEE. REMOVE THIS LINE AND UNCOMMENT THE ABOVE LINE WHEN DONE DEBUGGING

	prechargerError = precharger.switchError;	// if the bool is set to 1, there was an error
 8001eea:	4b43      	ldr	r3, [pc, #268]	@ (8001ff8 <makingCANMessage+0x120>)
 8001eec:	7c1b      	ldrb	r3, [r3, #16]
 8001eee:	727b      	strb	r3, [r7, #9]
	contactorError = contactor.switchError;		// ditto
 8001ef0:	4b42      	ldr	r3, [pc, #264]	@ (8001ffc <makingCANMessage+0x124>)
 8001ef2:	7c1b      	ldrb	r3, [r3, #16]
 8001ef4:	723b      	strb	r3, [r7, #8]

	bpsError = contactor.BPSError; // if the bool is set to 1, there was a BPS error, SERIOUS
 8001ef6:	4b41      	ldr	r3, [pc, #260]	@ (8001ffc <makingCANMessage+0x124>)
 8001ef8:	7c5b      	ldrb	r3, [r3, #17]
 8001efa:	71fb      	strb	r3, [r7, #7]

	// now we gotta convert them to bytes
	uint32_t state_status = 0;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]
	if (prechargerState == 0 || prechargerState == 1)
 8001f00:	7afb      	ldrb	r3, [r7, #11]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d002      	beq.n	8001f0c <makingCANMessage+0x34>
 8001f06:	7afb      	ldrb	r3, [r7, #11]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d108      	bne.n	8001f1e <makingCANMessage+0x46>
	{
		state_status = (state_status & 0xFFFFFFFE) | ((prechargerState & 0x1) << 0);  	  	// Bit 0: PrechargerState is open or closed
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f023 0201 	bic.w	r2, r3, #1
 8001f12:	7afb      	ldrb	r3, [r7, #11]
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	e006      	b.n	8001f2c <makingCANMessage+0x54>
	}
	else if (prechargerState == 2)
 8001f1e:	7afb      	ldrb	r3, [r7, #11]
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d103      	bne.n	8001f2c <makingCANMessage+0x54>
	{
		state_status = (state_status & 0xFFFFFFFD) | (0x1 << 1);  	  	// Bit 1: PrechargerState is closing or not
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f043 0302 	orr.w	r3, r3, #2
 8001f2a:	60fb      	str	r3, [r7, #12]
	}

	state_status = (state_status & 0xFFFFFFFB) | ((prechargerError & 0x1) << 2); 			// Bit 2: If the precharger failed to get to the wanted state or not
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f023 0204 	bic.w	r2, r3, #4
 8001f32:	7a7b      	ldrb	r3, [r7, #9]
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	60fb      	str	r3, [r7, #12]

	if (contactorState == 0 || contactorState == 1)
 8001f3e:	7abb      	ldrb	r3, [r7, #10]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d002      	beq.n	8001f4a <makingCANMessage+0x72>
 8001f44:	7abb      	ldrb	r3, [r7, #10]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d109      	bne.n	8001f5e <makingCANMessage+0x86>
	{
		state_status = (state_status & 0xFFFFFFF7) | ((contactorState & 0x1) << 3);  	  	// Bit 3: contactorState is open or closed
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f023 0208 	bic.w	r2, r3, #8
 8001f50:	7abb      	ldrb	r3, [r7, #10]
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	f003 0308 	and.w	r3, r3, #8
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	e006      	b.n	8001f6c <makingCANMessage+0x94>
	}
	else if (contactorState == 2)
 8001f5e:	7abb      	ldrb	r3, [r7, #10]
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d103      	bne.n	8001f6c <makingCANMessage+0x94>
	{
		state_status  = (state_status & 0xFFFFFFEF) | (0x1 << 4);  	  	// Bit 4: contactorState is closing or not
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f043 0310 	orr.w	r3, r3, #16
 8001f6a:	60fb      	str	r3, [r7, #12]
	}

	state_status = (state_status & 0xFFFFFFDF) | ((contactorError & 0x1) << 5); 			// Bit 5: If the contactor failed to get to the wanted state or not
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f023 0220 	bic.w	r2, r3, #32
 8001f72:	7a3b      	ldrb	r3, [r7, #8]
 8001f74:	015b      	lsls	r3, r3, #5
 8001f76:	f003 0320 	and.w	r3, r3, #32
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]

	// adding math to convert line current before sending it out onto the CAN Line
	// need to offset the ADC since to account for negative values (-2 to 2), it was made into 0-4. So now we gotta convert back to -2 to 2. So we minus 2
	rawValues[1] = rawValues[1] - 2;
 8001f7e:	4b20      	ldr	r3, [pc, #128]	@ (8002000 <makingCANMessage+0x128>)
 8001f80:	885b      	ldrh	r3, [r3, #2]
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	3b02      	subs	r3, #2
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	4b1d      	ldr	r3, [pc, #116]	@ (8002000 <makingCANMessage+0x128>)
 8001f8a:	805a      	strh	r2, [r3, #2]
	// now we have to times it by the amps to ADC voltage ratio
	rawValues[1] = rawValues[1] * contactor.lineCurrentAmpsPerADCVoltage;
 8001f8c:	4b1c      	ldr	r3, [pc, #112]	@ (8002000 <makingCANMessage+0x128>)
 8001f8e:	885b      	ldrh	r3, [r3, #2]
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	4b1a      	ldr	r3, [pc, #104]	@ (8001ffc <makingCANMessage+0x124>)
 8001f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	fb12 f303 	smulbb	r3, r2, r3
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	4b18      	ldr	r3, [pc, #96]	@ (8002000 <makingCANMessage+0x128>)
 8001fa0:	805a      	strh	r2, [r3, #2]

	state_status = (state_status & 0xFFFC003F) | ((rawValues[1] & 0xFFF) << 6);				// Bits 6 - 17: the line current
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f423 337f 	bic.w	r3, r3, #261120	@ 0x3fc00
 8001fa8:	f423 7370 	bic.w	r3, r3, #960	@ 0x3c0
 8001fac:	4a14      	ldr	r2, [pc, #80]	@ (8002000 <makingCANMessage+0x128>)
 8001fae:	8852      	ldrh	r2, [r2, #2]
 8001fb0:	b292      	uxth	r2, r2
 8001fb2:	0191      	lsls	r1, r2, #6
 8001fb4:	4a13      	ldr	r2, [pc, #76]	@ (8002004 <makingCANMessage+0x12c>)
 8001fb6:	400a      	ands	r2, r1
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	60fb      	str	r3, [r7, #12]

	state_status = (state_status & 0xC003FFFF) | ((rawValues[0] & 0xFFF) << 18);				// Bits 18 - 30: the charge voltage
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 8001fc2:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 8001fc6:	4a0e      	ldr	r2, [pc, #56]	@ (8002000 <makingCANMessage+0x128>)
 8001fc8:	8812      	ldrh	r2, [r2, #0]
 8001fca:	b292      	uxth	r2, r2
 8001fcc:	0491      	lsls	r1, r2, #18
 8001fce:	4a0e      	ldr	r2, [pc, #56]	@ (8002008 <makingCANMessage+0x130>)
 8001fd0:	400a      	ands	r2, r1
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]

	state_status = (state_status & 0xBFFFFFFF) | ((bpsError & 0x1) << 30); 					// Bit 31: If the contactor failed to open, it's a serious BPS Error
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8001fdc:	79fb      	ldrb	r3, [r7, #7]
 8001fde:	079b      	lsls	r3, r3, #30
 8001fe0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	60fb      	str	r3, [r7, #12]


	return state_status;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	200001a8 	.word	0x200001a8
 8001ffc:	20000000 	.word	0x20000000
 8002000:	200001a4 	.word	0x200001a4
 8002004:	0003ffc0 	.word	0x0003ffc0
 8002008:	3ffc0000 	.word	0x3ffc0000

0800200c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002012:	4b0f      	ldr	r3, [pc, #60]	@ (8002050 <HAL_MspInit+0x44>)
 8002014:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002016:	4a0e      	ldr	r2, [pc, #56]	@ (8002050 <HAL_MspInit+0x44>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	6613      	str	r3, [r2, #96]	@ 0x60
 800201e:	4b0c      	ldr	r3, [pc, #48]	@ (8002050 <HAL_MspInit+0x44>)
 8002020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	607b      	str	r3, [r7, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800202a:	4b09      	ldr	r3, [pc, #36]	@ (8002050 <HAL_MspInit+0x44>)
 800202c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800202e:	4a08      	ldr	r2, [pc, #32]	@ (8002050 <HAL_MspInit+0x44>)
 8002030:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002034:	6593      	str	r3, [r2, #88]	@ 0x58
 8002036:	4b06      	ldr	r3, [pc, #24]	@ (8002050 <HAL_MspInit+0x44>)
 8002038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800203e:	603b      	str	r3, [r7, #0]
 8002040:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	40021000 	.word	0x40021000

08002054 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08a      	sub	sp, #40	@ 0x28
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205c:	f107 0314 	add.w	r3, r7, #20
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a1c      	ldr	r2, [pc, #112]	@ (80020e4 <HAL_CAN_MspInit+0x90>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d131      	bne.n	80020da <HAL_CAN_MspInit+0x86>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002076:	4b1c      	ldr	r3, [pc, #112]	@ (80020e8 <HAL_CAN_MspInit+0x94>)
 8002078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800207a:	4a1b      	ldr	r2, [pc, #108]	@ (80020e8 <HAL_CAN_MspInit+0x94>)
 800207c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002080:	6593      	str	r3, [r2, #88]	@ 0x58
 8002082:	4b19      	ldr	r3, [pc, #100]	@ (80020e8 <HAL_CAN_MspInit+0x94>)
 8002084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002086:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800208e:	4b16      	ldr	r3, [pc, #88]	@ (80020e8 <HAL_CAN_MspInit+0x94>)
 8002090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002092:	4a15      	ldr	r2, [pc, #84]	@ (80020e8 <HAL_CAN_MspInit+0x94>)
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800209a:	4b13      	ldr	r3, [pc, #76]	@ (80020e8 <HAL_CAN_MspInit+0x94>)
 800209c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80020a6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80020aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ac:	2302      	movs	r3, #2
 80020ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b4:	2303      	movs	r3, #3
 80020b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80020b8:	2309      	movs	r3, #9
 80020ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020bc:	f107 0314 	add.w	r3, r7, #20
 80020c0:	4619      	mov	r1, r3
 80020c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020c6:	f001 f909 	bl	80032dc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80020ca:	2200      	movs	r2, #0
 80020cc:	2100      	movs	r1, #0
 80020ce:	2014      	movs	r0, #20
 80020d0:	f001 f8cd 	bl	800326e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80020d4:	2014      	movs	r0, #20
 80020d6:	f001 f8e6 	bl	80032a6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 80020da:	bf00      	nop
 80020dc:	3728      	adds	r7, #40	@ 0x28
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40006400 	.word	0x40006400
 80020e8:	40021000 	.word	0x40021000

080020ec <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002130 <HAL_TIM_Base_MspInit+0x44>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d113      	bne.n	8002126 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM16_MspInit 0 */

    /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80020fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002134 <HAL_TIM_Base_MspInit+0x48>)
 8002100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002102:	4a0c      	ldr	r2, [pc, #48]	@ (8002134 <HAL_TIM_Base_MspInit+0x48>)
 8002104:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002108:	6613      	str	r3, [r2, #96]	@ 0x60
 800210a:	4b0a      	ldr	r3, [pc, #40]	@ (8002134 <HAL_TIM_Base_MspInit+0x48>)
 800210c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800210e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002116:	2200      	movs	r2, #0
 8002118:	2100      	movs	r1, #0
 800211a:	2019      	movs	r0, #25
 800211c:	f001 f8a7 	bl	800326e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002120:	2019      	movs	r0, #25
 8002122:	f001 f8c0 	bl	80032a6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM16_MspInit 1 */

  }

}
 8002126:	bf00      	nop
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40014400 	.word	0x40014400
 8002134:	40021000 	.word	0x40021000

08002138 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b09e      	sub	sp, #120	@ 0x78
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002140:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	60da      	str	r2, [r3, #12]
 800214e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002150:	f107 0310 	add.w	r3, r7, #16
 8002154:	2254      	movs	r2, #84	@ 0x54
 8002156:	2100      	movs	r1, #0
 8002158:	4618      	mov	r0, r3
 800215a:	f003 fb10 	bl	800577e <memset>
  if(huart->Instance==USART2)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a1f      	ldr	r2, [pc, #124]	@ (80021e0 <HAL_UART_MspInit+0xa8>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d136      	bne.n	80021d6 <HAL_UART_MspInit+0x9e>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002168:	2302      	movs	r3, #2
 800216a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800216c:	2300      	movs	r3, #0
 800216e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002170:	f107 0310 	add.w	r3, r7, #16
 8002174:	4618      	mov	r0, r3
 8002176:	f002 f8e7 	bl	8004348 <HAL_RCCEx_PeriphCLKConfig>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002180:	f7ff fea4 	bl	8001ecc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002184:	4b17      	ldr	r3, [pc, #92]	@ (80021e4 <HAL_UART_MspInit+0xac>)
 8002186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002188:	4a16      	ldr	r2, [pc, #88]	@ (80021e4 <HAL_UART_MspInit+0xac>)
 800218a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800218e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002190:	4b14      	ldr	r3, [pc, #80]	@ (80021e4 <HAL_UART_MspInit+0xac>)
 8002192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219c:	4b11      	ldr	r3, [pc, #68]	@ (80021e4 <HAL_UART_MspInit+0xac>)
 800219e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021a0:	4a10      	ldr	r2, [pc, #64]	@ (80021e4 <HAL_UART_MspInit+0xac>)
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021a8:	4b0e      	ldr	r3, [pc, #56]	@ (80021e4 <HAL_UART_MspInit+0xac>)
 80021aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021b4:	230c      	movs	r3, #12
 80021b6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b8:	2302      	movs	r3, #2
 80021ba:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c0:	2303      	movs	r3, #3
 80021c2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021c4:	2307      	movs	r3, #7
 80021c6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80021cc:	4619      	mov	r1, r3
 80021ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021d2:	f001 f883 	bl	80032dc <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80021d6:	bf00      	nop
 80021d8:	3778      	adds	r7, #120	@ 0x78
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40004400 	.word	0x40004400
 80021e4:	40021000 	.word	0x40021000

080021e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021ec:	bf00      	nop
 80021ee:	e7fd      	b.n	80021ec <NMI_Handler+0x4>

080021f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021f4:	bf00      	nop
 80021f6:	e7fd      	b.n	80021f4 <HardFault_Handler+0x4>

080021f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021fc:	bf00      	nop
 80021fe:	e7fd      	b.n	80021fc <MemManage_Handler+0x4>

08002200 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002204:	bf00      	nop
 8002206:	e7fd      	b.n	8002204 <BusFault_Handler+0x4>

08002208 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800220c:	bf00      	nop
 800220e:	e7fd      	b.n	800220c <UsageFault_Handler+0x4>

08002210 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800223e:	f000 f8a7 	bl	8002390 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
	...

08002248 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800224c:	4802      	ldr	r0, [pc, #8]	@ (8002258 <CAN1_RX0_IRQHandler+0x10>)
 800224e:	f000 fd04 	bl	8002c5a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20000058 	.word	0x20000058

0800225c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002260:	4802      	ldr	r0, [pc, #8]	@ (800226c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002262:	f002 fbb0 	bl	80049c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20000080 	.word	0x20000080

08002270 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002274:	4b06      	ldr	r3, [pc, #24]	@ (8002290 <SystemInit+0x20>)
 8002276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800227a:	4a05      	ldr	r2, [pc, #20]	@ (8002290 <SystemInit+0x20>)
 800227c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002280:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002294:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002298:	f7ff ffea 	bl	8002270 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800229c:	480c      	ldr	r0, [pc, #48]	@ (80022d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800229e:	490d      	ldr	r1, [pc, #52]	@ (80022d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022a0:	4a0d      	ldr	r2, [pc, #52]	@ (80022d8 <LoopForever+0xe>)
  movs r3, #0
 80022a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022a4:	e002      	b.n	80022ac <LoopCopyDataInit>

080022a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022aa:	3304      	adds	r3, #4

080022ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022b0:	d3f9      	bcc.n	80022a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022b2:	4a0a      	ldr	r2, [pc, #40]	@ (80022dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80022b4:	4c0a      	ldr	r4, [pc, #40]	@ (80022e0 <LoopForever+0x16>)
  movs r3, #0
 80022b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022b8:	e001      	b.n	80022be <LoopFillZerobss>

080022ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022bc:	3204      	adds	r2, #4

080022be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022c0:	d3fb      	bcc.n	80022ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022c2:	f003 fa65 	bl	8005790 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022c6:	f7ff fbcf 	bl	8001a68 <main>

080022ca <LoopForever>:

LoopForever:
    b LoopForever
 80022ca:	e7fe      	b.n	80022ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80022cc:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80022d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022d4:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 80022d8:	08005888 	.word	0x08005888
  ldr r2, =_sbss
 80022dc:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 80022e0:	200001dc 	.word	0x200001dc

080022e4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022e4:	e7fe      	b.n	80022e4 <ADC1_IRQHandler>

080022e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b082      	sub	sp, #8
 80022ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022ec:	2300      	movs	r3, #0
 80022ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022f0:	2003      	movs	r0, #3
 80022f2:	f000 ffb1 	bl	8003258 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022f6:	200f      	movs	r0, #15
 80022f8:	f000 f80e 	bl	8002318 <HAL_InitTick>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d002      	beq.n	8002308 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	71fb      	strb	r3, [r7, #7]
 8002306:	e001      	b.n	800230c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002308:	f7ff fe80 	bl	800200c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800230c:	79fb      	ldrb	r3, [r7, #7]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
	...

08002318 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002320:	2300      	movs	r3, #0
 8002322:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002324:	4b17      	ldr	r3, [pc, #92]	@ (8002384 <HAL_InitTick+0x6c>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d023      	beq.n	8002374 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800232c:	4b16      	ldr	r3, [pc, #88]	@ (8002388 <HAL_InitTick+0x70>)
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	4b14      	ldr	r3, [pc, #80]	@ (8002384 <HAL_InitTick+0x6c>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	4619      	mov	r1, r3
 8002336:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800233a:	fbb3 f3f1 	udiv	r3, r3, r1
 800233e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002342:	4618      	mov	r0, r3
 8002344:	f000 ffbd 	bl	80032c2 <HAL_SYSTICK_Config>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10f      	bne.n	800236e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b0f      	cmp	r3, #15
 8002352:	d809      	bhi.n	8002368 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002354:	2200      	movs	r2, #0
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800235c:	f000 ff87 	bl	800326e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002360:	4a0a      	ldr	r2, [pc, #40]	@ (800238c <HAL_InitTick+0x74>)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6013      	str	r3, [r2, #0]
 8002366:	e007      	b.n	8002378 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	73fb      	strb	r3, [r7, #15]
 800236c:	e004      	b.n	8002378 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	73fb      	strb	r3, [r7, #15]
 8002372:	e001      	b.n	8002378 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002378:	7bfb      	ldrb	r3, [r7, #15]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000038 	.word	0x20000038
 8002388:	20000030 	.word	0x20000030
 800238c:	20000034 	.word	0x20000034

08002390 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002394:	4b06      	ldr	r3, [pc, #24]	@ (80023b0 <HAL_IncTick+0x20>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	461a      	mov	r2, r3
 800239a:	4b06      	ldr	r3, [pc, #24]	@ (80023b4 <HAL_IncTick+0x24>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4413      	add	r3, r2
 80023a0:	4a04      	ldr	r2, [pc, #16]	@ (80023b4 <HAL_IncTick+0x24>)
 80023a2:	6013      	str	r3, [r2, #0]
}
 80023a4:	bf00      	nop
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	20000038 	.word	0x20000038
 80023b4:	200001d8 	.word	0x200001d8

080023b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  return uwTick;
 80023bc:	4b03      	ldr	r3, [pc, #12]	@ (80023cc <HAL_GetTick+0x14>)
 80023be:	681b      	ldr	r3, [r3, #0]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	200001d8 	.word	0x200001d8

080023d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023d8:	f7ff ffee 	bl	80023b8 <HAL_GetTick>
 80023dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023e8:	d005      	beq.n	80023f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80023ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002414 <HAL_Delay+0x44>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	461a      	mov	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4413      	add	r3, r2
 80023f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023f6:	bf00      	nop
 80023f8:	f7ff ffde 	bl	80023b8 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	429a      	cmp	r2, r3
 8002406:	d8f7      	bhi.n	80023f8 <HAL_Delay+0x28>
  {
  }
}
 8002408:	bf00      	nop
 800240a:	bf00      	nop
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	20000038 	.word	0x20000038

08002418 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e0ed      	b.n	8002606 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d102      	bne.n	800243c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff fe0c 	bl	8002054 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0201 	orr.w	r2, r2, #1
 800244a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800244c:	f7ff ffb4 	bl	80023b8 <HAL_GetTick>
 8002450:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002452:	e012      	b.n	800247a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002454:	f7ff ffb0 	bl	80023b8 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b0a      	cmp	r3, #10
 8002460:	d90b      	bls.n	800247a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002466:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2205      	movs	r2, #5
 8002472:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e0c5      	b.n	8002606 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0e5      	beq.n	8002454 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 0202 	bic.w	r2, r2, #2
 8002496:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002498:	f7ff ff8e 	bl	80023b8 <HAL_GetTick>
 800249c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800249e:	e012      	b.n	80024c6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024a0:	f7ff ff8a 	bl	80023b8 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b0a      	cmp	r3, #10
 80024ac:	d90b      	bls.n	80024c6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2205      	movs	r2, #5
 80024be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e09f      	b.n	8002606 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1e5      	bne.n	80024a0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	7e1b      	ldrb	r3, [r3, #24]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d108      	bne.n	80024ee <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	e007      	b.n	80024fe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	7e5b      	ldrb	r3, [r3, #25]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d108      	bne.n	8002518 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	e007      	b.n	8002528 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002526:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	7e9b      	ldrb	r3, [r3, #26]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d108      	bne.n	8002542 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0220 	orr.w	r2, r2, #32
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	e007      	b.n	8002552 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 0220 	bic.w	r2, r2, #32
 8002550:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	7edb      	ldrb	r3, [r3, #27]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d108      	bne.n	800256c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0210 	bic.w	r2, r2, #16
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	e007      	b.n	800257c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0210 	orr.w	r2, r2, #16
 800257a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	7f1b      	ldrb	r3, [r3, #28]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d108      	bne.n	8002596 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f042 0208 	orr.w	r2, r2, #8
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	e007      	b.n	80025a6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 0208 	bic.w	r2, r2, #8
 80025a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	7f5b      	ldrb	r3, [r3, #29]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d108      	bne.n	80025c0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f042 0204 	orr.w	r2, r2, #4
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	e007      	b.n	80025d0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 0204 	bic.w	r2, r2, #4
 80025ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	431a      	orrs	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	ea42 0103 	orr.w	r1, r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	1e5a      	subs	r2, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800260e:	b480      	push	{r7}
 8002610:	b087      	sub	sp, #28
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
 8002616:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002624:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002626:	7cfb      	ldrb	r3, [r7, #19]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d003      	beq.n	8002634 <HAL_CAN_ConfigFilter+0x26>
 800262c:	7cfb      	ldrb	r3, [r7, #19]
 800262e:	2b02      	cmp	r3, #2
 8002630:	f040 80aa 	bne.w	8002788 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800263a:	f043 0201 	orr.w	r2, r3, #1
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	f003 031f 	and.w	r3, r3, #31
 800264c:	2201      	movs	r2, #1
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	43db      	mvns	r3, r3
 800265e:	401a      	ands	r2, r3
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d123      	bne.n	80026b6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	43db      	mvns	r3, r3
 8002678:	401a      	ands	r2, r3
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002690:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	3248      	adds	r2, #72	@ 0x48
 8002696:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026aa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026ac:	6979      	ldr	r1, [r7, #20]
 80026ae:	3348      	adds	r3, #72	@ 0x48
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	440b      	add	r3, r1
 80026b4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d122      	bne.n	8002704 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	431a      	orrs	r2, r3
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80026de:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	3248      	adds	r2, #72	@ 0x48
 80026e4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026f8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026fa:	6979      	ldr	r1, [r7, #20]
 80026fc:	3348      	adds	r3, #72	@ 0x48
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	440b      	add	r3, r1
 8002702:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d109      	bne.n	8002720 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	43db      	mvns	r3, r3
 8002716:	401a      	ands	r2, r3
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800271e:	e007      	b.n	8002730 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	431a      	orrs	r2, r3
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d109      	bne.n	800274c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	43db      	mvns	r3, r3
 8002742:	401a      	ands	r2, r3
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800274a:	e007      	b.n	800275c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	431a      	orrs	r2, r3
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d107      	bne.n	8002774 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	431a      	orrs	r2, r3
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800277a:	f023 0201 	bic.w	r2, r3, #1
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002784:	2300      	movs	r3, #0
 8002786:	e006      	b.n	8002796 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
  }
}
 8002796:	4618      	mov	r0, r3
 8002798:	371c      	adds	r7, #28
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b084      	sub	sp, #16
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d12e      	bne.n	8002814 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2202      	movs	r2, #2
 80027ba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0201 	bic.w	r2, r2, #1
 80027cc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80027ce:	f7ff fdf3 	bl	80023b8 <HAL_GetTick>
 80027d2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80027d4:	e012      	b.n	80027fc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027d6:	f7ff fdef 	bl	80023b8 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b0a      	cmp	r3, #10
 80027e2:	d90b      	bls.n	80027fc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2205      	movs	r2, #5
 80027f4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e012      	b.n	8002822 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1e5      	bne.n	80027d6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002810:	2300      	movs	r3, #0
 8002812:	e006      	b.n	8002822 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002818:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
  }
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800282a:	b480      	push	{r7}
 800282c:	b089      	sub	sp, #36	@ 0x24
 800282e:	af00      	add	r7, sp, #0
 8002830:	60f8      	str	r0, [r7, #12]
 8002832:	60b9      	str	r1, [r7, #8]
 8002834:	607a      	str	r2, [r7, #4]
 8002836:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800283e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002848:	7ffb      	ldrb	r3, [r7, #31]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d003      	beq.n	8002856 <HAL_CAN_AddTxMessage+0x2c>
 800284e:	7ffb      	ldrb	r3, [r7, #31]
 8002850:	2b02      	cmp	r3, #2
 8002852:	f040 80ad 	bne.w	80029b0 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10a      	bne.n	8002876 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002866:	2b00      	cmp	r3, #0
 8002868:	d105      	bne.n	8002876 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 8095 	beq.w	80029a0 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	0e1b      	lsrs	r3, r3, #24
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002880:	2201      	movs	r2, #1
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	409a      	lsls	r2, r3
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10d      	bne.n	80028ae <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800289c:	68f9      	ldr	r1, [r7, #12]
 800289e:	6809      	ldr	r1, [r1, #0]
 80028a0:	431a      	orrs	r2, r3
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	3318      	adds	r3, #24
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	440b      	add	r3, r1
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	e00f      	b.n	80028ce <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028b8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028be:	68f9      	ldr	r1, [r7, #12]
 80028c0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80028c2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	3318      	adds	r3, #24
 80028c8:	011b      	lsls	r3, r3, #4
 80028ca:	440b      	add	r3, r1
 80028cc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6819      	ldr	r1, [r3, #0]
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	691a      	ldr	r2, [r3, #16]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	3318      	adds	r3, #24
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	440b      	add	r3, r1
 80028de:	3304      	adds	r3, #4
 80028e0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	7d1b      	ldrb	r3, [r3, #20]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d111      	bne.n	800290e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	3318      	adds	r3, #24
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	4413      	add	r3, r2
 80028f6:	3304      	adds	r3, #4
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	6811      	ldr	r1, [r2, #0]
 80028fe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	3318      	adds	r3, #24
 8002906:	011b      	lsls	r3, r3, #4
 8002908:	440b      	add	r3, r1
 800290a:	3304      	adds	r3, #4
 800290c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	3307      	adds	r3, #7
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	061a      	lsls	r2, r3, #24
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	3306      	adds	r3, #6
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	041b      	lsls	r3, r3, #16
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3305      	adds	r3, #5
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	021b      	lsls	r3, r3, #8
 8002928:	4313      	orrs	r3, r2
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	3204      	adds	r2, #4
 800292e:	7812      	ldrb	r2, [r2, #0]
 8002930:	4610      	mov	r0, r2
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	6811      	ldr	r1, [r2, #0]
 8002936:	ea43 0200 	orr.w	r2, r3, r0
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	011b      	lsls	r3, r3, #4
 800293e:	440b      	add	r3, r1
 8002940:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002944:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	3303      	adds	r3, #3
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	061a      	lsls	r2, r3, #24
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3302      	adds	r3, #2
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	041b      	lsls	r3, r3, #16
 8002956:	431a      	orrs	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3301      	adds	r3, #1
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	021b      	lsls	r3, r3, #8
 8002960:	4313      	orrs	r3, r2
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	7812      	ldrb	r2, [r2, #0]
 8002966:	4610      	mov	r0, r2
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	6811      	ldr	r1, [r2, #0]
 800296c:	ea43 0200 	orr.w	r2, r3, r0
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	011b      	lsls	r3, r3, #4
 8002974:	440b      	add	r3, r1
 8002976:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800297a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	3318      	adds	r3, #24
 8002984:	011b      	lsls	r3, r3, #4
 8002986:	4413      	add	r3, r2
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	6811      	ldr	r1, [r2, #0]
 800298e:	f043 0201 	orr.w	r2, r3, #1
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	3318      	adds	r3, #24
 8002996:	011b      	lsls	r3, r3, #4
 8002998:	440b      	add	r3, r1
 800299a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800299c:	2300      	movs	r3, #0
 800299e:	e00e      	b.n	80029be <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e006      	b.n	80029be <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
  }
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3724      	adds	r7, #36	@ 0x24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80029ca:	b480      	push	{r7}
 80029cc:	b087      	sub	sp, #28
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	60f8      	str	r0, [r7, #12]
 80029d2:	60b9      	str	r1, [r7, #8]
 80029d4:	607a      	str	r2, [r7, #4]
 80029d6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029de:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80029e0:	7dfb      	ldrb	r3, [r7, #23]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d003      	beq.n	80029ee <HAL_CAN_GetRxMessage+0x24>
 80029e6:	7dfb      	ldrb	r3, [r7, #23]
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	f040 8103 	bne.w	8002bf4 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10e      	bne.n	8002a12 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d116      	bne.n	8002a30 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a06:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e0f7      	b.n	8002c02 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	f003 0303 	and.w	r3, r3, #3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d107      	bne.n	8002a30 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a24:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e0e8      	b.n	8002c02 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	331b      	adds	r3, #27
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	4413      	add	r3, r2
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0204 	and.w	r2, r3, #4
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10c      	bne.n	8002a68 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	331b      	adds	r3, #27
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	4413      	add	r3, r2
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	0d5b      	lsrs	r3, r3, #21
 8002a5e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	e00b      	b.n	8002a80 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	331b      	adds	r3, #27
 8002a70:	011b      	lsls	r3, r3, #4
 8002a72:	4413      	add	r3, r2
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	08db      	lsrs	r3, r3, #3
 8002a78:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	331b      	adds	r3, #27
 8002a88:	011b      	lsls	r3, r3, #4
 8002a8a:	4413      	add	r3, r2
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0202 	and.w	r2, r3, #2
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	331b      	adds	r3, #27
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3304      	adds	r3, #4
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0308 	and.w	r3, r3, #8
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2208      	movs	r2, #8
 8002ab2:	611a      	str	r2, [r3, #16]
 8002ab4:	e00b      	b.n	8002ace <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	331b      	adds	r3, #27
 8002abe:	011b      	lsls	r3, r3, #4
 8002ac0:	4413      	add	r3, r2
 8002ac2:	3304      	adds	r3, #4
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 020f 	and.w	r2, r3, #15
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	331b      	adds	r3, #27
 8002ad6:	011b      	lsls	r3, r3, #4
 8002ad8:	4413      	add	r3, r2
 8002ada:	3304      	adds	r3, #4
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	0a1b      	lsrs	r3, r3, #8
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	331b      	adds	r3, #27
 8002aee:	011b      	lsls	r3, r3, #4
 8002af0:	4413      	add	r3, r2
 8002af2:	3304      	adds	r3, #4
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	0c1b      	lsrs	r3, r3, #16
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	011b      	lsls	r3, r3, #4
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	4413      	add	r3, r2
 8002b1e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	0a1a      	lsrs	r2, r3, #8
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	011b      	lsls	r3, r3, #4
 8002b36:	4413      	add	r3, r2
 8002b38:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	0c1a      	lsrs	r2, r3, #16
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	3302      	adds	r3, #2
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	011b      	lsls	r3, r3, #4
 8002b50:	4413      	add	r3, r2
 8002b52:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	0e1a      	lsrs	r2, r3, #24
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	3303      	adds	r3, #3
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	011b      	lsls	r3, r3, #4
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	3304      	adds	r3, #4
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	011b      	lsls	r3, r3, #4
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	0a1a      	lsrs	r2, r3, #8
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	3305      	adds	r3, #5
 8002b90:	b2d2      	uxtb	r2, r2
 8002b92:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	0c1a      	lsrs	r2, r3, #16
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	3306      	adds	r3, #6
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	0e1a      	lsrs	r2, r3, #24
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	3307      	adds	r3, #7
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d108      	bne.n	8002be0 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68da      	ldr	r2, [r3, #12]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f042 0220 	orr.w	r2, r2, #32
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	e007      	b.n	8002bf0 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	691a      	ldr	r2, [r3, #16]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0220 	orr.w	r2, r2, #32
 8002bee:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	e006      	b.n	8002c02 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
  }
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	371c      	adds	r7, #28
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b085      	sub	sp, #20
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c1e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c20:	7bfb      	ldrb	r3, [r7, #15]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d002      	beq.n	8002c2c <HAL_CAN_ActivateNotification+0x1e>
 8002c26:	7bfb      	ldrb	r3, [r7, #15]
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d109      	bne.n	8002c40 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6959      	ldr	r1, [r3, #20]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	e006      	b.n	8002c4e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c44:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
  }
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b08a      	sub	sp, #40	@ 0x28
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002c62:	2300      	movs	r3, #0
 8002c64:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d07c      	beq.n	8002d9a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d023      	beq.n	8002cf2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 f983 	bl	8002fc8 <HAL_CAN_TxMailbox0CompleteCallback>
 8002cc2:	e016      	b.n	8002cf2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	f003 0304 	and.w	r3, r3, #4
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d004      	beq.n	8002cd8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002cd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cd6:	e00c      	b.n	8002cf2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d004      	beq.n	8002cec <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ce8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cea:	e002      	b.n	8002cf2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 f989 	bl	8003004 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d024      	beq.n	8002d46 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d04:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d003      	beq.n	8002d18 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 f963 	bl	8002fdc <HAL_CAN_TxMailbox1CompleteCallback>
 8002d16:	e016      	b.n	8002d46 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d004      	beq.n	8002d2c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d24:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d28:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d2a:	e00c      	b.n	8002d46 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d004      	beq.n	8002d40 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d3e:	e002      	b.n	8002d46 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f969 	bl	8003018 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d024      	beq.n	8002d9a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002d58:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f943 	bl	8002ff0 <HAL_CAN_TxMailbox2CompleteCallback>
 8002d6a:	e016      	b.n	8002d9a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d004      	beq.n	8002d80 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d7e:	e00c      	b.n	8002d9a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d004      	beq.n	8002d94 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d90:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d92:	e002      	b.n	8002d9a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 f949 	bl	800302c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	f003 0308 	and.w	r3, r3, #8
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00c      	beq.n	8002dbe <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	f003 0310 	and.w	r3, r3, #16
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d007      	beq.n	8002dbe <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002db4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2210      	movs	r2, #16
 8002dbc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002dbe:	6a3b      	ldr	r3, [r7, #32]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00b      	beq.n	8002de0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d006      	beq.n	8002de0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2208      	movs	r2, #8
 8002dd8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f930 	bl	8003040 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002de0:	6a3b      	ldr	r3, [r7, #32]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d009      	beq.n	8002dfe <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f003 0303 	and.w	r3, r3, #3
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d002      	beq.n	8002dfe <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f7ff f817 	bl	8001e2c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00c      	beq.n	8002e22 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	f003 0310 	and.w	r3, r3, #16
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d007      	beq.n	8002e22 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e14:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e18:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2210      	movs	r2, #16
 8002e20:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002e22:	6a3b      	ldr	r3, [r7, #32]
 8002e24:	f003 0320 	and.w	r3, r3, #32
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00b      	beq.n	8002e44 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	f003 0308 	and.w	r3, r3, #8
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d006      	beq.n	8002e44 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2208      	movs	r2, #8
 8002e3c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f912 	bl	8003068 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002e44:	6a3b      	ldr	r3, [r7, #32]
 8002e46:	f003 0310 	and.w	r3, r3, #16
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d009      	beq.n	8002e62 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	f003 0303 	and.w	r3, r3, #3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d002      	beq.n	8002e62 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 f8f9 	bl	8003054 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00b      	beq.n	8002e84 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	f003 0310 	and.w	r3, r3, #16
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d006      	beq.n	8002e84 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2210      	movs	r2, #16
 8002e7c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f8fc 	bl	800307c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00b      	beq.n	8002ea6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	f003 0308 	and.w	r3, r3, #8
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d006      	beq.n	8002ea6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2208      	movs	r2, #8
 8002e9e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 f8f5 	bl	8003090 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d07b      	beq.n	8002fa8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	f003 0304 	and.w	r3, r3, #4
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d072      	beq.n	8002fa0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d008      	beq.n	8002ed6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed0:	f043 0301 	orr.w	r3, r3, #1
 8002ed4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002ed6:	6a3b      	ldr	r3, [r7, #32]
 8002ed8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d008      	beq.n	8002ef2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eec:	f043 0302 	orr.w	r3, r3, #2
 8002ef0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d008      	beq.n	8002f0e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f08:	f043 0304 	orr.w	r3, r3, #4
 8002f0c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d043      	beq.n	8002fa0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d03e      	beq.n	8002fa0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f28:	2b60      	cmp	r3, #96	@ 0x60
 8002f2a:	d02b      	beq.n	8002f84 <HAL_CAN_IRQHandler+0x32a>
 8002f2c:	2b60      	cmp	r3, #96	@ 0x60
 8002f2e:	d82e      	bhi.n	8002f8e <HAL_CAN_IRQHandler+0x334>
 8002f30:	2b50      	cmp	r3, #80	@ 0x50
 8002f32:	d022      	beq.n	8002f7a <HAL_CAN_IRQHandler+0x320>
 8002f34:	2b50      	cmp	r3, #80	@ 0x50
 8002f36:	d82a      	bhi.n	8002f8e <HAL_CAN_IRQHandler+0x334>
 8002f38:	2b40      	cmp	r3, #64	@ 0x40
 8002f3a:	d019      	beq.n	8002f70 <HAL_CAN_IRQHandler+0x316>
 8002f3c:	2b40      	cmp	r3, #64	@ 0x40
 8002f3e:	d826      	bhi.n	8002f8e <HAL_CAN_IRQHandler+0x334>
 8002f40:	2b30      	cmp	r3, #48	@ 0x30
 8002f42:	d010      	beq.n	8002f66 <HAL_CAN_IRQHandler+0x30c>
 8002f44:	2b30      	cmp	r3, #48	@ 0x30
 8002f46:	d822      	bhi.n	8002f8e <HAL_CAN_IRQHandler+0x334>
 8002f48:	2b10      	cmp	r3, #16
 8002f4a:	d002      	beq.n	8002f52 <HAL_CAN_IRQHandler+0x2f8>
 8002f4c:	2b20      	cmp	r3, #32
 8002f4e:	d005      	beq.n	8002f5c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002f50:	e01d      	b.n	8002f8e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f54:	f043 0308 	orr.w	r3, r3, #8
 8002f58:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f5a:	e019      	b.n	8002f90 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5e:	f043 0310 	orr.w	r3, r3, #16
 8002f62:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f64:	e014      	b.n	8002f90 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f68:	f043 0320 	orr.w	r3, r3, #32
 8002f6c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f6e:	e00f      	b.n	8002f90 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f76:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f78:	e00a      	b.n	8002f90 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f80:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f82:	e005      	b.n	8002f90 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f8a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f8c:	e000      	b.n	8002f90 <HAL_CAN_IRQHandler+0x336>
            break;
 8002f8e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	699a      	ldr	r2, [r3, #24]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002f9e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2204      	movs	r2, #4
 8002fa6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d008      	beq.n	8002fc0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f872 	bl	80030a4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002fc0:	bf00      	nop
 8002fc2:	3728      	adds	r7, #40	@ 0x28
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030c8:	4b0c      	ldr	r3, [pc, #48]	@ (80030fc <__NVIC_SetPriorityGrouping+0x44>)
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030d4:	4013      	ands	r3, r2
 80030d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ea:	4a04      	ldr	r2, [pc, #16]	@ (80030fc <__NVIC_SetPriorityGrouping+0x44>)
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	60d3      	str	r3, [r2, #12]
}
 80030f0:	bf00      	nop
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	e000ed00 	.word	0xe000ed00

08003100 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003104:	4b04      	ldr	r3, [pc, #16]	@ (8003118 <__NVIC_GetPriorityGrouping+0x18>)
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	0a1b      	lsrs	r3, r3, #8
 800310a:	f003 0307 	and.w	r3, r3, #7
}
 800310e:	4618      	mov	r0, r3
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	e000ed00 	.word	0xe000ed00

0800311c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	4603      	mov	r3, r0
 8003124:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312a:	2b00      	cmp	r3, #0
 800312c:	db0b      	blt.n	8003146 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800312e:	79fb      	ldrb	r3, [r7, #7]
 8003130:	f003 021f 	and.w	r2, r3, #31
 8003134:	4907      	ldr	r1, [pc, #28]	@ (8003154 <__NVIC_EnableIRQ+0x38>)
 8003136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313a:	095b      	lsrs	r3, r3, #5
 800313c:	2001      	movs	r0, #1
 800313e:	fa00 f202 	lsl.w	r2, r0, r2
 8003142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	e000e100 	.word	0xe000e100

08003158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	6039      	str	r1, [r7, #0]
 8003162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003168:	2b00      	cmp	r3, #0
 800316a:	db0a      	blt.n	8003182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	b2da      	uxtb	r2, r3
 8003170:	490c      	ldr	r1, [pc, #48]	@ (80031a4 <__NVIC_SetPriority+0x4c>)
 8003172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003176:	0112      	lsls	r2, r2, #4
 8003178:	b2d2      	uxtb	r2, r2
 800317a:	440b      	add	r3, r1
 800317c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003180:	e00a      	b.n	8003198 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	b2da      	uxtb	r2, r3
 8003186:	4908      	ldr	r1, [pc, #32]	@ (80031a8 <__NVIC_SetPriority+0x50>)
 8003188:	79fb      	ldrb	r3, [r7, #7]
 800318a:	f003 030f 	and.w	r3, r3, #15
 800318e:	3b04      	subs	r3, #4
 8003190:	0112      	lsls	r2, r2, #4
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	440b      	add	r3, r1
 8003196:	761a      	strb	r2, [r3, #24]
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	e000e100 	.word	0xe000e100
 80031a8:	e000ed00 	.word	0xe000ed00

080031ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b089      	sub	sp, #36	@ 0x24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	f1c3 0307 	rsb	r3, r3, #7
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	bf28      	it	cs
 80031ca:	2304      	movcs	r3, #4
 80031cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	3304      	adds	r3, #4
 80031d2:	2b06      	cmp	r3, #6
 80031d4:	d902      	bls.n	80031dc <NVIC_EncodePriority+0x30>
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	3b03      	subs	r3, #3
 80031da:	e000      	b.n	80031de <NVIC_EncodePriority+0x32>
 80031dc:	2300      	movs	r3, #0
 80031de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	43da      	mvns	r2, r3
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	401a      	ands	r2, r3
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031f4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	fa01 f303 	lsl.w	r3, r1, r3
 80031fe:	43d9      	mvns	r1, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003204:	4313      	orrs	r3, r2
         );
}
 8003206:	4618      	mov	r0, r3
 8003208:	3724      	adds	r7, #36	@ 0x24
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
	...

08003214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3b01      	subs	r3, #1
 8003220:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003224:	d301      	bcc.n	800322a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003226:	2301      	movs	r3, #1
 8003228:	e00f      	b.n	800324a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800322a:	4a0a      	ldr	r2, [pc, #40]	@ (8003254 <SysTick_Config+0x40>)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3b01      	subs	r3, #1
 8003230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003232:	210f      	movs	r1, #15
 8003234:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003238:	f7ff ff8e 	bl	8003158 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800323c:	4b05      	ldr	r3, [pc, #20]	@ (8003254 <SysTick_Config+0x40>)
 800323e:	2200      	movs	r2, #0
 8003240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003242:	4b04      	ldr	r3, [pc, #16]	@ (8003254 <SysTick_Config+0x40>)
 8003244:	2207      	movs	r2, #7
 8003246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	e000e010 	.word	0xe000e010

08003258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f7ff ff29 	bl	80030b8 <__NVIC_SetPriorityGrouping>
}
 8003266:	bf00      	nop
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b086      	sub	sp, #24
 8003272:	af00      	add	r7, sp, #0
 8003274:	4603      	mov	r3, r0
 8003276:	60b9      	str	r1, [r7, #8]
 8003278:	607a      	str	r2, [r7, #4]
 800327a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800327c:	2300      	movs	r3, #0
 800327e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003280:	f7ff ff3e 	bl	8003100 <__NVIC_GetPriorityGrouping>
 8003284:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	68b9      	ldr	r1, [r7, #8]
 800328a:	6978      	ldr	r0, [r7, #20]
 800328c:	f7ff ff8e 	bl	80031ac <NVIC_EncodePriority>
 8003290:	4602      	mov	r2, r0
 8003292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003296:	4611      	mov	r1, r2
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff ff5d 	bl	8003158 <__NVIC_SetPriority>
}
 800329e:	bf00      	nop
 80032a0:	3718      	adds	r7, #24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b082      	sub	sp, #8
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	4603      	mov	r3, r0
 80032ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff ff31 	bl	800311c <__NVIC_EnableIRQ>
}
 80032ba:	bf00      	nop
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b082      	sub	sp, #8
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7ff ffa2 	bl	8003214 <SysTick_Config>
 80032d0:	4603      	mov	r3, r0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
	...

080032dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032dc:	b480      	push	{r7}
 80032de:	b087      	sub	sp, #28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032e6:	2300      	movs	r3, #0
 80032e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032ea:	e148      	b.n	800357e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	2101      	movs	r1, #1
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	fa01 f303 	lsl.w	r3, r1, r3
 80032f8:	4013      	ands	r3, r2
 80032fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 813a 	beq.w	8003578 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f003 0303 	and.w	r3, r3, #3
 800330c:	2b01      	cmp	r3, #1
 800330e:	d005      	beq.n	800331c <HAL_GPIO_Init+0x40>
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 0303 	and.w	r3, r3, #3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d130      	bne.n	800337e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	2203      	movs	r2, #3
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	43db      	mvns	r3, r3
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	4013      	ands	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	68da      	ldr	r2, [r3, #12]
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4313      	orrs	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003352:	2201      	movs	r2, #1
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	43db      	mvns	r3, r3
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	4013      	ands	r3, r2
 8003360:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	091b      	lsrs	r3, r3, #4
 8003368:	f003 0201 	and.w	r2, r3, #1
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	4313      	orrs	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	2b03      	cmp	r3, #3
 8003388:	d017      	beq.n	80033ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	2203      	movs	r2, #3
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	43db      	mvns	r3, r3
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	4013      	ands	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	689a      	ldr	r2, [r3, #8]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d123      	bne.n	800340e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	08da      	lsrs	r2, r3, #3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	3208      	adds	r2, #8
 80033ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f003 0307 	and.w	r3, r3, #7
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	220f      	movs	r2, #15
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	43db      	mvns	r3, r3
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	4013      	ands	r3, r2
 80033e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	691a      	ldr	r2, [r3, #16]
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	08da      	lsrs	r2, r3, #3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3208      	adds	r2, #8
 8003408:	6939      	ldr	r1, [r7, #16]
 800340a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	2203      	movs	r2, #3
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43db      	mvns	r3, r3
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4013      	ands	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f003 0203 	and.w	r2, r3, #3
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800344a:	2b00      	cmp	r3, #0
 800344c:	f000 8094 	beq.w	8003578 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003450:	4b52      	ldr	r3, [pc, #328]	@ (800359c <HAL_GPIO_Init+0x2c0>)
 8003452:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003454:	4a51      	ldr	r2, [pc, #324]	@ (800359c <HAL_GPIO_Init+0x2c0>)
 8003456:	f043 0301 	orr.w	r3, r3, #1
 800345a:	6613      	str	r3, [r2, #96]	@ 0x60
 800345c:	4b4f      	ldr	r3, [pc, #316]	@ (800359c <HAL_GPIO_Init+0x2c0>)
 800345e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	60bb      	str	r3, [r7, #8]
 8003466:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003468:	4a4d      	ldr	r2, [pc, #308]	@ (80035a0 <HAL_GPIO_Init+0x2c4>)
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	089b      	lsrs	r3, r3, #2
 800346e:	3302      	adds	r3, #2
 8003470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003474:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	f003 0303 	and.w	r3, r3, #3
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	220f      	movs	r2, #15
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	43db      	mvns	r3, r3
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	4013      	ands	r3, r2
 800348a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003492:	d00d      	beq.n	80034b0 <HAL_GPIO_Init+0x1d4>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a43      	ldr	r2, [pc, #268]	@ (80035a4 <HAL_GPIO_Init+0x2c8>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d007      	beq.n	80034ac <HAL_GPIO_Init+0x1d0>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a42      	ldr	r2, [pc, #264]	@ (80035a8 <HAL_GPIO_Init+0x2cc>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d101      	bne.n	80034a8 <HAL_GPIO_Init+0x1cc>
 80034a4:	2302      	movs	r3, #2
 80034a6:	e004      	b.n	80034b2 <HAL_GPIO_Init+0x1d6>
 80034a8:	2307      	movs	r3, #7
 80034aa:	e002      	b.n	80034b2 <HAL_GPIO_Init+0x1d6>
 80034ac:	2301      	movs	r3, #1
 80034ae:	e000      	b.n	80034b2 <HAL_GPIO_Init+0x1d6>
 80034b0:	2300      	movs	r3, #0
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	f002 0203 	and.w	r2, r2, #3
 80034b8:	0092      	lsls	r2, r2, #2
 80034ba:	4093      	lsls	r3, r2
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	4313      	orrs	r3, r2
 80034c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034c2:	4937      	ldr	r1, [pc, #220]	@ (80035a0 <HAL_GPIO_Init+0x2c4>)
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	089b      	lsrs	r3, r3, #2
 80034c8:	3302      	adds	r3, #2
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034d0:	4b36      	ldr	r3, [pc, #216]	@ (80035ac <HAL_GPIO_Init+0x2d0>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	43db      	mvns	r3, r3
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	4013      	ands	r3, r2
 80034de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034f4:	4a2d      	ldr	r2, [pc, #180]	@ (80035ac <HAL_GPIO_Init+0x2d0>)
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80034fa:	4b2c      	ldr	r3, [pc, #176]	@ (80035ac <HAL_GPIO_Init+0x2d0>)
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	43db      	mvns	r3, r3
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	4013      	ands	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4313      	orrs	r3, r2
 800351c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800351e:	4a23      	ldr	r2, [pc, #140]	@ (80035ac <HAL_GPIO_Init+0x2d0>)
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003524:	4b21      	ldr	r3, [pc, #132]	@ (80035ac <HAL_GPIO_Init+0x2d0>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	43db      	mvns	r3, r3
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	4013      	ands	r3, r2
 8003532:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d003      	beq.n	8003548 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	4313      	orrs	r3, r2
 8003546:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003548:	4a18      	ldr	r2, [pc, #96]	@ (80035ac <HAL_GPIO_Init+0x2d0>)
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800354e:	4b17      	ldr	r3, [pc, #92]	@ (80035ac <HAL_GPIO_Init+0x2d0>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	43db      	mvns	r3, r3
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	4013      	ands	r3, r2
 800355c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	4313      	orrs	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003572:	4a0e      	ldr	r2, [pc, #56]	@ (80035ac <HAL_GPIO_Init+0x2d0>)
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	3301      	adds	r3, #1
 800357c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	fa22 f303 	lsr.w	r3, r2, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	f47f aeaf 	bne.w	80032ec <HAL_GPIO_Init+0x10>
  }
}
 800358e:	bf00      	nop
 8003590:	bf00      	nop
 8003592:	371c      	adds	r7, #28
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	40021000 	.word	0x40021000
 80035a0:	40010000 	.word	0x40010000
 80035a4:	48000400 	.word	0x48000400
 80035a8:	48000800 	.word	0x48000800
 80035ac:	40010400 	.word	0x40010400

080035b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	460b      	mov	r3, r1
 80035ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	691a      	ldr	r2, [r3, #16]
 80035c0:	887b      	ldrh	r3, [r7, #2]
 80035c2:	4013      	ands	r3, r2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d002      	beq.n	80035ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035c8:	2301      	movs	r3, #1
 80035ca:	73fb      	strb	r3, [r7, #15]
 80035cc:	e001      	b.n	80035d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035ce:	2300      	movs	r3, #0
 80035d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3714      	adds	r7, #20
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	460b      	mov	r3, r1
 80035ea:	807b      	strh	r3, [r7, #2]
 80035ec:	4613      	mov	r3, r2
 80035ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035f0:	787b      	ldrb	r3, [r7, #1]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035f6:	887a      	ldrh	r2, [r7, #2]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035fc:	e002      	b.n	8003604 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035fe:	887a      	ldrh	r2, [r7, #2]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003614:	4b04      	ldr	r3, [pc, #16]	@ (8003628 <HAL_PWREx_GetVoltageRange+0x18>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800361c:	4618      	mov	r0, r3
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	40007000 	.word	0x40007000

0800362c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800363a:	d130      	bne.n	800369e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800363c:	4b23      	ldr	r3, [pc, #140]	@ (80036cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003644:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003648:	d038      	beq.n	80036bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800364a:	4b20      	ldr	r3, [pc, #128]	@ (80036cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003652:	4a1e      	ldr	r2, [pc, #120]	@ (80036cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003654:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003658:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800365a:	4b1d      	ldr	r3, [pc, #116]	@ (80036d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2232      	movs	r2, #50	@ 0x32
 8003660:	fb02 f303 	mul.w	r3, r2, r3
 8003664:	4a1b      	ldr	r2, [pc, #108]	@ (80036d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003666:	fba2 2303 	umull	r2, r3, r2, r3
 800366a:	0c9b      	lsrs	r3, r3, #18
 800366c:	3301      	adds	r3, #1
 800366e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003670:	e002      	b.n	8003678 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	3b01      	subs	r3, #1
 8003676:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003678:	4b14      	ldr	r3, [pc, #80]	@ (80036cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003680:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003684:	d102      	bne.n	800368c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1f2      	bne.n	8003672 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800368c:	4b0f      	ldr	r3, [pc, #60]	@ (80036cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003694:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003698:	d110      	bne.n	80036bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e00f      	b.n	80036be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800369e:	4b0b      	ldr	r3, [pc, #44]	@ (80036cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80036a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036aa:	d007      	beq.n	80036bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036ac:	4b07      	ldr	r3, [pc, #28]	@ (80036cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80036b4:	4a05      	ldr	r2, [pc, #20]	@ (80036cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	40007000 	.word	0x40007000
 80036d0:	20000030 	.word	0x20000030
 80036d4:	431bde83 	.word	0x431bde83

080036d8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b088      	sub	sp, #32
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d102      	bne.n	80036ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	f000 bc02 	b.w	8003ef0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036ec:	4b96      	ldr	r3, [pc, #600]	@ (8003948 <HAL_RCC_OscConfig+0x270>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 030c 	and.w	r3, r3, #12
 80036f4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036f6:	4b94      	ldr	r3, [pc, #592]	@ (8003948 <HAL_RCC_OscConfig+0x270>)
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f003 0303 	and.w	r3, r3, #3
 80036fe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0310 	and.w	r3, r3, #16
 8003708:	2b00      	cmp	r3, #0
 800370a:	f000 80e4 	beq.w	80038d6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d007      	beq.n	8003724 <HAL_RCC_OscConfig+0x4c>
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	2b0c      	cmp	r3, #12
 8003718:	f040 808b 	bne.w	8003832 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	2b01      	cmp	r3, #1
 8003720:	f040 8087 	bne.w	8003832 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003724:	4b88      	ldr	r3, [pc, #544]	@ (8003948 <HAL_RCC_OscConfig+0x270>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d005      	beq.n	800373c <HAL_RCC_OscConfig+0x64>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e3d9      	b.n	8003ef0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a1a      	ldr	r2, [r3, #32]
 8003740:	4b81      	ldr	r3, [pc, #516]	@ (8003948 <HAL_RCC_OscConfig+0x270>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0308 	and.w	r3, r3, #8
 8003748:	2b00      	cmp	r3, #0
 800374a:	d004      	beq.n	8003756 <HAL_RCC_OscConfig+0x7e>
 800374c:	4b7e      	ldr	r3, [pc, #504]	@ (8003948 <HAL_RCC_OscConfig+0x270>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003754:	e005      	b.n	8003762 <HAL_RCC_OscConfig+0x8a>
 8003756:	4b7c      	ldr	r3, [pc, #496]	@ (8003948 <HAL_RCC_OscConfig+0x270>)
 8003758:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800375c:	091b      	lsrs	r3, r3, #4
 800375e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003762:	4293      	cmp	r3, r2
 8003764:	d223      	bcs.n	80037ae <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	4618      	mov	r0, r3
 800376c:	f000 fd8c 	bl	8004288 <RCC_SetFlashLatencyFromMSIRange>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e3ba      	b.n	8003ef0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800377a:	4b73      	ldr	r3, [pc, #460]	@ (8003948 <HAL_RCC_OscConfig+0x270>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a72      	ldr	r2, [pc, #456]	@ (8003948 <HAL_RCC_OscConfig+0x270>)
 8003780:	f043 0308 	orr.w	r3, r3, #8
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	4b70      	ldr	r3, [pc, #448]	@ (8003948 <HAL_RCC_OscConfig+0x270>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	496d      	ldr	r1, [pc, #436]	@ (8003948 <HAL_RCC_OscConfig+0x270>)
 8003794:	4313      	orrs	r3, r2
 8003796:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003798:	4b6b      	ldr	r3, [pc, #428]	@ (8003948 <HAL_RCC_OscConfig+0x270>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	021b      	lsls	r3, r3, #8
 80037a6:	4968      	ldr	r1, [pc, #416]	@ (8003948 <HAL_RCC_OscConfig+0x270>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	604b      	str	r3, [r1, #4]
 80037ac:	e025      	b.n	80037fa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037ae:	4b66      	ldr	r3, [pc, #408]	@ (8003948 <HAL_RCC_OscConfig+0x270>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a65      	ldr	r2, [pc, #404]	@ (8003948 <HAL_RCC_OscConfig+0x270>)
 80037b4:	f043 0308 	orr.w	r3, r3, #8
 80037b8:	6013      	str	r3, [r2, #0]
 80037ba:	4b63      	ldr	r3, [pc, #396]	@ (8003948 <HAL_RCC_OscConfig+0x270>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	4960      	ldr	r1, [pc, #384]	@ (8003948 <HAL_RCC_OscConfig+0x270>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037cc:	4b5e      	ldr	r3, [pc, #376]	@ (8003948 <HAL_RCC_OscConfig+0x270>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	021b      	lsls	r3, r3, #8
 80037da:	495b      	ldr	r1, [pc, #364]	@ (8003948 <HAL_RCC_OscConfig+0x270>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d109      	bne.n	80037fa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 fd4c 	bl	8004288 <RCC_SetFlashLatencyFromMSIRange>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e37a      	b.n	8003ef0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037fa:	f000 fc81 	bl	8004100 <HAL_RCC_GetSysClockFreq>
 80037fe:	4602      	mov	r2, r0
 8003800:	4b51      	ldr	r3, [pc, #324]	@ (8003948 <HAL_RCC_OscConfig+0x270>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	091b      	lsrs	r3, r3, #4
 8003806:	f003 030f 	and.w	r3, r3, #15
 800380a:	4950      	ldr	r1, [pc, #320]	@ (800394c <HAL_RCC_OscConfig+0x274>)
 800380c:	5ccb      	ldrb	r3, [r1, r3]
 800380e:	f003 031f 	and.w	r3, r3, #31
 8003812:	fa22 f303 	lsr.w	r3, r2, r3
 8003816:	4a4e      	ldr	r2, [pc, #312]	@ (8003950 <HAL_RCC_OscConfig+0x278>)
 8003818:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800381a:	4b4e      	ldr	r3, [pc, #312]	@ (8003954 <HAL_RCC_OscConfig+0x27c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f7fe fd7a 	bl	8002318 <HAL_InitTick>
 8003824:	4603      	mov	r3, r0
 8003826:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003828:	7bfb      	ldrb	r3, [r7, #15]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d052      	beq.n	80038d4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800382e:	7bfb      	ldrb	r3, [r7, #15]
 8003830:	e35e      	b.n	8003ef0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d032      	beq.n	80038a0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800383a:	4b43      	ldr	r3, [pc, #268]	@ (8003948 <HAL_RCC_OscConfig+0x270>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a42      	ldr	r2, [pc, #264]	@ (8003948 <HAL_RCC_OscConfig+0x270>)
 8003840:	f043 0301 	orr.w	r3, r3, #1
 8003844:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003846:	f7fe fdb7 	bl	80023b8 <HAL_GetTick>
 800384a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800384c:	e008      	b.n	8003860 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800384e:	f7fe fdb3 	bl	80023b8 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d901      	bls.n	8003860 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e347      	b.n	8003ef0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003860:	4b39      	ldr	r3, [pc, #228]	@ (8003948 <HAL_RCC_OscConfig+0x270>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d0f0      	beq.n	800384e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800386c:	4b36      	ldr	r3, [pc, #216]	@ (8003948 <HAL_RCC_OscConfig+0x270>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a35      	ldr	r2, [pc, #212]	@ (8003948 <HAL_RCC_OscConfig+0x270>)
 8003872:	f043 0308 	orr.w	r3, r3, #8
 8003876:	6013      	str	r3, [r2, #0]
 8003878:	4b33      	ldr	r3, [pc, #204]	@ (8003948 <HAL_RCC_OscConfig+0x270>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	4930      	ldr	r1, [pc, #192]	@ (8003948 <HAL_RCC_OscConfig+0x270>)
 8003886:	4313      	orrs	r3, r2
 8003888:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800388a:	4b2f      	ldr	r3, [pc, #188]	@ (8003948 <HAL_RCC_OscConfig+0x270>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	021b      	lsls	r3, r3, #8
 8003898:	492b      	ldr	r1, [pc, #172]	@ (8003948 <HAL_RCC_OscConfig+0x270>)
 800389a:	4313      	orrs	r3, r2
 800389c:	604b      	str	r3, [r1, #4]
 800389e:	e01a      	b.n	80038d6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80038a0:	4b29      	ldr	r3, [pc, #164]	@ (8003948 <HAL_RCC_OscConfig+0x270>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a28      	ldr	r2, [pc, #160]	@ (8003948 <HAL_RCC_OscConfig+0x270>)
 80038a6:	f023 0301 	bic.w	r3, r3, #1
 80038aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038ac:	f7fe fd84 	bl	80023b8 <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038b2:	e008      	b.n	80038c6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038b4:	f7fe fd80 	bl	80023b8 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e314      	b.n	8003ef0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038c6:	4b20      	ldr	r3, [pc, #128]	@ (8003948 <HAL_RCC_OscConfig+0x270>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1f0      	bne.n	80038b4 <HAL_RCC_OscConfig+0x1dc>
 80038d2:	e000      	b.n	80038d6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d073      	beq.n	80039ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	d005      	beq.n	80038f4 <HAL_RCC_OscConfig+0x21c>
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	2b0c      	cmp	r3, #12
 80038ec:	d10e      	bne.n	800390c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	2b03      	cmp	r3, #3
 80038f2:	d10b      	bne.n	800390c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f4:	4b14      	ldr	r3, [pc, #80]	@ (8003948 <HAL_RCC_OscConfig+0x270>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d063      	beq.n	80039c8 <HAL_RCC_OscConfig+0x2f0>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d15f      	bne.n	80039c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e2f1      	b.n	8003ef0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003914:	d106      	bne.n	8003924 <HAL_RCC_OscConfig+0x24c>
 8003916:	4b0c      	ldr	r3, [pc, #48]	@ (8003948 <HAL_RCC_OscConfig+0x270>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a0b      	ldr	r2, [pc, #44]	@ (8003948 <HAL_RCC_OscConfig+0x270>)
 800391c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	e025      	b.n	8003970 <HAL_RCC_OscConfig+0x298>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800392c:	d114      	bne.n	8003958 <HAL_RCC_OscConfig+0x280>
 800392e:	4b06      	ldr	r3, [pc, #24]	@ (8003948 <HAL_RCC_OscConfig+0x270>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a05      	ldr	r2, [pc, #20]	@ (8003948 <HAL_RCC_OscConfig+0x270>)
 8003934:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	4b03      	ldr	r3, [pc, #12]	@ (8003948 <HAL_RCC_OscConfig+0x270>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a02      	ldr	r2, [pc, #8]	@ (8003948 <HAL_RCC_OscConfig+0x270>)
 8003940:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	e013      	b.n	8003970 <HAL_RCC_OscConfig+0x298>
 8003948:	40021000 	.word	0x40021000
 800394c:	08005830 	.word	0x08005830
 8003950:	20000030 	.word	0x20000030
 8003954:	20000034 	.word	0x20000034
 8003958:	4ba0      	ldr	r3, [pc, #640]	@ (8003bdc <HAL_RCC_OscConfig+0x504>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a9f      	ldr	r2, [pc, #636]	@ (8003bdc <HAL_RCC_OscConfig+0x504>)
 800395e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003962:	6013      	str	r3, [r2, #0]
 8003964:	4b9d      	ldr	r3, [pc, #628]	@ (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a9c      	ldr	r2, [pc, #624]	@ (8003bdc <HAL_RCC_OscConfig+0x504>)
 800396a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800396e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d013      	beq.n	80039a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003978:	f7fe fd1e 	bl	80023b8 <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003980:	f7fe fd1a 	bl	80023b8 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b64      	cmp	r3, #100	@ 0x64
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e2ae      	b.n	8003ef0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003992:	4b92      	ldr	r3, [pc, #584]	@ (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0f0      	beq.n	8003980 <HAL_RCC_OscConfig+0x2a8>
 800399e:	e014      	b.n	80039ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a0:	f7fe fd0a 	bl	80023b8 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039a8:	f7fe fd06 	bl	80023b8 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b64      	cmp	r3, #100	@ 0x64
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e29a      	b.n	8003ef0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039ba:	4b88      	ldr	r3, [pc, #544]	@ (8003bdc <HAL_RCC_OscConfig+0x504>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1f0      	bne.n	80039a8 <HAL_RCC_OscConfig+0x2d0>
 80039c6:	e000      	b.n	80039ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d060      	beq.n	8003a98 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	2b04      	cmp	r3, #4
 80039da:	d005      	beq.n	80039e8 <HAL_RCC_OscConfig+0x310>
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	2b0c      	cmp	r3, #12
 80039e0:	d119      	bne.n	8003a16 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d116      	bne.n	8003a16 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039e8:	4b7c      	ldr	r3, [pc, #496]	@ (8003bdc <HAL_RCC_OscConfig+0x504>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d005      	beq.n	8003a00 <HAL_RCC_OscConfig+0x328>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e277      	b.n	8003ef0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a00:	4b76      	ldr	r3, [pc, #472]	@ (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	061b      	lsls	r3, r3, #24
 8003a0e:	4973      	ldr	r1, [pc, #460]	@ (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a14:	e040      	b.n	8003a98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d023      	beq.n	8003a66 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a1e:	4b6f      	ldr	r3, [pc, #444]	@ (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a6e      	ldr	r2, [pc, #440]	@ (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003a24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2a:	f7fe fcc5 	bl	80023b8 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a32:	f7fe fcc1 	bl	80023b8 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e255      	b.n	8003ef0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a44:	4b65      	ldr	r3, [pc, #404]	@ (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0f0      	beq.n	8003a32 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a50:	4b62      	ldr	r3, [pc, #392]	@ (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	061b      	lsls	r3, r3, #24
 8003a5e:	495f      	ldr	r1, [pc, #380]	@ (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	604b      	str	r3, [r1, #4]
 8003a64:	e018      	b.n	8003a98 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a66:	4b5d      	ldr	r3, [pc, #372]	@ (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a5c      	ldr	r2, [pc, #368]	@ (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003a6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a72:	f7fe fca1 	bl	80023b8 <HAL_GetTick>
 8003a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a78:	e008      	b.n	8003a8c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a7a:	f7fe fc9d 	bl	80023b8 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d901      	bls.n	8003a8c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e231      	b.n	8003ef0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a8c:	4b53      	ldr	r3, [pc, #332]	@ (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1f0      	bne.n	8003a7a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0308 	and.w	r3, r3, #8
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d03c      	beq.n	8003b1e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d01c      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aac:	4b4b      	ldr	r3, [pc, #300]	@ (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ab2:	4a4a      	ldr	r2, [pc, #296]	@ (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003ab4:	f043 0301 	orr.w	r3, r3, #1
 8003ab8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003abc:	f7fe fc7c 	bl	80023b8 <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ac4:	f7fe fc78 	bl	80023b8 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e20c      	b.n	8003ef0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ad6:	4b41      	ldr	r3, [pc, #260]	@ (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003ad8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0ef      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x3ec>
 8003ae4:	e01b      	b.n	8003b1e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ae6:	4b3d      	ldr	r3, [pc, #244]	@ (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003aec:	4a3b      	ldr	r2, [pc, #236]	@ (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003aee:	f023 0301 	bic.w	r3, r3, #1
 8003af2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af6:	f7fe fc5f 	bl	80023b8 <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003afe:	f7fe fc5b 	bl	80023b8 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e1ef      	b.n	8003ef0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b10:	4b32      	ldr	r3, [pc, #200]	@ (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1ef      	bne.n	8003afe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0304 	and.w	r3, r3, #4
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 80a6 	beq.w	8003c78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b30:	4b2a      	ldr	r3, [pc, #168]	@ (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10d      	bne.n	8003b58 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b3c:	4b27      	ldr	r3, [pc, #156]	@ (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b40:	4a26      	ldr	r2, [pc, #152]	@ (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003b42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b46:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b48:	4b24      	ldr	r3, [pc, #144]	@ (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b50:	60bb      	str	r3, [r7, #8]
 8003b52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b54:	2301      	movs	r3, #1
 8003b56:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b58:	4b21      	ldr	r3, [pc, #132]	@ (8003be0 <HAL_RCC_OscConfig+0x508>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d118      	bne.n	8003b96 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b64:	4b1e      	ldr	r3, [pc, #120]	@ (8003be0 <HAL_RCC_OscConfig+0x508>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a1d      	ldr	r2, [pc, #116]	@ (8003be0 <HAL_RCC_OscConfig+0x508>)
 8003b6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b70:	f7fe fc22 	bl	80023b8 <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b78:	f7fe fc1e 	bl	80023b8 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e1b2      	b.n	8003ef0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b8a:	4b15      	ldr	r3, [pc, #84]	@ (8003be0 <HAL_RCC_OscConfig+0x508>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0f0      	beq.n	8003b78 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d108      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x4d8>
 8003b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003ba6:	f043 0301 	orr.w	r3, r3, #1
 8003baa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003bae:	e029      	b.n	8003c04 <HAL_RCC_OscConfig+0x52c>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	2b05      	cmp	r3, #5
 8003bb6:	d115      	bne.n	8003be4 <HAL_RCC_OscConfig+0x50c>
 8003bb8:	4b08      	ldr	r3, [pc, #32]	@ (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bbe:	4a07      	ldr	r2, [pc, #28]	@ (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003bc0:	f043 0304 	orr.w	r3, r3, #4
 8003bc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003bc8:	4b04      	ldr	r3, [pc, #16]	@ (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bce:	4a03      	ldr	r2, [pc, #12]	@ (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003bd0:	f043 0301 	orr.w	r3, r3, #1
 8003bd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003bd8:	e014      	b.n	8003c04 <HAL_RCC_OscConfig+0x52c>
 8003bda:	bf00      	nop
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	40007000 	.word	0x40007000
 8003be4:	4b9a      	ldr	r3, [pc, #616]	@ (8003e50 <HAL_RCC_OscConfig+0x778>)
 8003be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bea:	4a99      	ldr	r2, [pc, #612]	@ (8003e50 <HAL_RCC_OscConfig+0x778>)
 8003bec:	f023 0301 	bic.w	r3, r3, #1
 8003bf0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003bf4:	4b96      	ldr	r3, [pc, #600]	@ (8003e50 <HAL_RCC_OscConfig+0x778>)
 8003bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bfa:	4a95      	ldr	r2, [pc, #596]	@ (8003e50 <HAL_RCC_OscConfig+0x778>)
 8003bfc:	f023 0304 	bic.w	r3, r3, #4
 8003c00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d016      	beq.n	8003c3a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c0c:	f7fe fbd4 	bl	80023b8 <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c12:	e00a      	b.n	8003c2a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c14:	f7fe fbd0 	bl	80023b8 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e162      	b.n	8003ef0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c2a:	4b89      	ldr	r3, [pc, #548]	@ (8003e50 <HAL_RCC_OscConfig+0x778>)
 8003c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0ed      	beq.n	8003c14 <HAL_RCC_OscConfig+0x53c>
 8003c38:	e015      	b.n	8003c66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c3a:	f7fe fbbd 	bl	80023b8 <HAL_GetTick>
 8003c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c40:	e00a      	b.n	8003c58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c42:	f7fe fbb9 	bl	80023b8 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e14b      	b.n	8003ef0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c58:	4b7d      	ldr	r3, [pc, #500]	@ (8003e50 <HAL_RCC_OscConfig+0x778>)
 8003c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1ed      	bne.n	8003c42 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c66:	7ffb      	ldrb	r3, [r7, #31]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d105      	bne.n	8003c78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c6c:	4b78      	ldr	r3, [pc, #480]	@ (8003e50 <HAL_RCC_OscConfig+0x778>)
 8003c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c70:	4a77      	ldr	r2, [pc, #476]	@ (8003e50 <HAL_RCC_OscConfig+0x778>)
 8003c72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c76:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0320 	and.w	r3, r3, #32
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d03c      	beq.n	8003cfe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d01c      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c8c:	4b70      	ldr	r3, [pc, #448]	@ (8003e50 <HAL_RCC_OscConfig+0x778>)
 8003c8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c92:	4a6f      	ldr	r2, [pc, #444]	@ (8003e50 <HAL_RCC_OscConfig+0x778>)
 8003c94:	f043 0301 	orr.w	r3, r3, #1
 8003c98:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c9c:	f7fe fb8c 	bl	80023b8 <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ca4:	f7fe fb88 	bl	80023b8 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e11c      	b.n	8003ef0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cb6:	4b66      	ldr	r3, [pc, #408]	@ (8003e50 <HAL_RCC_OscConfig+0x778>)
 8003cb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d0ef      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x5cc>
 8003cc4:	e01b      	b.n	8003cfe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003cc6:	4b62      	ldr	r3, [pc, #392]	@ (8003e50 <HAL_RCC_OscConfig+0x778>)
 8003cc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ccc:	4a60      	ldr	r2, [pc, #384]	@ (8003e50 <HAL_RCC_OscConfig+0x778>)
 8003cce:	f023 0301 	bic.w	r3, r3, #1
 8003cd2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd6:	f7fe fb6f 	bl	80023b8 <HAL_GetTick>
 8003cda:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cde:	f7fe fb6b 	bl	80023b8 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e0ff      	b.n	8003ef0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003cf0:	4b57      	ldr	r3, [pc, #348]	@ (8003e50 <HAL_RCC_OscConfig+0x778>)
 8003cf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1ef      	bne.n	8003cde <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 80f3 	beq.w	8003eee <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	f040 80c9 	bne.w	8003ea4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d12:	4b4f      	ldr	r3, [pc, #316]	@ (8003e50 <HAL_RCC_OscConfig+0x778>)
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	f003 0203 	and.w	r2, r3, #3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d12c      	bne.n	8003d80 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d30:	3b01      	subs	r3, #1
 8003d32:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d123      	bne.n	8003d80 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d42:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d11b      	bne.n	8003d80 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d52:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d113      	bne.n	8003d80 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d62:	085b      	lsrs	r3, r3, #1
 8003d64:	3b01      	subs	r3, #1
 8003d66:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d109      	bne.n	8003d80 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d76:	085b      	lsrs	r3, r3, #1
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d06b      	beq.n	8003e58 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	2b0c      	cmp	r3, #12
 8003d84:	d062      	beq.n	8003e4c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d86:	4b32      	ldr	r3, [pc, #200]	@ (8003e50 <HAL_RCC_OscConfig+0x778>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e0ac      	b.n	8003ef0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d96:	4b2e      	ldr	r3, [pc, #184]	@ (8003e50 <HAL_RCC_OscConfig+0x778>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a2d      	ldr	r2, [pc, #180]	@ (8003e50 <HAL_RCC_OscConfig+0x778>)
 8003d9c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003da0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003da2:	f7fe fb09 	bl	80023b8 <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003da8:	e008      	b.n	8003dbc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003daa:	f7fe fb05 	bl	80023b8 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e099      	b.n	8003ef0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dbc:	4b24      	ldr	r3, [pc, #144]	@ (8003e50 <HAL_RCC_OscConfig+0x778>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1f0      	bne.n	8003daa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dc8:	4b21      	ldr	r3, [pc, #132]	@ (8003e50 <HAL_RCC_OscConfig+0x778>)
 8003dca:	68da      	ldr	r2, [r3, #12]
 8003dcc:	4b21      	ldr	r3, [pc, #132]	@ (8003e54 <HAL_RCC_OscConfig+0x77c>)
 8003dce:	4013      	ands	r3, r2
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003dd8:	3a01      	subs	r2, #1
 8003dda:	0112      	lsls	r2, r2, #4
 8003ddc:	4311      	orrs	r1, r2
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003de2:	0212      	lsls	r2, r2, #8
 8003de4:	4311      	orrs	r1, r2
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003dea:	0852      	lsrs	r2, r2, #1
 8003dec:	3a01      	subs	r2, #1
 8003dee:	0552      	lsls	r2, r2, #21
 8003df0:	4311      	orrs	r1, r2
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003df6:	0852      	lsrs	r2, r2, #1
 8003df8:	3a01      	subs	r2, #1
 8003dfa:	0652      	lsls	r2, r2, #25
 8003dfc:	4311      	orrs	r1, r2
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003e02:	06d2      	lsls	r2, r2, #27
 8003e04:	430a      	orrs	r2, r1
 8003e06:	4912      	ldr	r1, [pc, #72]	@ (8003e50 <HAL_RCC_OscConfig+0x778>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e0c:	4b10      	ldr	r3, [pc, #64]	@ (8003e50 <HAL_RCC_OscConfig+0x778>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a0f      	ldr	r2, [pc, #60]	@ (8003e50 <HAL_RCC_OscConfig+0x778>)
 8003e12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e16:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e18:	4b0d      	ldr	r3, [pc, #52]	@ (8003e50 <HAL_RCC_OscConfig+0x778>)
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	4a0c      	ldr	r2, [pc, #48]	@ (8003e50 <HAL_RCC_OscConfig+0x778>)
 8003e1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e22:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e24:	f7fe fac8 	bl	80023b8 <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e2a:	e008      	b.n	8003e3e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e2c:	f7fe fac4 	bl	80023b8 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e058      	b.n	8003ef0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e3e:	4b04      	ldr	r3, [pc, #16]	@ (8003e50 <HAL_RCC_OscConfig+0x778>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d0f0      	beq.n	8003e2c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e4a:	e050      	b.n	8003eee <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e04f      	b.n	8003ef0 <HAL_RCC_OscConfig+0x818>
 8003e50:	40021000 	.word	0x40021000
 8003e54:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e58:	4b27      	ldr	r3, [pc, #156]	@ (8003ef8 <HAL_RCC_OscConfig+0x820>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d144      	bne.n	8003eee <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003e64:	4b24      	ldr	r3, [pc, #144]	@ (8003ef8 <HAL_RCC_OscConfig+0x820>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a23      	ldr	r2, [pc, #140]	@ (8003ef8 <HAL_RCC_OscConfig+0x820>)
 8003e6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e70:	4b21      	ldr	r3, [pc, #132]	@ (8003ef8 <HAL_RCC_OscConfig+0x820>)
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	4a20      	ldr	r2, [pc, #128]	@ (8003ef8 <HAL_RCC_OscConfig+0x820>)
 8003e76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e7c:	f7fe fa9c 	bl	80023b8 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e84:	f7fe fa98 	bl	80023b8 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e02c      	b.n	8003ef0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e96:	4b18      	ldr	r3, [pc, #96]	@ (8003ef8 <HAL_RCC_OscConfig+0x820>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0f0      	beq.n	8003e84 <HAL_RCC_OscConfig+0x7ac>
 8003ea2:	e024      	b.n	8003eee <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	2b0c      	cmp	r3, #12
 8003ea8:	d01f      	beq.n	8003eea <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eaa:	4b13      	ldr	r3, [pc, #76]	@ (8003ef8 <HAL_RCC_OscConfig+0x820>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a12      	ldr	r2, [pc, #72]	@ (8003ef8 <HAL_RCC_OscConfig+0x820>)
 8003eb0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003eb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb6:	f7fe fa7f 	bl	80023b8 <HAL_GetTick>
 8003eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ebc:	e008      	b.n	8003ed0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ebe:	f7fe fa7b 	bl	80023b8 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d901      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e00f      	b.n	8003ef0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ed0:	4b09      	ldr	r3, [pc, #36]	@ (8003ef8 <HAL_RCC_OscConfig+0x820>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1f0      	bne.n	8003ebe <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003edc:	4b06      	ldr	r3, [pc, #24]	@ (8003ef8 <HAL_RCC_OscConfig+0x820>)
 8003ede:	68da      	ldr	r2, [r3, #12]
 8003ee0:	4905      	ldr	r1, [pc, #20]	@ (8003ef8 <HAL_RCC_OscConfig+0x820>)
 8003ee2:	4b06      	ldr	r3, [pc, #24]	@ (8003efc <HAL_RCC_OscConfig+0x824>)
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	60cb      	str	r3, [r1, #12]
 8003ee8:	e001      	b.n	8003eee <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e000      	b.n	8003ef0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3720      	adds	r7, #32
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	feeefffc 	.word	0xfeeefffc

08003f00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d101      	bne.n	8003f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e0e7      	b.n	80040e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f14:	4b75      	ldr	r3, [pc, #468]	@ (80040ec <HAL_RCC_ClockConfig+0x1ec>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d910      	bls.n	8003f44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f22:	4b72      	ldr	r3, [pc, #456]	@ (80040ec <HAL_RCC_ClockConfig+0x1ec>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f023 0207 	bic.w	r2, r3, #7
 8003f2a:	4970      	ldr	r1, [pc, #448]	@ (80040ec <HAL_RCC_ClockConfig+0x1ec>)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f32:	4b6e      	ldr	r3, [pc, #440]	@ (80040ec <HAL_RCC_ClockConfig+0x1ec>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0307 	and.w	r3, r3, #7
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d001      	beq.n	8003f44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e0cf      	b.n	80040e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d010      	beq.n	8003f72 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	4b66      	ldr	r3, [pc, #408]	@ (80040f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d908      	bls.n	8003f72 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f60:	4b63      	ldr	r3, [pc, #396]	@ (80040f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	4960      	ldr	r1, [pc, #384]	@ (80040f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d04c      	beq.n	8004018 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	2b03      	cmp	r3, #3
 8003f84:	d107      	bne.n	8003f96 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f86:	4b5a      	ldr	r3, [pc, #360]	@ (80040f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d121      	bne.n	8003fd6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e0a6      	b.n	80040e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d107      	bne.n	8003fae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f9e:	4b54      	ldr	r3, [pc, #336]	@ (80040f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d115      	bne.n	8003fd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e09a      	b.n	80040e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d107      	bne.n	8003fc6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fb6:	4b4e      	ldr	r3, [pc, #312]	@ (80040f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d109      	bne.n	8003fd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e08e      	b.n	80040e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fc6:	4b4a      	ldr	r3, [pc, #296]	@ (80040f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e086      	b.n	80040e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fd6:	4b46      	ldr	r3, [pc, #280]	@ (80040f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f023 0203 	bic.w	r2, r3, #3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	4943      	ldr	r1, [pc, #268]	@ (80040f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fe8:	f7fe f9e6 	bl	80023b8 <HAL_GetTick>
 8003fec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fee:	e00a      	b.n	8004006 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ff0:	f7fe f9e2 	bl	80023b8 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e06e      	b.n	80040e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004006:	4b3a      	ldr	r3, [pc, #232]	@ (80040f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f003 020c 	and.w	r2, r3, #12
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	429a      	cmp	r2, r3
 8004016:	d1eb      	bne.n	8003ff0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d010      	beq.n	8004046 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	4b31      	ldr	r3, [pc, #196]	@ (80040f0 <HAL_RCC_ClockConfig+0x1f0>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004030:	429a      	cmp	r2, r3
 8004032:	d208      	bcs.n	8004046 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004034:	4b2e      	ldr	r3, [pc, #184]	@ (80040f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	492b      	ldr	r1, [pc, #172]	@ (80040f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004042:	4313      	orrs	r3, r2
 8004044:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004046:	4b29      	ldr	r3, [pc, #164]	@ (80040ec <HAL_RCC_ClockConfig+0x1ec>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0307 	and.w	r3, r3, #7
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	429a      	cmp	r2, r3
 8004052:	d210      	bcs.n	8004076 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004054:	4b25      	ldr	r3, [pc, #148]	@ (80040ec <HAL_RCC_ClockConfig+0x1ec>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f023 0207 	bic.w	r2, r3, #7
 800405c:	4923      	ldr	r1, [pc, #140]	@ (80040ec <HAL_RCC_ClockConfig+0x1ec>)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	4313      	orrs	r3, r2
 8004062:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004064:	4b21      	ldr	r3, [pc, #132]	@ (80040ec <HAL_RCC_ClockConfig+0x1ec>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0307 	and.w	r3, r3, #7
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	429a      	cmp	r2, r3
 8004070:	d001      	beq.n	8004076 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e036      	b.n	80040e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0304 	and.w	r3, r3, #4
 800407e:	2b00      	cmp	r3, #0
 8004080:	d008      	beq.n	8004094 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004082:	4b1b      	ldr	r3, [pc, #108]	@ (80040f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	4918      	ldr	r1, [pc, #96]	@ (80040f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004090:	4313      	orrs	r3, r2
 8004092:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0308 	and.w	r3, r3, #8
 800409c:	2b00      	cmp	r3, #0
 800409e:	d009      	beq.n	80040b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040a0:	4b13      	ldr	r3, [pc, #76]	@ (80040f0 <HAL_RCC_ClockConfig+0x1f0>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	4910      	ldr	r1, [pc, #64]	@ (80040f0 <HAL_RCC_ClockConfig+0x1f0>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040b4:	f000 f824 	bl	8004100 <HAL_RCC_GetSysClockFreq>
 80040b8:	4602      	mov	r2, r0
 80040ba:	4b0d      	ldr	r3, [pc, #52]	@ (80040f0 <HAL_RCC_ClockConfig+0x1f0>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	091b      	lsrs	r3, r3, #4
 80040c0:	f003 030f 	and.w	r3, r3, #15
 80040c4:	490b      	ldr	r1, [pc, #44]	@ (80040f4 <HAL_RCC_ClockConfig+0x1f4>)
 80040c6:	5ccb      	ldrb	r3, [r1, r3]
 80040c8:	f003 031f 	and.w	r3, r3, #31
 80040cc:	fa22 f303 	lsr.w	r3, r2, r3
 80040d0:	4a09      	ldr	r2, [pc, #36]	@ (80040f8 <HAL_RCC_ClockConfig+0x1f8>)
 80040d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80040d4:	4b09      	ldr	r3, [pc, #36]	@ (80040fc <HAL_RCC_ClockConfig+0x1fc>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4618      	mov	r0, r3
 80040da:	f7fe f91d 	bl	8002318 <HAL_InitTick>
 80040de:	4603      	mov	r3, r0
 80040e0:	72fb      	strb	r3, [r7, #11]

  return status;
 80040e2:	7afb      	ldrb	r3, [r7, #11]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	40022000 	.word	0x40022000
 80040f0:	40021000 	.word	0x40021000
 80040f4:	08005830 	.word	0x08005830
 80040f8:	20000030 	.word	0x20000030
 80040fc:	20000034 	.word	0x20000034

08004100 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004100:	b480      	push	{r7}
 8004102:	b089      	sub	sp, #36	@ 0x24
 8004104:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004106:	2300      	movs	r3, #0
 8004108:	61fb      	str	r3, [r7, #28]
 800410a:	2300      	movs	r3, #0
 800410c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800410e:	4b3e      	ldr	r3, [pc, #248]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x108>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 030c 	and.w	r3, r3, #12
 8004116:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004118:	4b3b      	ldr	r3, [pc, #236]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x108>)
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	f003 0303 	and.w	r3, r3, #3
 8004120:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d005      	beq.n	8004134 <HAL_RCC_GetSysClockFreq+0x34>
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	2b0c      	cmp	r3, #12
 800412c:	d121      	bne.n	8004172 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d11e      	bne.n	8004172 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004134:	4b34      	ldr	r3, [pc, #208]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x108>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0308 	and.w	r3, r3, #8
 800413c:	2b00      	cmp	r3, #0
 800413e:	d107      	bne.n	8004150 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004140:	4b31      	ldr	r3, [pc, #196]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x108>)
 8004142:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004146:	0a1b      	lsrs	r3, r3, #8
 8004148:	f003 030f 	and.w	r3, r3, #15
 800414c:	61fb      	str	r3, [r7, #28]
 800414e:	e005      	b.n	800415c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004150:	4b2d      	ldr	r3, [pc, #180]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x108>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	091b      	lsrs	r3, r3, #4
 8004156:	f003 030f 	and.w	r3, r3, #15
 800415a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800415c:	4a2b      	ldr	r2, [pc, #172]	@ (800420c <HAL_RCC_GetSysClockFreq+0x10c>)
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004164:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10d      	bne.n	8004188 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004170:	e00a      	b.n	8004188 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	2b04      	cmp	r3, #4
 8004176:	d102      	bne.n	800417e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004178:	4b25      	ldr	r3, [pc, #148]	@ (8004210 <HAL_RCC_GetSysClockFreq+0x110>)
 800417a:	61bb      	str	r3, [r7, #24]
 800417c:	e004      	b.n	8004188 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	2b08      	cmp	r3, #8
 8004182:	d101      	bne.n	8004188 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004184:	4b23      	ldr	r3, [pc, #140]	@ (8004214 <HAL_RCC_GetSysClockFreq+0x114>)
 8004186:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	2b0c      	cmp	r3, #12
 800418c:	d134      	bne.n	80041f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800418e:	4b1e      	ldr	r3, [pc, #120]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x108>)
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	f003 0303 	and.w	r3, r3, #3
 8004196:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	2b02      	cmp	r3, #2
 800419c:	d003      	beq.n	80041a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	2b03      	cmp	r3, #3
 80041a2:	d003      	beq.n	80041ac <HAL_RCC_GetSysClockFreq+0xac>
 80041a4:	e005      	b.n	80041b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80041a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004210 <HAL_RCC_GetSysClockFreq+0x110>)
 80041a8:	617b      	str	r3, [r7, #20]
      break;
 80041aa:	e005      	b.n	80041b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80041ac:	4b19      	ldr	r3, [pc, #100]	@ (8004214 <HAL_RCC_GetSysClockFreq+0x114>)
 80041ae:	617b      	str	r3, [r7, #20]
      break;
 80041b0:	e002      	b.n	80041b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	617b      	str	r3, [r7, #20]
      break;
 80041b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041b8:	4b13      	ldr	r3, [pc, #76]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x108>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	091b      	lsrs	r3, r3, #4
 80041be:	f003 0307 	and.w	r3, r3, #7
 80041c2:	3301      	adds	r3, #1
 80041c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80041c6:	4b10      	ldr	r3, [pc, #64]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x108>)
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	0a1b      	lsrs	r3, r3, #8
 80041cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	fb03 f202 	mul.w	r2, r3, r2
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041de:	4b0a      	ldr	r3, [pc, #40]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x108>)
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	0e5b      	lsrs	r3, r3, #25
 80041e4:	f003 0303 	and.w	r3, r3, #3
 80041e8:	3301      	adds	r3, #1
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80041f8:	69bb      	ldr	r3, [r7, #24]
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3724      	adds	r7, #36	@ 0x24
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	40021000 	.word	0x40021000
 800420c:	08005848 	.word	0x08005848
 8004210:	00f42400 	.word	0x00f42400
 8004214:	007a1200 	.word	0x007a1200

08004218 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800421c:	4b03      	ldr	r3, [pc, #12]	@ (800422c <HAL_RCC_GetHCLKFreq+0x14>)
 800421e:	681b      	ldr	r3, [r3, #0]
}
 8004220:	4618      	mov	r0, r3
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	20000030 	.word	0x20000030

08004230 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004234:	f7ff fff0 	bl	8004218 <HAL_RCC_GetHCLKFreq>
 8004238:	4602      	mov	r2, r0
 800423a:	4b06      	ldr	r3, [pc, #24]	@ (8004254 <HAL_RCC_GetPCLK1Freq+0x24>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	0a1b      	lsrs	r3, r3, #8
 8004240:	f003 0307 	and.w	r3, r3, #7
 8004244:	4904      	ldr	r1, [pc, #16]	@ (8004258 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004246:	5ccb      	ldrb	r3, [r1, r3]
 8004248:	f003 031f 	and.w	r3, r3, #31
 800424c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004250:	4618      	mov	r0, r3
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40021000 	.word	0x40021000
 8004258:	08005840 	.word	0x08005840

0800425c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004260:	f7ff ffda 	bl	8004218 <HAL_RCC_GetHCLKFreq>
 8004264:	4602      	mov	r2, r0
 8004266:	4b06      	ldr	r3, [pc, #24]	@ (8004280 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	0adb      	lsrs	r3, r3, #11
 800426c:	f003 0307 	and.w	r3, r3, #7
 8004270:	4904      	ldr	r1, [pc, #16]	@ (8004284 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004272:	5ccb      	ldrb	r3, [r1, r3]
 8004274:	f003 031f 	and.w	r3, r3, #31
 8004278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800427c:	4618      	mov	r0, r3
 800427e:	bd80      	pop	{r7, pc}
 8004280:	40021000 	.word	0x40021000
 8004284:	08005840 	.word	0x08005840

08004288 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004290:	2300      	movs	r3, #0
 8004292:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004294:	4b2a      	ldr	r3, [pc, #168]	@ (8004340 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004298:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d003      	beq.n	80042a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80042a0:	f7ff f9b6 	bl	8003610 <HAL_PWREx_GetVoltageRange>
 80042a4:	6178      	str	r0, [r7, #20]
 80042a6:	e014      	b.n	80042d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80042a8:	4b25      	ldr	r3, [pc, #148]	@ (8004340 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ac:	4a24      	ldr	r2, [pc, #144]	@ (8004340 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80042b4:	4b22      	ldr	r3, [pc, #136]	@ (8004340 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042bc:	60fb      	str	r3, [r7, #12]
 80042be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80042c0:	f7ff f9a6 	bl	8003610 <HAL_PWREx_GetVoltageRange>
 80042c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80042c6:	4b1e      	ldr	r3, [pc, #120]	@ (8004340 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ca:	4a1d      	ldr	r2, [pc, #116]	@ (8004340 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042d8:	d10b      	bne.n	80042f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b80      	cmp	r3, #128	@ 0x80
 80042de:	d919      	bls.n	8004314 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2ba0      	cmp	r3, #160	@ 0xa0
 80042e4:	d902      	bls.n	80042ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042e6:	2302      	movs	r3, #2
 80042e8:	613b      	str	r3, [r7, #16]
 80042ea:	e013      	b.n	8004314 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042ec:	2301      	movs	r3, #1
 80042ee:	613b      	str	r3, [r7, #16]
 80042f0:	e010      	b.n	8004314 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b80      	cmp	r3, #128	@ 0x80
 80042f6:	d902      	bls.n	80042fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80042f8:	2303      	movs	r3, #3
 80042fa:	613b      	str	r3, [r7, #16]
 80042fc:	e00a      	b.n	8004314 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b80      	cmp	r3, #128	@ 0x80
 8004302:	d102      	bne.n	800430a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004304:	2302      	movs	r3, #2
 8004306:	613b      	str	r3, [r7, #16]
 8004308:	e004      	b.n	8004314 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b70      	cmp	r3, #112	@ 0x70
 800430e:	d101      	bne.n	8004314 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004310:	2301      	movs	r3, #1
 8004312:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004314:	4b0b      	ldr	r3, [pc, #44]	@ (8004344 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f023 0207 	bic.w	r2, r3, #7
 800431c:	4909      	ldr	r1, [pc, #36]	@ (8004344 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	4313      	orrs	r3, r2
 8004322:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004324:	4b07      	ldr	r3, [pc, #28]	@ (8004344 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0307 	and.w	r3, r3, #7
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	429a      	cmp	r2, r3
 8004330:	d001      	beq.n	8004336 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e000      	b.n	8004338 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3718      	adds	r7, #24
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	40021000 	.word	0x40021000
 8004344:	40022000 	.word	0x40022000

08004348 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004350:	2300      	movs	r3, #0
 8004352:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004354:	2300      	movs	r3, #0
 8004356:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004360:	2b00      	cmp	r3, #0
 8004362:	d031      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004368:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800436c:	d01a      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800436e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004372:	d814      	bhi.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004374:	2b00      	cmp	r3, #0
 8004376:	d009      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004378:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800437c:	d10f      	bne.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800437e:	4b5d      	ldr	r3, [pc, #372]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	4a5c      	ldr	r2, [pc, #368]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004384:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004388:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800438a:	e00c      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3304      	adds	r3, #4
 8004390:	2100      	movs	r1, #0
 8004392:	4618      	mov	r0, r3
 8004394:	f000 f9ce 	bl	8004734 <RCCEx_PLLSAI1_Config>
 8004398:	4603      	mov	r3, r0
 800439a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800439c:	e003      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	74fb      	strb	r3, [r7, #19]
      break;
 80043a2:	e000      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80043a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043a6:	7cfb      	ldrb	r3, [r7, #19]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10b      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043ac:	4b51      	ldr	r3, [pc, #324]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043b2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043ba:	494e      	ldr	r1, [pc, #312]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80043c2:	e001      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c4:	7cfb      	ldrb	r3, [r7, #19]
 80043c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 809e 	beq.w	8004512 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043d6:	2300      	movs	r3, #0
 80043d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043da:	4b46      	ldr	r3, [pc, #280]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80043e6:	2301      	movs	r3, #1
 80043e8:	e000      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80043ea:	2300      	movs	r3, #0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00d      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043f0:	4b40      	ldr	r3, [pc, #256]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f4:	4a3f      	ldr	r2, [pc, #252]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80043fc:	4b3d      	ldr	r3, [pc, #244]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004400:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004404:	60bb      	str	r3, [r7, #8]
 8004406:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004408:	2301      	movs	r3, #1
 800440a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800440c:	4b3a      	ldr	r3, [pc, #232]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a39      	ldr	r2, [pc, #228]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004412:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004416:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004418:	f7fd ffce 	bl	80023b8 <HAL_GetTick>
 800441c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800441e:	e009      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004420:	f7fd ffca 	bl	80023b8 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d902      	bls.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	74fb      	strb	r3, [r7, #19]
        break;
 8004432:	e005      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004434:	4b30      	ldr	r3, [pc, #192]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0ef      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004440:	7cfb      	ldrb	r3, [r7, #19]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d15a      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004446:	4b2b      	ldr	r3, [pc, #172]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800444c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004450:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d01e      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	429a      	cmp	r2, r3
 8004460:	d019      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004462:	4b24      	ldr	r3, [pc, #144]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004468:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800446c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800446e:	4b21      	ldr	r3, [pc, #132]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004470:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004474:	4a1f      	ldr	r2, [pc, #124]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004476:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800447a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800447e:	4b1d      	ldr	r3, [pc, #116]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004480:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004484:	4a1b      	ldr	r2, [pc, #108]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004486:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800448a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800448e:	4a19      	ldr	r2, [pc, #100]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b00      	cmp	r3, #0
 800449e:	d016      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a0:	f7fd ff8a 	bl	80023b8 <HAL_GetTick>
 80044a4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044a6:	e00b      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044a8:	f7fd ff86 	bl	80023b8 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d902      	bls.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	74fb      	strb	r3, [r7, #19]
            break;
 80044be:	e006      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044c0:	4b0c      	ldr	r3, [pc, #48]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d0ec      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80044ce:	7cfb      	ldrb	r3, [r7, #19]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10b      	bne.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044d4:	4b07      	ldr	r3, [pc, #28]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044da:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044e2:	4904      	ldr	r1, [pc, #16]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80044ea:	e009      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044ec:	7cfb      	ldrb	r3, [r7, #19]
 80044ee:	74bb      	strb	r3, [r7, #18]
 80044f0:	e006      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80044f2:	bf00      	nop
 80044f4:	40021000 	.word	0x40021000
 80044f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044fc:	7cfb      	ldrb	r3, [r7, #19]
 80044fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004500:	7c7b      	ldrb	r3, [r7, #17]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d105      	bne.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004506:	4b8a      	ldr	r3, [pc, #552]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800450a:	4a89      	ldr	r2, [pc, #548]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800450c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004510:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00a      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800451e:	4b84      	ldr	r3, [pc, #528]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004520:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004524:	f023 0203 	bic.w	r2, r3, #3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	4980      	ldr	r1, [pc, #512]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800452e:	4313      	orrs	r3, r2
 8004530:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00a      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004540:	4b7b      	ldr	r3, [pc, #492]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004546:	f023 020c 	bic.w	r2, r3, #12
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454e:	4978      	ldr	r1, [pc, #480]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004550:	4313      	orrs	r3, r2
 8004552:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0320 	and.w	r3, r3, #32
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00a      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004562:	4b73      	ldr	r3, [pc, #460]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004568:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004570:	496f      	ldr	r1, [pc, #444]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004572:	4313      	orrs	r3, r2
 8004574:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00a      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004584:	4b6a      	ldr	r3, [pc, #424]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800458a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004592:	4967      	ldr	r1, [pc, #412]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004594:	4313      	orrs	r3, r2
 8004596:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00a      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045a6:	4b62      	ldr	r3, [pc, #392]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ac:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b4:	495e      	ldr	r1, [pc, #376]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00a      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045c8:	4b59      	ldr	r3, [pc, #356]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ce:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d6:	4956      	ldr	r1, [pc, #344]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00a      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045ea:	4b51      	ldr	r3, [pc, #324]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f8:	494d      	ldr	r1, [pc, #308]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d028      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800460c:	4b48      	ldr	r3, [pc, #288]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800460e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004612:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461a:	4945      	ldr	r1, [pc, #276]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800461c:	4313      	orrs	r3, r2
 800461e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004626:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800462a:	d106      	bne.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800462c:	4b40      	ldr	r3, [pc, #256]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	4a3f      	ldr	r2, [pc, #252]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004632:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004636:	60d3      	str	r3, [r2, #12]
 8004638:	e011      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004642:	d10c      	bne.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	3304      	adds	r3, #4
 8004648:	2101      	movs	r1, #1
 800464a:	4618      	mov	r0, r3
 800464c:	f000 f872 	bl	8004734 <RCCEx_PLLSAI1_Config>
 8004650:	4603      	mov	r3, r0
 8004652:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004654:	7cfb      	ldrb	r3, [r7, #19]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800465a:	7cfb      	ldrb	r3, [r7, #19]
 800465c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d028      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800466a:	4b31      	ldr	r3, [pc, #196]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800466c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004670:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004678:	492d      	ldr	r1, [pc, #180]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800467a:	4313      	orrs	r3, r2
 800467c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004684:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004688:	d106      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800468a:	4b29      	ldr	r3, [pc, #164]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	4a28      	ldr	r2, [pc, #160]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004690:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004694:	60d3      	str	r3, [r2, #12]
 8004696:	e011      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800469c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046a0:	d10c      	bne.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	3304      	adds	r3, #4
 80046a6:	2101      	movs	r1, #1
 80046a8:	4618      	mov	r0, r3
 80046aa:	f000 f843 	bl	8004734 <RCCEx_PLLSAI1_Config>
 80046ae:	4603      	mov	r3, r0
 80046b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046b2:	7cfb      	ldrb	r3, [r7, #19]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d001      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80046b8:	7cfb      	ldrb	r3, [r7, #19]
 80046ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d01c      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046c8:	4b19      	ldr	r3, [pc, #100]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ce:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046d6:	4916      	ldr	r1, [pc, #88]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80046e6:	d10c      	bne.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	3304      	adds	r3, #4
 80046ec:	2102      	movs	r1, #2
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 f820 	bl	8004734 <RCCEx_PLLSAI1_Config>
 80046f4:	4603      	mov	r3, r0
 80046f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046f8:	7cfb      	ldrb	r3, [r7, #19]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80046fe:	7cfb      	ldrb	r3, [r7, #19]
 8004700:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00a      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800470e:	4b08      	ldr	r3, [pc, #32]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004710:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004714:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800471c:	4904      	ldr	r1, [pc, #16]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800471e:	4313      	orrs	r3, r2
 8004720:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004724:	7cbb      	ldrb	r3, [r7, #18]
}
 8004726:	4618      	mov	r0, r3
 8004728:	3718      	adds	r7, #24
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	40021000 	.word	0x40021000

08004734 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800473e:	2300      	movs	r3, #0
 8004740:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004742:	4b74      	ldr	r3, [pc, #464]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	f003 0303 	and.w	r3, r3, #3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d018      	beq.n	8004780 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800474e:	4b71      	ldr	r3, [pc, #452]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f003 0203 	and.w	r2, r3, #3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	429a      	cmp	r2, r3
 800475c:	d10d      	bne.n	800477a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
       ||
 8004762:	2b00      	cmp	r3, #0
 8004764:	d009      	beq.n	800477a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004766:	4b6b      	ldr	r3, [pc, #428]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	091b      	lsrs	r3, r3, #4
 800476c:	f003 0307 	and.w	r3, r3, #7
 8004770:	1c5a      	adds	r2, r3, #1
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
       ||
 8004776:	429a      	cmp	r2, r3
 8004778:	d047      	beq.n	800480a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	73fb      	strb	r3, [r7, #15]
 800477e:	e044      	b.n	800480a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2b03      	cmp	r3, #3
 8004786:	d018      	beq.n	80047ba <RCCEx_PLLSAI1_Config+0x86>
 8004788:	2b03      	cmp	r3, #3
 800478a:	d825      	bhi.n	80047d8 <RCCEx_PLLSAI1_Config+0xa4>
 800478c:	2b01      	cmp	r3, #1
 800478e:	d002      	beq.n	8004796 <RCCEx_PLLSAI1_Config+0x62>
 8004790:	2b02      	cmp	r3, #2
 8004792:	d009      	beq.n	80047a8 <RCCEx_PLLSAI1_Config+0x74>
 8004794:	e020      	b.n	80047d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004796:	4b5f      	ldr	r3, [pc, #380]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d11d      	bne.n	80047de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047a6:	e01a      	b.n	80047de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047a8:	4b5a      	ldr	r3, [pc, #360]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d116      	bne.n	80047e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047b8:	e013      	b.n	80047e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047ba:	4b56      	ldr	r3, [pc, #344]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10f      	bne.n	80047e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047c6:	4b53      	ldr	r3, [pc, #332]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d109      	bne.n	80047e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80047d6:	e006      	b.n	80047e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	73fb      	strb	r3, [r7, #15]
      break;
 80047dc:	e004      	b.n	80047e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047de:	bf00      	nop
 80047e0:	e002      	b.n	80047e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047e2:	bf00      	nop
 80047e4:	e000      	b.n	80047e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80047e8:	7bfb      	ldrb	r3, [r7, #15]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10d      	bne.n	800480a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80047ee:	4b49      	ldr	r3, [pc, #292]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6819      	ldr	r1, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	3b01      	subs	r3, #1
 8004800:	011b      	lsls	r3, r3, #4
 8004802:	430b      	orrs	r3, r1
 8004804:	4943      	ldr	r1, [pc, #268]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004806:	4313      	orrs	r3, r2
 8004808:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800480a:	7bfb      	ldrb	r3, [r7, #15]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d17c      	bne.n	800490a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004810:	4b40      	ldr	r3, [pc, #256]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a3f      	ldr	r2, [pc, #252]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004816:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800481a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800481c:	f7fd fdcc 	bl	80023b8 <HAL_GetTick>
 8004820:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004822:	e009      	b.n	8004838 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004824:	f7fd fdc8 	bl	80023b8 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d902      	bls.n	8004838 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	73fb      	strb	r3, [r7, #15]
        break;
 8004836:	e005      	b.n	8004844 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004838:	4b36      	ldr	r3, [pc, #216]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e0>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1ef      	bne.n	8004824 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004844:	7bfb      	ldrb	r3, [r7, #15]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d15f      	bne.n	800490a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d110      	bne.n	8004872 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004850:	4b30      	ldr	r3, [pc, #192]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004858:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	6892      	ldr	r2, [r2, #8]
 8004860:	0211      	lsls	r1, r2, #8
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	68d2      	ldr	r2, [r2, #12]
 8004866:	06d2      	lsls	r2, r2, #27
 8004868:	430a      	orrs	r2, r1
 800486a:	492a      	ldr	r1, [pc, #168]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e0>)
 800486c:	4313      	orrs	r3, r2
 800486e:	610b      	str	r3, [r1, #16]
 8004870:	e027      	b.n	80048c2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d112      	bne.n	800489e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004878:	4b26      	ldr	r3, [pc, #152]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e0>)
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004880:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	6892      	ldr	r2, [r2, #8]
 8004888:	0211      	lsls	r1, r2, #8
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	6912      	ldr	r2, [r2, #16]
 800488e:	0852      	lsrs	r2, r2, #1
 8004890:	3a01      	subs	r2, #1
 8004892:	0552      	lsls	r2, r2, #21
 8004894:	430a      	orrs	r2, r1
 8004896:	491f      	ldr	r1, [pc, #124]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004898:	4313      	orrs	r3, r2
 800489a:	610b      	str	r3, [r1, #16]
 800489c:	e011      	b.n	80048c2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800489e:	4b1d      	ldr	r3, [pc, #116]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80048a6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	6892      	ldr	r2, [r2, #8]
 80048ae:	0211      	lsls	r1, r2, #8
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	6952      	ldr	r2, [r2, #20]
 80048b4:	0852      	lsrs	r2, r2, #1
 80048b6:	3a01      	subs	r2, #1
 80048b8:	0652      	lsls	r2, r2, #25
 80048ba:	430a      	orrs	r2, r1
 80048bc:	4915      	ldr	r1, [pc, #84]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80048c2:	4b14      	ldr	r3, [pc, #80]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a13      	ldr	r2, [pc, #76]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048c8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80048cc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ce:	f7fd fd73 	bl	80023b8 <HAL_GetTick>
 80048d2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048d4:	e009      	b.n	80048ea <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048d6:	f7fd fd6f 	bl	80023b8 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d902      	bls.n	80048ea <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	73fb      	strb	r3, [r7, #15]
          break;
 80048e8:	e005      	b.n	80048f6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d0ef      	beq.n	80048d6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80048f6:	7bfb      	ldrb	r3, [r7, #15]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d106      	bne.n	800490a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80048fc:	4b05      	ldr	r3, [pc, #20]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048fe:	691a      	ldr	r2, [r3, #16]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	4903      	ldr	r1, [pc, #12]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004906:	4313      	orrs	r3, r2
 8004908:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800490a:	7bfb      	ldrb	r3, [r7, #15]
}
 800490c:	4618      	mov	r0, r3
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	40021000 	.word	0x40021000

08004918 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e049      	b.n	80049be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d106      	bne.n	8004944 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7fd fbd4 	bl	80020ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2202      	movs	r2, #2
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	3304      	adds	r3, #4
 8004954:	4619      	mov	r1, r3
 8004956:	4610      	mov	r0, r2
 8004958:	f000 f964 	bl	8004c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3708      	adds	r7, #8
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b084      	sub	sp, #16
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d020      	beq.n	8004a2a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d01b      	beq.n	8004a2a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f06f 0202 	mvn.w	r2, #2
 80049fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	f003 0303 	and.w	r3, r3, #3
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d003      	beq.n	8004a18 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 f8e9 	bl	8004be8 <HAL_TIM_IC_CaptureCallback>
 8004a16:	e005      	b.n	8004a24 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 f8db 	bl	8004bd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f8ec 	bl	8004bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d020      	beq.n	8004a76 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f003 0304 	and.w	r3, r3, #4
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d01b      	beq.n	8004a76 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f06f 0204 	mvn.w	r2, #4
 8004a46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d003      	beq.n	8004a64 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 f8c3 	bl	8004be8 <HAL_TIM_IC_CaptureCallback>
 8004a62:	e005      	b.n	8004a70 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 f8b5 	bl	8004bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f8c6 	bl	8004bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	f003 0308 	and.w	r3, r3, #8
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d020      	beq.n	8004ac2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f003 0308 	and.w	r3, r3, #8
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d01b      	beq.n	8004ac2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f06f 0208 	mvn.w	r2, #8
 8004a92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2204      	movs	r2, #4
 8004a98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	69db      	ldr	r3, [r3, #28]
 8004aa0:	f003 0303 	and.w	r3, r3, #3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d003      	beq.n	8004ab0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f89d 	bl	8004be8 <HAL_TIM_IC_CaptureCallback>
 8004aae:	e005      	b.n	8004abc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 f88f 	bl	8004bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f8a0 	bl	8004bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	f003 0310 	and.w	r3, r3, #16
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d020      	beq.n	8004b0e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f003 0310 	and.w	r3, r3, #16
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d01b      	beq.n	8004b0e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f06f 0210 	mvn.w	r2, #16
 8004ade:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2208      	movs	r2, #8
 8004ae4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	69db      	ldr	r3, [r3, #28]
 8004aec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d003      	beq.n	8004afc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f877 	bl	8004be8 <HAL_TIM_IC_CaptureCallback>
 8004afa:	e005      	b.n	8004b08 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f869 	bl	8004bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f87a 	bl	8004bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00c      	beq.n	8004b32 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d007      	beq.n	8004b32 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f06f 0201 	mvn.w	r2, #1
 8004b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f7fc ff37 	bl	80019a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d104      	bne.n	8004b46 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00c      	beq.n	8004b60 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d007      	beq.n	8004b60 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f8dc 	bl	8004d18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00c      	beq.n	8004b84 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d007      	beq.n	8004b84 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f8d4 	bl	8004d2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00c      	beq.n	8004ba8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d007      	beq.n	8004ba8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f834 	bl	8004c10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f003 0320 	and.w	r3, r3, #32
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00c      	beq.n	8004bcc <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f003 0320 	and.w	r3, r3, #32
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d007      	beq.n	8004bcc <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f06f 0220 	mvn.w	r2, #32
 8004bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f89c 	bl	8004d04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bcc:	bf00      	nop
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a30      	ldr	r2, [pc, #192]	@ (8004cf8 <TIM_Base_SetConfig+0xd4>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d003      	beq.n	8004c44 <TIM_Base_SetConfig+0x20>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c42:	d108      	bne.n	8004c56 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a27      	ldr	r2, [pc, #156]	@ (8004cf8 <TIM_Base_SetConfig+0xd4>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d00b      	beq.n	8004c76 <TIM_Base_SetConfig+0x52>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c64:	d007      	beq.n	8004c76 <TIM_Base_SetConfig+0x52>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a24      	ldr	r2, [pc, #144]	@ (8004cfc <TIM_Base_SetConfig+0xd8>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d003      	beq.n	8004c76 <TIM_Base_SetConfig+0x52>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a23      	ldr	r2, [pc, #140]	@ (8004d00 <TIM_Base_SetConfig+0xdc>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d108      	bne.n	8004c88 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	689a      	ldr	r2, [r3, #8]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a12      	ldr	r2, [pc, #72]	@ (8004cf8 <TIM_Base_SetConfig+0xd4>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d007      	beq.n	8004cc4 <TIM_Base_SetConfig+0xa0>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a11      	ldr	r2, [pc, #68]	@ (8004cfc <TIM_Base_SetConfig+0xd8>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d003      	beq.n	8004cc4 <TIM_Base_SetConfig+0xa0>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a10      	ldr	r2, [pc, #64]	@ (8004d00 <TIM_Base_SetConfig+0xdc>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d103      	bne.n	8004ccc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	691a      	ldr	r2, [r3, #16]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d105      	bne.n	8004cea <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	f023 0201 	bic.w	r2, r3, #1
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	611a      	str	r2, [r3, #16]
  }
}
 8004cea:	bf00      	nop
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	40012c00 	.word	0x40012c00
 8004cfc:	40014000 	.word	0x40014000
 8004d00:	40014400 	.word	0x40014400

08004d04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e040      	b.n	8004dd4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d106      	bne.n	8004d68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f7fd f9e8 	bl	8002138 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2224      	movs	r2, #36	@ 0x24
 8004d6c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f022 0201 	bic.w	r2, r2, #1
 8004d7c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d002      	beq.n	8004d8c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 fade 	bl	8005348 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 f8af 	bl	8004ef0 <UART_SetConfig>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d101      	bne.n	8004d9c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e01b      	b.n	8004dd4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	685a      	ldr	r2, [r3, #4]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004daa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689a      	ldr	r2, [r3, #8]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004dba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f042 0201 	orr.w	r2, r2, #1
 8004dca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 fb5d 	bl	800548c <UART_CheckIdleState>
 8004dd2:	4603      	mov	r3, r0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b08a      	sub	sp, #40	@ 0x28
 8004de0:	af02      	add	r7, sp, #8
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	603b      	str	r3, [r7, #0]
 8004de8:	4613      	mov	r3, r2
 8004dea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004df0:	2b20      	cmp	r3, #32
 8004df2:	d177      	bne.n	8004ee4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d002      	beq.n	8004e00 <HAL_UART_Transmit+0x24>
 8004dfa:	88fb      	ldrh	r3, [r7, #6]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e070      	b.n	8004ee6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2221      	movs	r2, #33	@ 0x21
 8004e10:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e12:	f7fd fad1 	bl	80023b8 <HAL_GetTick>
 8004e16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	88fa      	ldrh	r2, [r7, #6]
 8004e1c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	88fa      	ldrh	r2, [r7, #6]
 8004e24:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e30:	d108      	bne.n	8004e44 <HAL_UART_Transmit+0x68>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d104      	bne.n	8004e44 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	61bb      	str	r3, [r7, #24]
 8004e42:	e003      	b.n	8004e4c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e4c:	e02f      	b.n	8004eae <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	9300      	str	r3, [sp, #0]
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	2200      	movs	r2, #0
 8004e56:	2180      	movs	r1, #128	@ 0x80
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f000 fbbf 	bl	80055dc <UART_WaitOnFlagUntilTimeout>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d004      	beq.n	8004e6e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2220      	movs	r2, #32
 8004e68:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e03b      	b.n	8004ee6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10b      	bne.n	8004e8c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	881a      	ldrh	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e80:	b292      	uxth	r2, r2
 8004e82:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	3302      	adds	r3, #2
 8004e88:	61bb      	str	r3, [r7, #24]
 8004e8a:	e007      	b.n	8004e9c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	781a      	ldrb	r2, [r3, #0]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1c9      	bne.n	8004e4e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	2140      	movs	r1, #64	@ 0x40
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f000 fb89 	bl	80055dc <UART_WaitOnFlagUntilTimeout>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d004      	beq.n	8004eda <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e005      	b.n	8004ee6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2220      	movs	r2, #32
 8004ede:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	e000      	b.n	8004ee6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004ee4:	2302      	movs	r3, #2
  }
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3720      	adds	r7, #32
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
	...

08004ef0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ef0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ef4:	b08a      	sub	sp, #40	@ 0x28
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004efa:	2300      	movs	r3, #0
 8004efc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	689a      	ldr	r2, [r3, #8]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	431a      	orrs	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	69db      	ldr	r3, [r3, #28]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	4bb4      	ldr	r3, [pc, #720]	@ (80051f0 <UART_SetConfig+0x300>)
 8004f20:	4013      	ands	r3, r2
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	6812      	ldr	r2, [r2, #0]
 8004f26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f28:	430b      	orrs	r3, r1
 8004f2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	68da      	ldr	r2, [r3, #12]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4aa9      	ldr	r2, [pc, #676]	@ (80051f4 <UART_SetConfig+0x304>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d004      	beq.n	8004f5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4aa0      	ldr	r2, [pc, #640]	@ (80051f8 <UART_SetConfig+0x308>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d126      	bne.n	8004fc8 <UART_SetConfig+0xd8>
 8004f7a:	4ba0      	ldr	r3, [pc, #640]	@ (80051fc <UART_SetConfig+0x30c>)
 8004f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f80:	f003 0303 	and.w	r3, r3, #3
 8004f84:	2b03      	cmp	r3, #3
 8004f86:	d81b      	bhi.n	8004fc0 <UART_SetConfig+0xd0>
 8004f88:	a201      	add	r2, pc, #4	@ (adr r2, 8004f90 <UART_SetConfig+0xa0>)
 8004f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8e:	bf00      	nop
 8004f90:	08004fa1 	.word	0x08004fa1
 8004f94:	08004fb1 	.word	0x08004fb1
 8004f98:	08004fa9 	.word	0x08004fa9
 8004f9c:	08004fb9 	.word	0x08004fb9
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fa6:	e080      	b.n	80050aa <UART_SetConfig+0x1ba>
 8004fa8:	2302      	movs	r3, #2
 8004faa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fae:	e07c      	b.n	80050aa <UART_SetConfig+0x1ba>
 8004fb0:	2304      	movs	r3, #4
 8004fb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fb6:	e078      	b.n	80050aa <UART_SetConfig+0x1ba>
 8004fb8:	2308      	movs	r3, #8
 8004fba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fbe:	e074      	b.n	80050aa <UART_SetConfig+0x1ba>
 8004fc0:	2310      	movs	r3, #16
 8004fc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fc6:	e070      	b.n	80050aa <UART_SetConfig+0x1ba>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a8c      	ldr	r2, [pc, #560]	@ (8005200 <UART_SetConfig+0x310>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d138      	bne.n	8005044 <UART_SetConfig+0x154>
 8004fd2:	4b8a      	ldr	r3, [pc, #552]	@ (80051fc <UART_SetConfig+0x30c>)
 8004fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fd8:	f003 030c 	and.w	r3, r3, #12
 8004fdc:	2b0c      	cmp	r3, #12
 8004fde:	d82d      	bhi.n	800503c <UART_SetConfig+0x14c>
 8004fe0:	a201      	add	r2, pc, #4	@ (adr r2, 8004fe8 <UART_SetConfig+0xf8>)
 8004fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe6:	bf00      	nop
 8004fe8:	0800501d 	.word	0x0800501d
 8004fec:	0800503d 	.word	0x0800503d
 8004ff0:	0800503d 	.word	0x0800503d
 8004ff4:	0800503d 	.word	0x0800503d
 8004ff8:	0800502d 	.word	0x0800502d
 8004ffc:	0800503d 	.word	0x0800503d
 8005000:	0800503d 	.word	0x0800503d
 8005004:	0800503d 	.word	0x0800503d
 8005008:	08005025 	.word	0x08005025
 800500c:	0800503d 	.word	0x0800503d
 8005010:	0800503d 	.word	0x0800503d
 8005014:	0800503d 	.word	0x0800503d
 8005018:	08005035 	.word	0x08005035
 800501c:	2300      	movs	r3, #0
 800501e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005022:	e042      	b.n	80050aa <UART_SetConfig+0x1ba>
 8005024:	2302      	movs	r3, #2
 8005026:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800502a:	e03e      	b.n	80050aa <UART_SetConfig+0x1ba>
 800502c:	2304      	movs	r3, #4
 800502e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005032:	e03a      	b.n	80050aa <UART_SetConfig+0x1ba>
 8005034:	2308      	movs	r3, #8
 8005036:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800503a:	e036      	b.n	80050aa <UART_SetConfig+0x1ba>
 800503c:	2310      	movs	r3, #16
 800503e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005042:	e032      	b.n	80050aa <UART_SetConfig+0x1ba>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a6a      	ldr	r2, [pc, #424]	@ (80051f4 <UART_SetConfig+0x304>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d12a      	bne.n	80050a4 <UART_SetConfig+0x1b4>
 800504e:	4b6b      	ldr	r3, [pc, #428]	@ (80051fc <UART_SetConfig+0x30c>)
 8005050:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005054:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005058:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800505c:	d01a      	beq.n	8005094 <UART_SetConfig+0x1a4>
 800505e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005062:	d81b      	bhi.n	800509c <UART_SetConfig+0x1ac>
 8005064:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005068:	d00c      	beq.n	8005084 <UART_SetConfig+0x194>
 800506a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800506e:	d815      	bhi.n	800509c <UART_SetConfig+0x1ac>
 8005070:	2b00      	cmp	r3, #0
 8005072:	d003      	beq.n	800507c <UART_SetConfig+0x18c>
 8005074:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005078:	d008      	beq.n	800508c <UART_SetConfig+0x19c>
 800507a:	e00f      	b.n	800509c <UART_SetConfig+0x1ac>
 800507c:	2300      	movs	r3, #0
 800507e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005082:	e012      	b.n	80050aa <UART_SetConfig+0x1ba>
 8005084:	2302      	movs	r3, #2
 8005086:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800508a:	e00e      	b.n	80050aa <UART_SetConfig+0x1ba>
 800508c:	2304      	movs	r3, #4
 800508e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005092:	e00a      	b.n	80050aa <UART_SetConfig+0x1ba>
 8005094:	2308      	movs	r3, #8
 8005096:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800509a:	e006      	b.n	80050aa <UART_SetConfig+0x1ba>
 800509c:	2310      	movs	r3, #16
 800509e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050a2:	e002      	b.n	80050aa <UART_SetConfig+0x1ba>
 80050a4:	2310      	movs	r3, #16
 80050a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a51      	ldr	r2, [pc, #324]	@ (80051f4 <UART_SetConfig+0x304>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d17a      	bne.n	80051aa <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d824      	bhi.n	8005106 <UART_SetConfig+0x216>
 80050bc:	a201      	add	r2, pc, #4	@ (adr r2, 80050c4 <UART_SetConfig+0x1d4>)
 80050be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c2:	bf00      	nop
 80050c4:	080050e9 	.word	0x080050e9
 80050c8:	08005107 	.word	0x08005107
 80050cc:	080050f1 	.word	0x080050f1
 80050d0:	08005107 	.word	0x08005107
 80050d4:	080050f7 	.word	0x080050f7
 80050d8:	08005107 	.word	0x08005107
 80050dc:	08005107 	.word	0x08005107
 80050e0:	08005107 	.word	0x08005107
 80050e4:	080050ff 	.word	0x080050ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050e8:	f7ff f8a2 	bl	8004230 <HAL_RCC_GetPCLK1Freq>
 80050ec:	61f8      	str	r0, [r7, #28]
        break;
 80050ee:	e010      	b.n	8005112 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050f0:	4b44      	ldr	r3, [pc, #272]	@ (8005204 <UART_SetConfig+0x314>)
 80050f2:	61fb      	str	r3, [r7, #28]
        break;
 80050f4:	e00d      	b.n	8005112 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050f6:	f7ff f803 	bl	8004100 <HAL_RCC_GetSysClockFreq>
 80050fa:	61f8      	str	r0, [r7, #28]
        break;
 80050fc:	e009      	b.n	8005112 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005102:	61fb      	str	r3, [r7, #28]
        break;
 8005104:	e005      	b.n	8005112 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005106:	2300      	movs	r3, #0
 8005108:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005110:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	2b00      	cmp	r3, #0
 8005116:	f000 8107 	beq.w	8005328 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	685a      	ldr	r2, [r3, #4]
 800511e:	4613      	mov	r3, r2
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	4413      	add	r3, r2
 8005124:	69fa      	ldr	r2, [r7, #28]
 8005126:	429a      	cmp	r2, r3
 8005128:	d305      	bcc.n	8005136 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005130:	69fa      	ldr	r2, [r7, #28]
 8005132:	429a      	cmp	r2, r3
 8005134:	d903      	bls.n	800513e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800513c:	e0f4      	b.n	8005328 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	2200      	movs	r2, #0
 8005142:	461c      	mov	r4, r3
 8005144:	4615      	mov	r5, r2
 8005146:	f04f 0200 	mov.w	r2, #0
 800514a:	f04f 0300 	mov.w	r3, #0
 800514e:	022b      	lsls	r3, r5, #8
 8005150:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005154:	0222      	lsls	r2, r4, #8
 8005156:	68f9      	ldr	r1, [r7, #12]
 8005158:	6849      	ldr	r1, [r1, #4]
 800515a:	0849      	lsrs	r1, r1, #1
 800515c:	2000      	movs	r0, #0
 800515e:	4688      	mov	r8, r1
 8005160:	4681      	mov	r9, r0
 8005162:	eb12 0a08 	adds.w	sl, r2, r8
 8005166:	eb43 0b09 	adc.w	fp, r3, r9
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	603b      	str	r3, [r7, #0]
 8005172:	607a      	str	r2, [r7, #4]
 8005174:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005178:	4650      	mov	r0, sl
 800517a:	4659      	mov	r1, fp
 800517c:	f7fb fd5c 	bl	8000c38 <__aeabi_uldivmod>
 8005180:	4602      	mov	r2, r0
 8005182:	460b      	mov	r3, r1
 8005184:	4613      	mov	r3, r2
 8005186:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800518e:	d308      	bcc.n	80051a2 <UART_SetConfig+0x2b2>
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005196:	d204      	bcs.n	80051a2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	60da      	str	r2, [r3, #12]
 80051a0:	e0c2      	b.n	8005328 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80051a8:	e0be      	b.n	8005328 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051b2:	d16a      	bne.n	800528a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80051b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80051b8:	2b08      	cmp	r3, #8
 80051ba:	d834      	bhi.n	8005226 <UART_SetConfig+0x336>
 80051bc:	a201      	add	r2, pc, #4	@ (adr r2, 80051c4 <UART_SetConfig+0x2d4>)
 80051be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c2:	bf00      	nop
 80051c4:	080051e9 	.word	0x080051e9
 80051c8:	08005209 	.word	0x08005209
 80051cc:	08005211 	.word	0x08005211
 80051d0:	08005227 	.word	0x08005227
 80051d4:	08005217 	.word	0x08005217
 80051d8:	08005227 	.word	0x08005227
 80051dc:	08005227 	.word	0x08005227
 80051e0:	08005227 	.word	0x08005227
 80051e4:	0800521f 	.word	0x0800521f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051e8:	f7ff f822 	bl	8004230 <HAL_RCC_GetPCLK1Freq>
 80051ec:	61f8      	str	r0, [r7, #28]
        break;
 80051ee:	e020      	b.n	8005232 <UART_SetConfig+0x342>
 80051f0:	efff69f3 	.word	0xefff69f3
 80051f4:	40008000 	.word	0x40008000
 80051f8:	40013800 	.word	0x40013800
 80051fc:	40021000 	.word	0x40021000
 8005200:	40004400 	.word	0x40004400
 8005204:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005208:	f7ff f828 	bl	800425c <HAL_RCC_GetPCLK2Freq>
 800520c:	61f8      	str	r0, [r7, #28]
        break;
 800520e:	e010      	b.n	8005232 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005210:	4b4c      	ldr	r3, [pc, #304]	@ (8005344 <UART_SetConfig+0x454>)
 8005212:	61fb      	str	r3, [r7, #28]
        break;
 8005214:	e00d      	b.n	8005232 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005216:	f7fe ff73 	bl	8004100 <HAL_RCC_GetSysClockFreq>
 800521a:	61f8      	str	r0, [r7, #28]
        break;
 800521c:	e009      	b.n	8005232 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800521e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005222:	61fb      	str	r3, [r7, #28]
        break;
 8005224:	e005      	b.n	8005232 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005226:	2300      	movs	r3, #0
 8005228:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005230:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d077      	beq.n	8005328 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	005a      	lsls	r2, r3, #1
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	085b      	lsrs	r3, r3, #1
 8005242:	441a      	add	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	fbb2 f3f3 	udiv	r3, r2, r3
 800524c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	2b0f      	cmp	r3, #15
 8005252:	d916      	bls.n	8005282 <UART_SetConfig+0x392>
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800525a:	d212      	bcs.n	8005282 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	b29b      	uxth	r3, r3
 8005260:	f023 030f 	bic.w	r3, r3, #15
 8005264:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	085b      	lsrs	r3, r3, #1
 800526a:	b29b      	uxth	r3, r3
 800526c:	f003 0307 	and.w	r3, r3, #7
 8005270:	b29a      	uxth	r2, r3
 8005272:	8afb      	ldrh	r3, [r7, #22]
 8005274:	4313      	orrs	r3, r2
 8005276:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	8afa      	ldrh	r2, [r7, #22]
 800527e:	60da      	str	r2, [r3, #12]
 8005280:	e052      	b.n	8005328 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005288:	e04e      	b.n	8005328 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800528a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800528e:	2b08      	cmp	r3, #8
 8005290:	d827      	bhi.n	80052e2 <UART_SetConfig+0x3f2>
 8005292:	a201      	add	r2, pc, #4	@ (adr r2, 8005298 <UART_SetConfig+0x3a8>)
 8005294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005298:	080052bd 	.word	0x080052bd
 800529c:	080052c5 	.word	0x080052c5
 80052a0:	080052cd 	.word	0x080052cd
 80052a4:	080052e3 	.word	0x080052e3
 80052a8:	080052d3 	.word	0x080052d3
 80052ac:	080052e3 	.word	0x080052e3
 80052b0:	080052e3 	.word	0x080052e3
 80052b4:	080052e3 	.word	0x080052e3
 80052b8:	080052db 	.word	0x080052db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052bc:	f7fe ffb8 	bl	8004230 <HAL_RCC_GetPCLK1Freq>
 80052c0:	61f8      	str	r0, [r7, #28]
        break;
 80052c2:	e014      	b.n	80052ee <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052c4:	f7fe ffca 	bl	800425c <HAL_RCC_GetPCLK2Freq>
 80052c8:	61f8      	str	r0, [r7, #28]
        break;
 80052ca:	e010      	b.n	80052ee <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052cc:	4b1d      	ldr	r3, [pc, #116]	@ (8005344 <UART_SetConfig+0x454>)
 80052ce:	61fb      	str	r3, [r7, #28]
        break;
 80052d0:	e00d      	b.n	80052ee <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052d2:	f7fe ff15 	bl	8004100 <HAL_RCC_GetSysClockFreq>
 80052d6:	61f8      	str	r0, [r7, #28]
        break;
 80052d8:	e009      	b.n	80052ee <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052de:	61fb      	str	r3, [r7, #28]
        break;
 80052e0:	e005      	b.n	80052ee <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80052e2:	2300      	movs	r3, #0
 80052e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80052ec:	bf00      	nop
    }

    if (pclk != 0U)
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d019      	beq.n	8005328 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	085a      	lsrs	r2, r3, #1
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	441a      	add	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	fbb2 f3f3 	udiv	r3, r2, r3
 8005306:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	2b0f      	cmp	r3, #15
 800530c:	d909      	bls.n	8005322 <UART_SetConfig+0x432>
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005314:	d205      	bcs.n	8005322 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	b29a      	uxth	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	60da      	str	r2, [r3, #12]
 8005320:	e002      	b.n	8005328 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005334:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005338:	4618      	mov	r0, r3
 800533a:	3728      	adds	r7, #40	@ 0x28
 800533c:	46bd      	mov	sp, r7
 800533e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005342:	bf00      	nop
 8005344:	00f42400 	.word	0x00f42400

08005348 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005354:	f003 0308 	and.w	r3, r3, #8
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00a      	beq.n	8005372 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	430a      	orrs	r2, r1
 8005370:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00a      	beq.n	8005394 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	430a      	orrs	r2, r1
 8005392:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00a      	beq.n	80053b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ba:	f003 0304 	and.w	r3, r3, #4
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00a      	beq.n	80053d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	430a      	orrs	r2, r1
 80053d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053dc:	f003 0310 	and.w	r3, r3, #16
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00a      	beq.n	80053fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	430a      	orrs	r2, r1
 80053f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053fe:	f003 0320 	and.w	r3, r3, #32
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00a      	beq.n	800541c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	430a      	orrs	r2, r1
 800541a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005424:	2b00      	cmp	r3, #0
 8005426:	d01a      	beq.n	800545e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	430a      	orrs	r2, r1
 800543c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005442:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005446:	d10a      	bne.n	800545e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00a      	beq.n	8005480 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	430a      	orrs	r2, r1
 800547e:	605a      	str	r2, [r3, #4]
  }
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b098      	sub	sp, #96	@ 0x60
 8005490:	af02      	add	r7, sp, #8
 8005492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800549c:	f7fc ff8c 	bl	80023b8 <HAL_GetTick>
 80054a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0308 	and.w	r3, r3, #8
 80054ac:	2b08      	cmp	r3, #8
 80054ae:	d12e      	bne.n	800550e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80054b4:	9300      	str	r3, [sp, #0]
 80054b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054b8:	2200      	movs	r2, #0
 80054ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f88c 	bl	80055dc <UART_WaitOnFlagUntilTimeout>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d021      	beq.n	800550e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054d2:	e853 3f00 	ldrex	r3, [r3]
 80054d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054de:	653b      	str	r3, [r7, #80]	@ 0x50
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	461a      	mov	r2, r3
 80054e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80054ea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054f0:	e841 2300 	strex	r3, r2, [r1]
 80054f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1e6      	bne.n	80054ca <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2220      	movs	r2, #32
 8005500:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e062      	b.n	80055d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0304 	and.w	r3, r3, #4
 8005518:	2b04      	cmp	r3, #4
 800551a:	d149      	bne.n	80055b0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800551c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005524:	2200      	movs	r2, #0
 8005526:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f856 	bl	80055dc <UART_WaitOnFlagUntilTimeout>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d03c      	beq.n	80055b0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553e:	e853 3f00 	ldrex	r3, [r3]
 8005542:	623b      	str	r3, [r7, #32]
   return(result);
 8005544:	6a3b      	ldr	r3, [r7, #32]
 8005546:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800554a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	461a      	mov	r2, r3
 8005552:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005554:	633b      	str	r3, [r7, #48]	@ 0x30
 8005556:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005558:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800555a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800555c:	e841 2300 	strex	r3, r2, [r1]
 8005560:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1e6      	bne.n	8005536 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	3308      	adds	r3, #8
 800556e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	e853 3f00 	ldrex	r3, [r3]
 8005576:	60fb      	str	r3, [r7, #12]
   return(result);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f023 0301 	bic.w	r3, r3, #1
 800557e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	3308      	adds	r3, #8
 8005586:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005588:	61fa      	str	r2, [r7, #28]
 800558a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558c:	69b9      	ldr	r1, [r7, #24]
 800558e:	69fa      	ldr	r2, [r7, #28]
 8005590:	e841 2300 	strex	r3, r2, [r1]
 8005594:	617b      	str	r3, [r7, #20]
   return(result);
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1e5      	bne.n	8005568 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2220      	movs	r2, #32
 80055a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e011      	b.n	80055d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2220      	movs	r2, #32
 80055b4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2220      	movs	r2, #32
 80055ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3758      	adds	r7, #88	@ 0x58
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	603b      	str	r3, [r7, #0]
 80055e8:	4613      	mov	r3, r2
 80055ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ec:	e04f      	b.n	800568e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055f4:	d04b      	beq.n	800568e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055f6:	f7fc fedf 	bl	80023b8 <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	429a      	cmp	r2, r3
 8005604:	d302      	bcc.n	800560c <UART_WaitOnFlagUntilTimeout+0x30>
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e04e      	b.n	80056ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0304 	and.w	r3, r3, #4
 800561a:	2b00      	cmp	r3, #0
 800561c:	d037      	beq.n	800568e <UART_WaitOnFlagUntilTimeout+0xb2>
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	2b80      	cmp	r3, #128	@ 0x80
 8005622:	d034      	beq.n	800568e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	2b40      	cmp	r3, #64	@ 0x40
 8005628:	d031      	beq.n	800568e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	69db      	ldr	r3, [r3, #28]
 8005630:	f003 0308 	and.w	r3, r3, #8
 8005634:	2b08      	cmp	r3, #8
 8005636:	d110      	bne.n	800565a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2208      	movs	r2, #8
 800563e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f000 f838 	bl	80056b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2208      	movs	r2, #8
 800564a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e029      	b.n	80056ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	69db      	ldr	r3, [r3, #28]
 8005660:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005664:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005668:	d111      	bne.n	800568e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005672:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f000 f81e 	bl	80056b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2220      	movs	r2, #32
 800567e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e00f      	b.n	80056ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	69da      	ldr	r2, [r3, #28]
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	4013      	ands	r3, r2
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	429a      	cmp	r2, r3
 800569c:	bf0c      	ite	eq
 800569e:	2301      	moveq	r3, #1
 80056a0:	2300      	movne	r3, #0
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	461a      	mov	r2, r3
 80056a6:	79fb      	ldrb	r3, [r7, #7]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d0a0      	beq.n	80055ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b095      	sub	sp, #84	@ 0x54
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056c6:	e853 3f00 	ldrex	r3, [r3]
 80056ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	461a      	mov	r2, r3
 80056da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80056de:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056e4:	e841 2300 	strex	r3, r2, [r1]
 80056e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1e6      	bne.n	80056be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	3308      	adds	r3, #8
 80056f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f8:	6a3b      	ldr	r3, [r7, #32]
 80056fa:	e853 3f00 	ldrex	r3, [r3]
 80056fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	f023 0301 	bic.w	r3, r3, #1
 8005706:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	3308      	adds	r3, #8
 800570e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005710:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005712:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005714:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005716:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005718:	e841 2300 	strex	r3, r2, [r1]
 800571c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800571e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1e5      	bne.n	80056f0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005728:	2b01      	cmp	r3, #1
 800572a:	d118      	bne.n	800575e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	e853 3f00 	ldrex	r3, [r3]
 8005738:	60bb      	str	r3, [r7, #8]
   return(result);
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	f023 0310 	bic.w	r3, r3, #16
 8005740:	647b      	str	r3, [r7, #68]	@ 0x44
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	461a      	mov	r2, r3
 8005748:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800574a:	61bb      	str	r3, [r7, #24]
 800574c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574e:	6979      	ldr	r1, [r7, #20]
 8005750:	69ba      	ldr	r2, [r7, #24]
 8005752:	e841 2300 	strex	r3, r2, [r1]
 8005756:	613b      	str	r3, [r7, #16]
   return(result);
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1e6      	bne.n	800572c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2220      	movs	r2, #32
 8005762:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005772:	bf00      	nop
 8005774:	3754      	adds	r7, #84	@ 0x54
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr

0800577e <memset>:
 800577e:	4402      	add	r2, r0
 8005780:	4603      	mov	r3, r0
 8005782:	4293      	cmp	r3, r2
 8005784:	d100      	bne.n	8005788 <memset+0xa>
 8005786:	4770      	bx	lr
 8005788:	f803 1b01 	strb.w	r1, [r3], #1
 800578c:	e7f9      	b.n	8005782 <memset+0x4>
	...

08005790 <__libc_init_array>:
 8005790:	b570      	push	{r4, r5, r6, lr}
 8005792:	4d0d      	ldr	r5, [pc, #52]	@ (80057c8 <__libc_init_array+0x38>)
 8005794:	4c0d      	ldr	r4, [pc, #52]	@ (80057cc <__libc_init_array+0x3c>)
 8005796:	1b64      	subs	r4, r4, r5
 8005798:	10a4      	asrs	r4, r4, #2
 800579a:	2600      	movs	r6, #0
 800579c:	42a6      	cmp	r6, r4
 800579e:	d109      	bne.n	80057b4 <__libc_init_array+0x24>
 80057a0:	4d0b      	ldr	r5, [pc, #44]	@ (80057d0 <__libc_init_array+0x40>)
 80057a2:	4c0c      	ldr	r4, [pc, #48]	@ (80057d4 <__libc_init_array+0x44>)
 80057a4:	f000 f826 	bl	80057f4 <_init>
 80057a8:	1b64      	subs	r4, r4, r5
 80057aa:	10a4      	asrs	r4, r4, #2
 80057ac:	2600      	movs	r6, #0
 80057ae:	42a6      	cmp	r6, r4
 80057b0:	d105      	bne.n	80057be <__libc_init_array+0x2e>
 80057b2:	bd70      	pop	{r4, r5, r6, pc}
 80057b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80057b8:	4798      	blx	r3
 80057ba:	3601      	adds	r6, #1
 80057bc:	e7ee      	b.n	800579c <__libc_init_array+0xc>
 80057be:	f855 3b04 	ldr.w	r3, [r5], #4
 80057c2:	4798      	blx	r3
 80057c4:	3601      	adds	r6, #1
 80057c6:	e7f2      	b.n	80057ae <__libc_init_array+0x1e>
 80057c8:	08005880 	.word	0x08005880
 80057cc:	08005880 	.word	0x08005880
 80057d0:	08005880 	.word	0x08005880
 80057d4:	08005884 	.word	0x08005884

080057d8 <memcpy>:
 80057d8:	440a      	add	r2, r1
 80057da:	4291      	cmp	r1, r2
 80057dc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80057e0:	d100      	bne.n	80057e4 <memcpy+0xc>
 80057e2:	4770      	bx	lr
 80057e4:	b510      	push	{r4, lr}
 80057e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057ee:	4291      	cmp	r1, r2
 80057f0:	d1f9      	bne.n	80057e6 <memcpy+0xe>
 80057f2:	bd10      	pop	{r4, pc}

080057f4 <_init>:
 80057f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057f6:	bf00      	nop
 80057f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057fa:	bc08      	pop	{r3}
 80057fc:	469e      	mov	lr, r3
 80057fe:	4770      	bx	lr

08005800 <_fini>:
 8005800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005802:	bf00      	nop
 8005804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005806:	bc08      	pop	{r3}
 8005808:	469e      	mov	lr, r3
 800580a:	4770      	bx	lr
